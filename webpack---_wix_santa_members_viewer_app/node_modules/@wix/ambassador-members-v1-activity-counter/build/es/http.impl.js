import { toURLSearchParams } from '@wix/metro-runtime';
import { serializer } from '@wix/metro-runtime/ambassador';
import { resolveUrl } from '@wix/metro-runtime';
var _getActivityCountersRequest = {};
var _getActivityCountersResponse = {};
var _incrementActivityCountersRequest = {};
var _incrementActivityCountersResponse = {};
var _queryActivityCountersRequest = {};
var _queryActivityCountersResponse = {};
var _setActivityCountersRequest = {};
var _setActivityCountersResponse = {};
function resolveComWixpressMembersActivitycountersActivityCountersUrl(opts) {
    var domainToMappings = {
        'api._api_base_domain_': [
            {
                srcPath: '/activity-counters-api',
                destPath: '',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/members/v1/activity-counters',
                destPath: '/v1/activity-counters',
            },
        ],
        _: [
            {
                srcPath: '/_api/members/v1/activity-counters',
                destPath: '/v1/activity-counters',
            },
        ],
        'manage._base_domain_': [
            {
                srcPath: '/_api/members/v1/activity-counters',
                destPath: '/v1/activity-counters',
            },
        ],
        'www._base_domain_': [
            {
                srcPath: '/_api/members/v1/activity-counters',
                destPath: '/v1/activity-counters',
            },
        ],
        '*.dev.wix-code.com': [
            {
                srcPath: '/_api/members/v1/activity-counters',
                destPath: '/v1/activity-counters',
            },
        ],
        'editor._base_domain_': [
            {
                srcPath: '/_api/members/v1/activity-counters',
                destPath: '/v1/activity-counters',
            },
        ],
        'blocks._base_domain_': [
            {
                srcPath: '/_api/members/v1/activity-counters',
                destPath: '/v1/activity-counters',
            },
        ],
        'create.editorx': [
            {
                srcPath: '/_api/members/v1/activity-counters',
                destPath: '/v1/activity-counters',
            },
        ],
    };
    return resolveUrl(Object.assign(opts, { domainToMappings: domainToMappings }));
}
/**
 * Sets activity counters for a requested site member.
 *
 * If a counter does not yet exist, it will be created.
 *
 * Counters are set under a custom key, which is an ID for the counter, and is unique per app.
 *
 * Members are typically associated with a contact, each having a distinct member and contact ID. When passing the ID as a parameter, avoid presuming the IDs are identical since they represent separate entities.
 */
export function setActivityCounters(payload) {
    var _a = serializer(_setActivityCountersRequest, {}), toReq = _a.toJSON, fromReq = _a.fromJSON;
    var fromRes = serializer(_setActivityCountersResponse, {}).fromJSON;
    function __setActivityCounters(_a) {
        var host = _a.host;
        var serializedData = toReq(payload);
        var metadata = {
            entityFqdn: 'wix.members.v1.activity_counter',
            method: 'PUT',
            methodFqn: 'com.wixpress.members.activitycounters.ActivityCounters.SetActivityCounters',
            url: resolveComWixpressMembersActivitycountersActivityCountersUrl({
                protoPath: '/v1/activity-counters/{memberId}',
                data: serializedData,
                host: host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __setActivityCounters.fromReq = fromReq;
    __setActivityCounters.__isAmbassador = true;
    return __setActivityCounters;
}
/**
 * Increments activity counters for a requested site member by the count provided in counter.
 *
 * If a counter does not yet exist, it will be created.
 *
 * Counters are incremented under a custom key, which is an ID for the counter, and is unique per app.
 *
 * Members are typically associated with a contact, each having a distinct member and contact ID. When passing the ID as a parameter, avoid presuming the IDs are identical since they represent separate entities.
 */
export function incrementActivityCounters(payload) {
    var _a = serializer(_incrementActivityCountersRequest, {}), toReq = _a.toJSON, fromReq = _a.fromJSON;
    var fromRes = serializer(_incrementActivityCountersResponse, {}).fromJSON;
    function __incrementActivityCounters(_a) {
        var host = _a.host;
        var serializedData = toReq(payload);
        var metadata = {
            entityFqdn: 'wix.members.v1.activity_counter',
            method: 'PUT',
            methodFqn: 'com.wixpress.members.activitycounters.ActivityCounters.IncrementActivityCounters',
            url: resolveComWixpressMembersActivitycountersActivityCountersUrl({
                protoPath: '/v1/activity-counters/{memberId}/increment',
                data: serializedData,
                host: host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __incrementActivityCounters.fromReq = fromReq;
    __incrementActivityCounters.__isAmbassador = true;
    return __incrementActivityCounters;
}
/**
 * Returns activity counters for a requested site member.
 * A third party can read all the public counters, set by any apps. However, third parties can only read their own private counters, not those from others' apps.
 *
 * Members are typically associated with a contact, each having a distinct member and contact ID. When passing the ID as a parameter, avoid presuming the IDs are identical since they represent separate entities.
 */
export function getActivityCounters(payload) {
    var _a = serializer(_getActivityCountersRequest, {}), toReq = _a.toJSON, fromReq = _a.fromJSON;
    var fromRes = serializer(_getActivityCountersResponse, {}).fromJSON;
    function __getActivityCounters(_a) {
        var host = _a.host;
        var serializedData = toReq(payload);
        var metadata = {
            entityFqdn: 'wix.members.v1.activity_counter',
            method: 'GET',
            methodFqn: 'com.wixpress.members.activitycounters.ActivityCounters.GetActivityCounters',
            url: resolveComWixpressMembersActivitycountersActivityCountersUrl({
                protoPath: '/v1/activity-counters/{memberId}',
                data: serializedData,
                host: host,
            }),
            params: toURLSearchParams(serializedData),
            transformResponse: fromRes,
        };
        return metadata;
    }
    __getActivityCounters.fromReq = fromReq;
    __getActivityCounters.__isAmbassador = true;
    return __getActivityCounters;
}
/**
 * Returns up to 100 activity counters for the provided filter and paging.
 *
 * Service will return only counters that are marked as public, or private counters from apps created by the requesting third party.
 *
 * Supported fields for filtering:
 * - memberId
 *
 * Supported operations:
 * Comparison:
 * - $eq
 * - $ne
 * - $in
 * Logical:
 * - $and
 * - $not
 * - $or
 */
export function queryActivityCounters(payload) {
    var _a = serializer(_queryActivityCountersRequest, {}), toReq = _a.toJSON, fromReq = _a.fromJSON;
    var fromRes = serializer(_queryActivityCountersResponse, {}).fromJSON;
    function __queryActivityCounters(_a) {
        var host = _a.host;
        var serializedData = toReq(payload);
        var metadata = {
            entityFqdn: 'wix.members.v1.activity_counter',
            method: 'POST',
            methodFqn: 'com.wixpress.members.activitycounters.ActivityCounters.QueryActivityCounters',
            url: resolveComWixpressMembersActivitycountersActivityCountersUrl({
                protoPath: '/v1/activity-counters/query',
                data: serializedData,
                host: host,
            }),
            data: serializedData,
            transformResponse: fromRes,
        };
        return metadata;
    }
    __queryActivityCounters.fromReq = fromReq;
    __queryActivityCounters.__isAmbassador = true;
    return __queryActivityCounters;
}
//# sourceMappingURL=http.impl.js.map