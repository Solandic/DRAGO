import { measureCompHeight, getScaleFromPerspectiveAndZ } from './utils';
const PERSPECTIVE = 100;
export default function create(options, dom) {
  const measures = {
    compHeight: 0
  };
  if (dom) {
    measureCompHeight(measures, dom, true);
  }
  const {
    stretch = 1.3,
    zoom = 100 / 6
  } = options.namedEffect;
  const scale = getScaleFromPerspectiveAndZ(zoom, PERSPECTIVE);
  return [{
    ...options,
    part: 'BG_IMG',
    easing: 'sineOut',
    startOffset: {
      name: 'cover',
      offset: {
        type: 'percentage',
        value: 0
      }
    },
    endOffset: {
      name: 'cover',
      offset: {
        type: 'percentage',
        value: 0
      }
    },
    get endOffsetAdd() {
      return `calc(100vh + ${measures.compHeight}px)`;
    },
    get keyframes() {
      return [{
        transform: 'translateY(10lvh)'
      }, {
        transform: `translateY(calc(${parseFloat((-0.1 * (2 - scale)).toFixed(2))} * var(--motion-comp-height, ${measures.compHeight}px)))`
      }];
    }
  }, {
    ...options,
    part: 'BG_IMG',
    easing: 'linear',
    composite: 'add',
    startOffset: {
      name: 'cover',
      offset: {
        type: 'percentage',
        value: 0
      }
    },
    endOffset: {
      name: 'cover',
      offset: {
        type: 'percentage',
        value: 0
      }
    },
    get endOffsetAdd() {
      return `calc(100vh + ${measures.compHeight}px)`;
    },
    keyframes: [{
      transform: `scaleY(${stretch})`
    }, {
      transform: `scaleY(1)`
    }]
  }, {
    ...options,
    part: 'BG_IMG',
    easing: 'sineIn',
    composite: 'add',
    startOffset: {
      name: 'cover',
      offset: {
        type: 'percentage',
        value: 0
      }
    },
    endOffset: {
      name: 'cover',
      offset: {
        type: 'percentage',
        value: 0
      }
    },
    get endOffsetAdd() {
      return `calc(100vh + ${measures.compHeight}px)`;
    },
    keyframes: [{
      transform: `perspective(${PERSPECTIVE}px) translateZ(0px)`
    }, {
      transform: `perspective(${PERSPECTIVE}px) translateZ(${parseFloat(zoom.toFixed(2))}px)`
    }]
  }];
}
//# sourceMappingURL=BgFake3D.js.map