import { roundNumber } from '../../utils';
import { measureCompHeight, getScaleFromPerspectiveAndZ } from './utils';
const PERSPECTIVE = 100;
const DIRECTION_TO_PARAMS = {
  in: {
    easing: 'sineIn',
    fromY: '20lvh',
    defaultZoom: 40
  },
  out: {
    easing: 'sineInOut',
    fromY: '0px',
    defaultZoom: 15
  }
};
export default function create(options, dom) {
  const {
    direction = 'in'
  } = options.namedEffect;
  const isIn = direction === 'in';
  const measures = {
    compHeight: 0
  };
  if (dom) {
    measureCompHeight(measures, dom, isIn);
  }
  const {
    easing,
    fromY,
    defaultZoom
  } = DIRECTION_TO_PARAMS[direction];
  const {
    zoom = defaultZoom
  } = options.namedEffect;
  const fromZ = roundNumber(isIn ? 0 : zoom / 1.3);
  const toZ = roundNumber(isIn ? zoom : -zoom);
  const toScale = roundNumber(getScaleFromPerspectiveAndZ(toZ, PERSPECTIVE));
  return [{
    ...options,
    part: 'BG_MEDIA',
    easing: 'linear',
    startOffset: {
      name: 'cover',
      offset: {
        type: 'percentage',
        value: 0
      }
    },
    endOffset: {
      name: 'cover',
      offset: {
        type: 'percentage',
        value: 0
      }
    },
    keyframes: [{
      transform: 'translate3d(0, 0, 0)'
    }, {
      transform: 'translate3d(0, 0, 0)'
    }]
  }, {
    ...options,
    part: 'BG_IMG',
    easing: 'linear',
    startOffset: {
      name: 'cover',
      offset: {
        type: 'percentage',
        value: 0
      }
    },
    endOffset: {
      name: 'cover',
      offset: {
        type: 'percentage',
        value: 0
      }
    },
    get endOffsetAdd() {
      return `calc(100vh + ${measures.compHeight}px)`;
    },
    get keyframes() {
      const toY = isIn ? `calc(-0.2 * var(--motion-comp-height, ${measures.compHeight}px) + 0.5 * ${zoom / PERSPECTIVE} * max(0px, 100lvh - var(--motion-comp-height, ${measures.compHeight}px)))` : '0px';
      return [{
        transform: `translateY(${fromY})`
      }, {
        transform: `translateY(calc(${toY} * ${toScale}))`
      }];
    }
  }, {
    ...options,
    easing,
    part: 'BG_IMG',
    composite: isIn ? 'add' : 'replace',
    startOffset: {
      name: 'cover',
      offset: {
        type: 'percentage',
        value: 0
      }
    },
    endOffset: {
      name: 'cover',
      offset: {
        type: 'percentage',
        value: 0
      }
    },
    get endOffsetAdd() {
      return `calc(100vh + ${measures.compHeight}px)`;
    },
    keyframes: [{
      transform: `perspective(${PERSPECTIVE}px) translateZ(${fromZ}px)`
    }, {
      transform: `perspective(${PERSPECTIVE}px) translateZ(${toZ}px)`
    }]
  }];
}
//# sourceMappingURL=BgZoom.js.map