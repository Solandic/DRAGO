export { initialFrame } from './common';
const SCALE_MAP = {
  soft: 0.8,
  medium: 0.6,
  hard: 0
};
const TRANSFORM_ORIGIN_MAP = {
  top: {
    x: 0,
    y: -0.5
  },
  'top-right': {
    x: 0.5,
    y: -0.5
  },
  right: {
    x: 0.5,
    y: 0
  },
  'bottom-right': {
    x: 0.5,
    y: 0.5
  },
  bottom: {
    x: 0,
    y: 0.5
  },
  'bottom-left': {
    x: -0.5,
    y: 0.5
  },
  left: {
    x: -0.5,
    y: 0
  },
  'top-left': {
    x: -0.5,
    y: -0.5
  },
  center: {
    x: 0,
    y: 0
  }
};
export function web(options, dom) {
  const [fadeIn, {
    custom,
    ...expandIn
  }] = style(options);
  prepare(options, dom);
  const {
    '--motion-translate-x': x,
    '--motion-translate-y': y,
    '--motion-scale': scale
  } = custom;
  return [{
    ...fadeIn,
    keyframes: [{
      opacity: 0
    }, {
      opacity: 'var(--comp-opacity, 1)'
    }]
  }, {
    ...expandIn,
    keyframes: [{
      transform: `translateX(calc(var(--motion-width, 100%) * ${x})) translateY(calc(var(--motion-height, 100%) * ${y})) scale(${scale}) translateX(calc(var(--motion-width, 100%) * ${-x})) translateY(calc(var(--motion-height, 100%) * ${-y}))  rotate(var(--comp-rotate-z, 0deg))`
    }, {
      transform: `translateX(calc(var(--motion-width, 100%) * ${x})) translateY(calc(var(--motion-height, 100%) * ${y})) scale(1) translateX(calc(var(--motion-width, 100%) * ${-x})) translateY(calc(var(--motion-height, 100%) * ${-y})) rotate(var(--comp-rotate-z, 0deg))`
    }]
  }];
}
export function style(options) {
  const {
    power,
    initialScale = 0,
    direction = 'center'
  } = options.namedEffect;
  const easing = options.easing || 'cubicInOut';
  const scale = power && power in SCALE_MAP ? SCALE_MAP[power] : initialScale;
  const {
    x,
    y
  } = TRANSFORM_ORIGIN_MAP[direction];
  return [{
    ...options,
    name: 'fadeIn',
    easing: 'linear',
    custom: {}
  }, {
    ...options,
    name: 'expandIn',
    easing,
    custom: {
      '--motion-translate-x': x,
      '--motion-translate-y': y,
      '--motion-scale': scale
    }
  }];
}
export function prepare(_, dom) {
  if (dom) {
    dom.measure(target => {
      if (!target) {
        return;
      }
      const {
        width,
        height
      } = target.getBoundingClientRect();
      dom.mutate(() => {
        target.style.setProperty('--motion-width', `${width}px`);
        target.style.setProperty('--motion-height', `${height}px`);
      });
    });
  }
}
//# sourceMappingURL=ExpandIn.js.map