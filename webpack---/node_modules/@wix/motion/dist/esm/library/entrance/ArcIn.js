export { initialFrame } from './common';
const DIRECTION_TO_TRANSFORM_MAP = {
  top: {
    rotateX: 80
  },
  right: {
    rotateY: 80
  },
  bottom: {
    rotateX: -80
  },
  left: {
    rotateY: -80
  }
};
const EASING_MAP = {
  soft: 'cubicInOut',
  medium: 'quintInOut',
  hard: 'backOut'
};
export function web(options, dom) {
  const [fadeIn, {
    custom,
    ...arcIn
  }] = style(options);
  prepare(options, dom);
  return [{
    ...fadeIn,
    keyframes: [{
      opacity: 0
    }, {
      opacity: 'var(--comp-opacity, 1)'
    }]
  }, {
    ...arcIn,
    keyframes: [{
      transform: `perspective(800px) translateZ(calc${custom['--motion-translate-z']}) ${custom['--motion-arc-rotation']} translateZ(calc(-1 * ${custom['--motion-translate-z']})) rotate(var(--comp-rotate-z, 0deg))`
    }, {
      transform: `perspective(800px) translateZ(calc${custom['--motion-translate-z']}) rotateX(0deg) rotateY(0deg) translateZ(calc(-1 * ${custom['--motion-translate-z']})) rotate(var(--comp-rotate-z, 0deg))`
    }]
  }];
}
export function style(options) {
  const {
    power,
    direction = 'right'
  } = options.namedEffect;
  const easing = power && EASING_MAP[power] || options.easing || 'quintInOut';

  // we can remove dependency on measurement here if we use a "layout wrapper" as a `container`: https://jsbin.com/mulojuwogi/edit?css,output
  // we could also consider a fixed value for z, e.g. 300px like in ArcScroll
  // const { width, height } = element.getBoundingClientRect();

  const {
    rotateX,
    rotateY
  } = DIRECTION_TO_TRANSFORM_MAP[direction];
  // const z = rotateX ? height / 2 : width / 2;
  const z = `(-1 * var(${rotateX ? '--motion-height' : '--motion-width'}, 100v${rotateX ? 'h' : 'w'}) / 2)`;
  return [{
    ...options,
    name: 'fadeIn',
    duration: options.duration * 0.7,
    easing: 'sineIn',
    custom: {}
  }, {
    ...options,
    name: 'arcIn',
    easing,
    custom: {
      '--motion-translate-z': z,
      '--motion-arc-rotation': `rotateX(${rotateX || 0}deg) rotateY(${rotateY || 0}deg)`
    }
  }];
}
export function prepare(options, dom) {
  const {
    direction = 'right'
  } = options.namedEffect;
  const isVertical = direction === 'top' || direction === 'bottom';
  if (dom) {
    dom.measure(target => {
      if (!target) {
        return;
      }
      const {
        width,
        height
      } = target.getBoundingClientRect();
      dom.mutate(() => {
        if (isVertical) {
          target.style.setProperty('--motion-height', `${height}px`);
        } else {
          target.style.setProperty('--motion-width', `${width}px`);
        }
      });
    });
  }
}
//# sourceMappingURL=ArcIn.js.map