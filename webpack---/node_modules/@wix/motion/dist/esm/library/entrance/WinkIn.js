import { getClipPolygonParams, getAdjustedDirection } from '../../utils';
export { initialFrame } from './common';
const PARAM_MAP = {
  vertical: {
    scaleY: 0,
    scaleX: 1
  },
  horizontal: {
    scaleY: 1,
    scaleX: 0
  }
};
const DIRECTIONS = ['vertical', 'horizontal'];
export function web(options, dom) {
  const [fadeIn, {
    custom,
    ...winkIn
  }] = style(options);
  prepare(options, dom);
  return [{
    ...fadeIn,
    keyframes: [{
      opacity: 0
    }, {
      opacity: 'var(--comp-opacity, 1)'
    }]
  }, {
    ...winkIn,
    keyframes: [{
      offset: 0,
      clipPath: `var(--motion-clip-start, ${custom['--motion-clip-start']})`,
      transform: `rotate(var(--comp-rotate-z, 0deg)) scale(var(--motion-scale-x, ${custom['--motion-scale-x']}), var(--motion-scale-y, ${custom['--motion-scale-y']}))`
    }, {
      offset: 0.85,
      transform: 'rotate(var(--comp-rotate-z, 0deg)) scale(1, 1)'
    }, {
      offset: 1,
      transform: 'rotate(var(--comp-rotate-z, 0deg)) scale(1, 1)',
      clipPath: custom['--motion-clip-end']
    }]
  }];
}
export function style(options) {
  const {
    direction = 'horizontal'
  } = options.namedEffect;
  const adjustedDirection = getAdjustedDirection(DIRECTIONS, direction, 0);
  const {
    scaleX,
    scaleY
  } = PARAM_MAP[adjustedDirection];
  const easing = options.easing || 'quintInOut';
  const start = getClipPolygonParams({
    direction,
    minimum: 100
  });
  const end = getClipPolygonParams({
    direction: 'initial'
  });
  return [{
    ...options,
    easing: 'quadOut',
    name: 'fadeIn',
    custom: {}
  }, {
    ...options,
    easing,
    name: 'winkIn',
    custom: {
      '--motion-scale-x': scaleX,
      '--motion-scale-y': scaleY,
      '--motion-clip-start': start,
      '--motion-clip-end': end
    }
  }];
}
export function prepare(options, dom) {
  const {
    direction = 'horizontal'
  } = options.namedEffect;
  if (dom) {
    dom.measure(target => {
      if (!target) {
        return;
      }
      const rotation = getComputedStyle(target).getPropertyValue('--comp-rotate-z') || '0';
      const rotatedDirection = getAdjustedDirection(DIRECTIONS, direction, parseInt(rotation, 10));
      const scale = PARAM_MAP[rotatedDirection];
      const rotatedClip = getClipPolygonParams({
        direction: rotatedDirection,
        minimum: 100
      });
      dom.mutate(() => {
        target.style.setProperty('--motion-clip-start', rotatedClip);
        target.style.setProperty('--motion-scale-x', `${scale.scaleX}`);
        target.style.setProperty('--motion-scale-y', `${scale.scaleY}`);
      });
    });
  }
}
//# sourceMappingURL=WinkIn.js.map