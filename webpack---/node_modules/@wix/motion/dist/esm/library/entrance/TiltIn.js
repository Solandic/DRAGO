import { getAdjustedDirection, getClipPolygonParams } from '../../utils';
export { initialFrame } from './common';
const ROTATION_MAP = {
  left: 30,
  right: -30
};
const DIRECTIONS = ['top', 'right', 'bottom', 'left'];
function getClipStart(rotateZ) {
  const clipDirection = getAdjustedDirection(DIRECTIONS, 'top', rotateZ);
  return getClipPolygonParams({
    direction: clipDirection,
    minimum: 0
  });
}
export function web(options, dom) {
  const [fadeIn, {
    custom: rotateCustom,
    ...tiltInRotate
  }, {
    custom: clipCustom,
    ...tiltInClip
  }] = style(options);
  const translateZ = rotateCustom['--motion-translate-z'];
  prepare(options, dom);
  return [{
    ...fadeIn,
    keyframes: [{
      opacity: 0
    }, {
      opacity: 'var(--comp-opacity, 1)'
    }]
  }, {
    ...tiltInRotate,
    keyframes: [{
      transform: ` perspective(800px) translateZ(calc(${translateZ} * -1)) rotateX(-90deg) translateZ(calc${translateZ}) rotate(var(--comp-rotate-z, 0deg))`
    }, {
      transform: ` perspective(800px) translateZ(calc(${translateZ} * -1)) rotateX(0deg) translateZ(calc${translateZ}) rotate(var(--comp-rotate-z, 0deg))`
    }]
  }, {
    ...tiltInClip,
    keyframes: [{
      clipPath: `var(--motion-clip-start, ${clipCustom['--motion-clip-start']})`,
      transform: `rotateZ(${clipCustom['--motion-rotate-z']})`
    }, {
      clipPath: clipCustom['--motion-clip-end'],
      transform: `rotateZ(0deg)`
    }]
  }];
}
export function style(options) {
  const {
    direction = 'left'
  } = options.namedEffect;
  const easing = options.easing || 'cubicOut';
  const start = getClipStart(0);
  const rotationZ = ROTATION_MAP[direction];
  const end = getClipPolygonParams({
    direction: 'initial'
  });
  const translateZ = `(var(--motion-height, 200px) / 2)`;
  return [{
    ...options,
    name: 'fadeIn',
    duration: options.duration * 0.2,
    easing: 'cubicOut',
    custom: {}
  }, {
    ...options,
    name: 'tiltInRotate',
    easing,
    custom: {
      '--motion-translate-z': translateZ
    }
  }, {
    ...options,
    name: 'slideInClip',
    easing,
    composite: 'add',
    duration: options.duration * 0.8,
    custom: {
      '--motion-rotate-z': `${rotationZ}deg`,
      '--motion-clip-start': start,
      '--motion-clip-end': end
    }
  }];
}
export function prepare(_, dom) {
  if (dom) {
    dom.measure(target => {
      if (!target) {
        return;
      }
      const rotation = getComputedStyle(target).getPropertyValue('--comp-rotate-z') || '0deg';
      dom.mutate(target_ => {
        target_ == null || target_.style.setProperty('--motion-clip-start', getClipStart(parseInt(rotation, 10)));
      });
    });
  }
}
//# sourceMappingURL=TiltIn.js.map