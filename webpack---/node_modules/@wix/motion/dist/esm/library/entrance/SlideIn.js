import { getAdjustedDirection, getClipPolygonParams } from '../../utils';
export { initialFrame } from './common';
const PARAM_MAP = {
  top: {
    dx: 0,
    dy: -1,
    clip: 'bottom'
  },
  right: {
    dx: 1,
    dy: 0,
    clip: 'left'
  },
  bottom: {
    dx: 0,
    dy: 1,
    clip: 'top'
  },
  left: {
    dx: -1,
    dy: 0,
    clip: 'right'
  }
};
const DIRECTIONS = ['top', 'right', 'bottom', 'left'];
const INITIAL_TRANSLATE_MAP = {
  soft: 0.2,
  medium: 0.8,
  hard: 1
};
export function web(options, dom) {
  const [fadeIn, {
    custom,
    ...slideIn
  }] = style(options);
  prepare(options, dom);
  return [{
    ...slideIn,
    keyframes: [{
      transform: `rotate(var(--comp-rotate-z, 0deg)) translate(var(--motion-translate-x, -100%), var(--motion-translate-y, 0%))`,
      clipPath: `var(--motion-clip-start, ${custom['--motion-clip-start']})`
    }, {
      transform: 'rotate(var(--comp-rotate-z, 0deg)) translate(0px, 0px)',
      clipPath: custom['--motion-clip-end']
    }]
  }, ...(fadeIn.name !== 'none' ? [{
    ...fadeIn,
    keyframes: [{
      opacity: 0
    }, {
      opacity: 'var(--comp-opacity, 1)'
    }]
  }] : [])];
}
export function style(options) {
  const {
    direction = 'left',
    power,
    initialTranslate = 1
  } = options.namedEffect;
  const easing = options.easing || 'cubicInOut';
  const scale = power && INITIAL_TRANSLATE_MAP[power] || initialTranslate;
  const minimum = 100 - scale * 100;
  const start = getClipPolygonParams({
    direction,
    minimum
  });
  const end = getClipPolygonParams({
    direction: 'initial'
  });
  return [{
    ...options,
    easing: 'cubicInOut',
    name: power !== 'hard' ? 'fadeIn' : 'none',
    custom: {}
  }, {
    ...options,
    name: 'slideIn',
    easing,
    custom: {
      '--motion-clip-start': start,
      '--motion-clip-end': end,
      '--motion-translate-x': `${PARAM_MAP[direction].dx * 100}%`,
      '--motion-translate-y': `${PARAM_MAP[direction].dy * 100}%`
    }
  }];
}
export function prepare(options, dom) {
  const {
    direction = 'left',
    power,
    initialTranslate = 1
  } = options.namedEffect;
  const scale = power && INITIAL_TRANSLATE_MAP[power] || initialTranslate;
  const minimum = 100 - scale * 100;
  if (dom) {
    dom.measure(target => {
      if (!target) {
        return;
      }
      const rotation = parseInt(getComputedStyle(target).getPropertyValue('--comp-rotate-z') || '0deg', 10);
      dom.mutate(target_ => {
        const adjustedDirection = getAdjustedDirection(DIRECTIONS, direction, rotation);
        target_ == null || target_.style.setProperty('--motion-clip-start', getClipPolygonParams({
          direction: PARAM_MAP[adjustedDirection].clip,
          minimum
        }));
        target_ == null || target_.style.setProperty('--motion-translate-x', `${PARAM_MAP[adjustedDirection].dx * 100}%`);
        target_ == null || target_.style.setProperty('--motion-translate-y', `${PARAM_MAP[adjustedDirection].dy * 100}%`);
      });
    });
  }
}
//# sourceMappingURL=SlideIn.js.map