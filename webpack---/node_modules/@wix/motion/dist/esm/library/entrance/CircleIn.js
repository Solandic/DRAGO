export { initialFrame } from './common';
const ROTATION = 45;
export function web(options, dom) {
  const [circleInX, circleInY] = style(options);
  prepare(options, dom);
  return [{
    ...circleInX,
    keyframes: [{
      translate: circleInX.custom['--motion-translate-x']
    }, {
      translate: '0'
    }]
  }, {
    ...circleInY,
    keyframes: [{
      opacity: 0,
      transform: `translateY(${circleInY.custom['--motion-translate-y']}) rotate(calc(var(--comp-rotate-z, 0deg) + ${circleInY.custom['--motion-rotate-z']}))`
    }, {
      opacity: 'var(--comp-opacity, 1)',
      transform: `translateY(0) rotate(var(--comp-rotate-z, 0deg))`
    }]
  }];
}
export function style(options) {
  const {
    direction = 'right'
  } = options.namedEffect;
  const x = direction === 'right' ? 'calc(100vw - var(--motion-left, 0px))' : 'calc(var(--motion-left, 0px) * -1 - 100%)';
  const y = 'min(calc(100% * -1.5), max(-300px, calc(100% * -5.5)))';
  return [{
    ...options,
    name: 'circleXIn',
    easing: 'circOut',
    custom: {
      '--motion-translate-x': x
    }
  }, {
    ...options,
    name: 'circleYIn',
    easing: 'linear',
    custom: {
      '--motion-translate-y': y,
      '--motion-rotate-z': `${(direction === 'right' ? 1 : -1) * ROTATION}deg`
    }
  }];
}
export function prepare(_, dom) {
  if (dom) {
    let left = 0;
    dom.measure(target => {
      if (!target) {
        return;
      }
      left = target.getBoundingClientRect().left;
    });
    dom.mutate(target => {
      target == null || target.style.setProperty('--motion-left', `${left}px`);
    });
  }
}
//# sourceMappingURL=CircleIn.js.map