/**
 * A function to create a log object for the 'newGiftCardAbTestFirstGiftCardAppInstallationSrc125Evid3000' event (evid: 3000)
 *
 * Event description: When a gift card app is installed for the first time
 * Fired after: gift card app provision -> Checking there is no previous data in Rise legacy
 *
 * @param {newGiftCardAbTestFirstGiftCardAppInstallationSrc125Evid3000Params} params - The parameters for this event
 * @return {LogObject<newGiftCardAbTestFirstGiftCardAppInstallationSrc125Evid3000Params>} LogObject<newGiftCardAbTestFirstGiftCardAppInstallationSrc125Evid3000Params>
 */
export function newGiftCardAbTestFirstGiftCardAppInstallationSrc125Evid3000(params) {
    return { evid: 3000, src: 125, endpoint: '', params };
}
/**
 * A function to create a log object for the 'editorClickOnLeftBarOfGiftCardSettingsSrc125Evid31' event (evid: 31)
 *
 * Event description: click on any of the tabs in the left bar in GC settings.
 *
 * @param {editorClickOnLeftBarOfGiftCardSettingsSrc125Evid31Params} params - The parameters for this event
 * @property {number} productId - Id of gift card template
 * @property {string} tab - main / settings / text /design
 * @return {LogObject<editorClickOnLeftBarOfGiftCardSettingsSrc125Evid31Params>} LogObject<editorClickOnLeftBarOfGiftCardSettingsSrc125Evid31Params>
 */
export function editorClickOnLeftBarOfGiftCardSettingsSrc125Evid31(params) {
    return { evid: 31, src: 125, endpoint: '', params };
}
/**
 * A function to create a log object for the 'editorChangeInGiftCardSettingsSrc125Evid32' event (evid: 32)
 *
 * Event description: Any change in the gift card settings in the editor
 *
 * @param {editorChangeInGiftCardSettingsSrc125Evid32Params} params - The parameters for this event
 * @property {string} 'productid ' - Id of gift card template
 * @property {string} tab - main / settings / text /design
 * @property {string} section - type of change
 * @property {string} value - value changed
 * @return {LogObject<editorChangeInGiftCardSettingsSrc125Evid32Params>} LogObject<editorChangeInGiftCardSettingsSrc125Evid32Params>
 */
export function editorChangeInGiftCardSettingsSrc125Evid32(params) {
    return { evid: 32, src: 125, endpoint: '', params };
}
/**
 * A function to create a log object for the 'editorExitGiftCardSettingModalSrc125Evid55' event (evid: 55)
 *
 * Event description: When clicking x or clicking outside the modal.
 *
 * @param {editorExitGiftCardSettingModalSrc125Evid55Params} params - The parameters for this event
 * @property {string} productId - Id of gift card template
 * @property {string} value - Click x \ clicked outside
 * @return {LogObject<editorExitGiftCardSettingModalSrc125Evid55Params>} LogObject<editorExitGiftCardSettingModalSrc125Evid55Params>
 */
export function editorExitGiftCardSettingModalSrc125Evid55(params) {
    return { evid: 55, src: 125, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bulkViewsMigration' event (evid: 1)
 *
 * Event description: This event is being used for views migration as part of moving to Cairo list
 *
 * @param {bulkViewsMigrationParams} params - The parameters for this event
 * @property {string} numberOfViews - number_of_views
 * @property {string} hiddenViewsIds - hidden_views_ids
 * @property {boolean} isSuccess - did the migration succeeded?
 * @property {string} viewIds - view_ids
 * @return {LogObject<bulkViewsMigrationParams>} LogObject<bulkViewsMigrationParams>
 */
export function bulkViewsMigration(params) {
    return { evid: 1, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickToAddNewRateSrc130Evid10' event (evid: 10)
 *
 * Event description: When the user clicks on add rate. It can be as additional rate or from empty state (to add the first rate)
 *
 * @param {deliveryProfileClickToAddNewRateSrc130Evid10Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the action made
 * @property {string} deliveryRegionId - Delivery region id were  the action made.
 * @property {string} origin - empty state / header
 * @return {LogObject<deliveryProfileClickToAddNewRateSrc130Evid10Params>} LogObject<deliveryProfileClickToAddNewRateSrc130Evid10Params>
 */
export function deliveryProfileClickToAddNewRateSrc130Evid10(params) {
    return { evid: 10, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileActionOnSingleProfileWarningSrc130Evid100' event (evid: 100)
 *
 * Event description: When a user has an error in profiles - no profiles defined/no payment method etc the warning will show.
 *
 * @param {deliveryProfileActionOnSingleProfileWarningSrc130Evid100Params} params - The parameters for this event
 * @property {string} profileId - profile id
 * @property {string} action - close/learn more/ go back to default settings
 * @return {LogObject<deliveryProfileActionOnSingleProfileWarningSrc130Evid100Params>} LogObject<deliveryProfileActionOnSingleProfileWarningSrc130Evid100Params>
 */
export function deliveryProfileActionOnSingleProfileWarningSrc130Evid100(params) {
    return { evid: 100, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cartAbandonment' event (evid: 1001)
 *
 * Event description: This event sent one hour after a cart is created without placing the order of that cart
 *
 * @param {cartAbandonmentParams} params - The parameters for this event
 * @property {number} total_long - cart total on the moment of the abandoned multiply by 100000
 * @property {GUID} cartId - Use to be cart_id only. Ecom platform change - In buy now flow will send checkout_id (you can differentiate with the field "is_volatile_cart"
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {boolean} is_coupon - true if the cart with applied coupon when abandonment, false otherwise
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isVolatileCart - ECOM PLATFORM CAHNGE: if true the cart_id will send checkoutId if false it will send the cartId. From 03/05/23 this field is not relevant anymore because we are getting cart ID and checkout id
 * @property {boolean} is_contact - true if the event sent on a contact , false otherwise (visitor/member)
 * @property {boolean} is_member - true if the visitor signed to the site, false otherwise
 * @property {number} numOfItems - number of products in cart
 * @property {string} currency - cart currency
 * @property {GUID} ecomId - ecom_id
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<cartAbandonmentParams>} LogObject<cartAbandonmentParams>
 */
export function cartAbandonment(params) {
    return { evid: 1001, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cartRecovered' event (evid: 1002)
 *
 * Event description: When the cart become an order after it already defined as a cart abandonment
 *
 * @param {cartRecoveredParams} params - The parameters for this event
 * @property {number} total_long - cart total on the moment of recovery, multiply by 100000
 * @property {GUID} cartId - cartId
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isVolatileCart - ECOM PLATFORM CAHNGE: if true the cart_id will send checkoutId if false it will send the cartId
 * @property {boolean} is_contact - true if the event sent on a contact , false otherwise (visitor/member)
 * @property {boolean} is_member - true if the visitor signed to the site, false otherwise
 * @property {string} currency - currency of cart
 * @property {GUID} ecomId - ecom_id
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<cartRecoveredParams>} LogObject<cartRecoveredParams>
 */
export function cartRecovered(params) {
    return { evid: 1002, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickOnRemoveItemFromProfileSrc130Evid101' event (evid: 101)
 *
 * Event description: delete item from profile in catalog tab.
 * Currently this event is sent to stores catalog only
 *
 * @param {deliveryProfileClickOnRemoveItemFromProfileSrc130Evid101Params} params - The parameters for this event
 * @property {string} profileId - profile id
 * @property {string} itemsIds - items that had been removed
 * @return {LogObject<deliveryProfileClickOnRemoveItemFromProfileSrc130Evid101Params>} LogObject<deliveryProfileClickOnRemoveItemFromProfileSrc130Evid101Params>
 */
export function deliveryProfileClickOnRemoveItemFromProfileSrc130Evid101(params) {
    return { evid: 101, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileRemoveItemFromProfileModalIsOpenedSrc130Evid102' event (evid: 102)
 *
 * Event description: after clicking on delete items (evid 101) modal opens
 *
 * @param {deliveryProfileRemoveItemFromProfileModalIsOpenedSrc130Evid102Params} params - The parameters for this event
 * @property {string} profileId - profile id
 * @property {string} itemId - item id
 * @property {string} displayMode - is items chosen from single profile or multiple profiles
 * @return {LogObject<deliveryProfileRemoveItemFromProfileModalIsOpenedSrc130Evid102Params>} LogObject<deliveryProfileRemoveItemFromProfileModalIsOpenedSrc130Evid102Params>
 */
export function deliveryProfileRemoveItemFromProfileModalIsOpenedSrc130Evid102(params) {
    return { evid: 102, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileActionInRemoveItemFromProfileModalSrc130Evid103' event (evid: 103)
 *
 * Event description: after choosing the items and opening the modal.
 * can be close \delete profile\cancel
 *
 *
 * @param {deliveryProfileActionInRemoveItemFromProfileModalSrc130Evid103Params} params - The parameters for this event
 * @property {string} profileId - profile id
 * @property {string} itemsids - items that had been removed
 * @property {string} newProfileId - the new profile that the items were moved to
 * @property {string} action - close \delete profile\cancel
 * @property {string} displayMode - Single profile/ multiple profiles
 * @return {LogObject<deliveryProfileActionInRemoveItemFromProfileModalSrc130Evid103Params>} LogObject<deliveryProfileActionInRemoveItemFromProfileModalSrc130Evid103Params>
 */
export function deliveryProfileActionInRemoveItemFromProfileModalSrc130Evid103(params) {
    return { evid: 103, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileProfileErrorIsShownSrc130Evid104' event (evid: 104)
 *
 * Event description: any error is shown in the delivery profile page
 *
 * @param {deliveryProfileProfileErrorIsShownSrc130Evid104Params} params - The parameters for this event
 * @property {string} profileId - profile id
 * @property {string} ErrorType - name of the error
 * @return {LogObject<deliveryProfileProfileErrorIsShownSrc130Evid104Params>} LogObject<deliveryProfileProfileErrorIsShownSrc130Evid104Params>
 */
export function deliveryProfileProfileErrorIsShownSrc130Evid104(params) {
    return { evid: 104, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileProfileErrorHoverSrc130Evid105' event (evid: 105)
 *
 * Event description: when there's an error with an error symbol and the user hovers over it
 *
 * @param {deliveryProfileProfileErrorHoverSrc130Evid105Params} params - The parameters for this event
 * @property {string} profileId - profile id
 * @property {string} errorType - the error type
 * @return {LogObject<deliveryProfileProfileErrorHoverSrc130Evid105Params>} LogObject<deliveryProfileProfileErrorHoverSrc130Evid105Params>
 */
export function deliveryProfileProfileErrorHoverSrc130Evid105(params) {
    return { evid: 105, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'lineItemAddedToCart' event (evid: 1052)
 *
 * Event description: when an item is added to cart, should send only the data on the item that was added (not the full data on the cart). send an event per item. when cart is created (first line item added) this event won't be sent, only from the second line item that added
 *
 * @param {lineItemAddedToCartParams} params - The parameters for this event
 * @property {number} weight - INT, multiplied by 100 000
 * @property {number} quantity - INT, multiplied by 100 000
 * @property {string} sku - Stock-keeping unit.
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} deliveryProfileId - Delivery profile id that is related to the destenation configuration
 * @property {string} catalogAppId - The item's vertical
 * @property {number} totalPriceBeforeTax - same as 'total_price' field. ( no call to TotalsCalculator and we cant have tax).
 * @property {number} totalPriceAfterTax - INT, multiplied by 100 000. Total price after all discouts and tax.
 * @property {string} productNameTranslated - Translated product name
 * @property {boolean} shippable - Whether this line item is shippable.
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isCustomItem - True/False
 * @property {string} catalogItemId - ID of the item within it's Wix or 3rd-party catalog. For example: productId for Stores or eventId for Events.
 * @property {string} options - Additional info in key: value form. For example, {Size: M, Color: Red}
 * @property {string} weightUnit - Measure unit - defaults to site's weight unit. Supported values: UNSPECIFIED_WEIGHT_UNIT, KG, LB.
 * @property {number} depositAmount - Int multiplied by 100,000
 * @property {number} numOfLineItems - number of line items (# of products) in cart included the product just added
 * @property {string} itemType - Supported values: UNRECOGNISED, PHYSICAL, DIGITAL / Custom.
 * @property {GUID} contactId - CRM contact ID
 * @property {string} productName - Original product name (in site's default language)
 * @property {number} taxableAmount - INT, multiplied by 100 000. Taxable amount of this line item.
 * @property {number} numItems - total # of quantity (for all products) in cart after adding the product to cart
 * @property {GUID} appId - ID of the catalog app. For example: the Wix Stores appId, or the 3rd-party appId. Since March 2022 this field is not relevant (not accurate field name look at catalogAppId field)
 * @property {GUID} ecomId - ecom_id
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkout_id
 * @property {number} discountAmount - INT, multiplied by 100 000. only merchant_discount can be taken into account
 * @property {number} catalogItemPrice - INT, multiplied by 100 000. Price before tax and discounts.
 * @return {LogObject<lineItemAddedToCartParams>} LogObject<lineItemAddedToCartParams>
 */
export function lineItemAddedToCart(params) {
    return { evid: 1052, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'updateLineItemsQuantity' event (evid: 1053)
 *
 * Event description: Update Line Items Quantity. Note- we don't have the info regarding the coupon amount in cart (we will only know coupon id because there is no call to totals calculator
 *
 * @param {updateLineItemsQuantityParams} params - The parameters for this event
 * @property {number} weight - INT, multiplied by 100 000
 * @property {number} quantity - INT, multiplied by 100 000
 * @property {string} sku - Stock-keeping unit.
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} deliveryProfileId - Delivery profile id that is related to the destenation configuration
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {number} totalPriceBeforeTax - INT, multiplied by 100 000. Total price after all duscouts, before tax.
 * @property {number} taxRate - INT, multiplied by 100 000. Tax rate percentage, as a decimal numeral between 0 and 1 multipled.
 * @property {number} totalPriceAfterTax - INT, multiplied by 100 000. Total price after all discouts and tax.
 * @property {string} productNameTranslated - Translated product name
 * @property {boolean} shippable - Whether this line item is shippable.
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isCustomItem - True/false
 * @property {string} catalogItemId - ID of the item within it's Wix or 3rd-party catalog. For example: productId for Stores or eventId for Events.
 * @property {string} options - Additional info in key: value form. For example, {Size: M, Color: Red}
 * @property {string} weightUnit - Measure unit - defaults to site's weight unit. Supported values: UNSPECIFIED_WEIGHT_UNIT, KG, LB.
 * @property {string} itemType - Supported values: UNRECOGNISED, PHYSICAL, DIGITAL / Custom.
 * @property {GUID} contactId - CRM contact ID
 * @property {string} productName - Original product name (in site's default language)
 * @property {GUID} appId - ID of the catalog app. For example: the Wix Stores appId, or the 3rd-party appId. Since March 2022 this field is not relevant (not accurate field name look at catalogAppId field)
 * @property {GUID} ecomId - ecom_id
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkout_id
 * @property {number} discountAmount - INT, multiplied by 100 000.It will be merchant's discount amount
 * @property {number} catalogItemPrice - INT, multiplied by 100 000. Price before tax and discounts.
 * @return {LogObject<updateLineItemsQuantityParams>} LogObject<updateLineItemsQuantityParams>
 */
export function updateLineItemsQuantity(params) {
    return { evid: 1053, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'removeLineItem' event (evid: 1054)
 *
 * Event description: Remove Line Items From Cart
 *
 * @param {removeLineItemParams} params - The parameters for this event
 * @property {number} weight - weight
 * @property {number} quantity - INT, multiplied by 100 000
 * @property {string} sku - Stock-keeping unit.
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {number} totalPriceBeforeTax - discounted_price_before_tax
 * @property {number} totalPriceAfterTax - INT, multiplied by 100 000. Total price after all discouts and tax.
 * @property {string} productNameTranslated - Translated product name
 * @property {boolean} shippable - Whether this line item is shippable.
 * @property {string} user_agent - user_agent
 * @property {GUID} appDefId - app_def_id
 * @property {boolean} isCustomItem - is_custom_item
 * @property {string} catalogItemId - ID of the item within it's Wix or 3rd-party catalog. For example: productId for Stores or eventId for Events.
 * @property {string} options - options
 * @property {string} weightUnit - Measure unit - defaults to site's weight unit. Supported values: UNSPECIFIED_WEIGHT_UNIT, KG, LB.
 * @property {string} itemType - item_type
 * @property {GUID} contactId - CRM contact ID
 * @property {string} productName - Original product name (in site's default language)
 * @property {number} taxableAmount - INT, multiplied by 100 000. Taxable amount of this line item.
 * @property {GUID} appId - ID of the catalog app. For example: the Wix Stores appId, or the 3rd-party appId. Since March 2022 this field is not relevant (not accurate field name look at catalogAppId field)
 * @property {GUID} ecomId - ecom_id
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkout_id
 * @property {number} discountAmount - INT, multiplied by 100 000
 * @property {number} catalogItemPrice - INT, multiplied by 100 000. Price before tax and discounts.
 * @return {LogObject<removeLineItemParams>} LogObject<removeLineItemParams>
 */
export function removeLineItem(params) {
    return { evid: 1054, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxTaxRuleCreated' event (evid: 1056)
 *
 * Event description: When a tax rule is created in the SM. booking manual group id is 3e28fe9d-a19a-4926-9cb9-6124fcbbb3fd
 *
 * @param {taxTaxRuleCreatedParams} params - The parameters for this event
 * @property {GUID} calculatorId - The calculator id of this specific country. When it manual - send null.
 * @property {boolean} calcTaxAfterShipping - true or false
 * @property {string} flowType - avalaraAuto/avalaraManual/manual
 * @property {boolean} isTaxIncludingInPrice - True/False
 * @property {GUID} uuid - uuid
 * @property {number} taxRate - INT, multiplied by 100 000.
 * @property {string} taxState - the state in the rule (if there is no state send NULL)
 * @property {string} user_agent - user_agent
 * @property {string} manualRatesPerGroup - a json object where the key is the group_id and the value is the rate.
 * @property {string} appDefId - app_def_id
 * @property {string} taxCountry - the country of the rule
 * @property {boolean} taxOnDigital - if there is tax on digital send TRUE otherwise FALSE
 * @property {string} identityType - identity_type
 * @property {GUID} taxId - tax_rule_id
 * @return {LogObject<taxTaxRuleCreatedParams>} LogObject<taxTaxRuleCreatedParams>
 */
export function taxTaxRuleCreated(params) {
    return { evid: 1056, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxTaxRuleDeleted' event (evid: 1058)
 *
 * Event description: When a tax rule is deleted in the setting
 *
 * @param {taxTaxRuleDeletedParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} taxState - the state in the rule (if there is no state send NULL) -
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} taxCountry - the country of the rule
 * @property {string} identityType - identity_type
 * @property {GUID} taxId - tax_rule_id
 * @return {LogObject<taxTaxRuleDeletedParams>} LogObject<taxTaxRuleDeletedParams>
 */
export function taxTaxRuleDeleted(params) {
    return { evid: 1058, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileSharedConfigurationModalIsPresentedSrc130Evid106' event (evid: 106)
 *
 * Event description: When presenting "choose from existing sections".
 *
 * @param {deliveryProfileSharedConfigurationModalIsPresentedSrc130Evid106Params} params - The parameters for this event
 * @property {string} profileId - profile id
 * @property {string} deliveryRegionId - Delivery region id
 * @property {string} carrierId - Carrier id that the modal was opened to
 * @property {number} numberOfExistingCarriers - No. of existing carriers presented on the screen
 * @property {string} origin - From where the modal was opened: edit/add new method
 * @property {string} carrierName - existing pickup/existing local  delivery
 * @return {LogObject<deliveryProfileSharedConfigurationModalIsPresentedSrc130Evid106Params>} LogObject<deliveryProfileSharedConfigurationModalIsPresentedSrc130Evid106Params>
 */
export function deliveryProfileSharedConfigurationModalIsPresentedSrc130Evid106(params) {
    return { evid: 106, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxAvalaraOnboardingStageFinished' event (evid: 1062)
 *
 * Event description: When user finished Avalara onboarding and the account is created
 *
 * @param {taxAvalaraOnboardingStageFinishedParams} params - The parameters for this event
 * @property {string} account_id - account_id in Avalara
 * @property {number} duration - duration
 * @property {string} stage - stage
 * @property {GUID} uuid - uuid
 * @property {string} taxState - state of user's address
 * @property {string} accountId - account_id in Avalara
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} taxCountry - country of user's address
 * @property {string} identityType - identity_type
 * @property {number} companyId - company_id in Avalara
 * @return {LogObject<taxAvalaraOnboardingStageFinishedParams>} LogObject<taxAvalaraOnboardingStageFinishedParams>
 */
export function taxAvalaraOnboardingStageFinished(params) {
    return { evid: 1062, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxFlowTypeForTaxCalculationSwitchedToManual' event (evid: 1063)
 *
 * Event description: Tax -> Flow type for tax calculation switched to manual.
 *
 * @param {taxFlowTypeForTaxCalculationSwitchedToManualParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} taxState - The specific state that is switched to avalara. In case the switch is made from the list case - null. In case the switch is made to the whole country = &
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} taxCountry - The specific country that is switched to avalara. In case the switch is made from the list case - null.
 * @property {GUID} previousCalculator - The app id of the previous calculator
 * @property {string} identityType - identity_type
 * @property {GUID} taxId - Tax rule id
 * @return {LogObject<taxFlowTypeForTaxCalculationSwitchedToManualParams>} LogObject<taxFlowTypeForTaxCalculationSwitchedToManualParams>
 */
export function taxFlowTypeForTaxCalculationSwitchedToManual(params) {
    return { evid: 1063, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxFlowTypeForTaxCalculationSwitchedToCalculator' event (evid: 1064)
 *
 * Event description: when user clicks on "Switch to Automated tax" or if in popup for existing users he clicks on "get Automated tax" tax rules that were saved manual should be recalculated with Avalara . Rules that we do not have in Avalara account but have in wix - are added to avalara and rules that were deleted in wix but still exist in Avalara - are deleted from avalara during Sync with Avalara/onboarding, only after it the flow type switches
 *
 * @param {taxFlowTypeForTaxCalculationSwitchedToCalculatorParams} params - The parameters for this event
 * @property {string} addRegionList - json of countries and states added to Avalara on sync
 * @property {GUID} uuid - uuid
 * @property {string} calculatorName - The name of the calculator
 * @property {GUID} storeId - store_id
 * @property {string} deleteRegionList - json of countries and states deleted from Avalara on sync
 * @property {string} taxState - The specific state or region that is switched to avalara. In case the switch is made from the list case - null. In case the switch is made to the whole country = *
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} taxCountry - The specific country that is switched to avalara. In case the switch is made from the list case - null.
 * @property {string} type - type
 * @property {string} identityType - identity_type
 * @property {GUID} taxId - tax rule id
 * @return {LogObject<taxFlowTypeForTaxCalculationSwitchedToCalculatorParams>} LogObject<taxFlowTypeForTaxCalculationSwitchedToCalculatorParams>
 */
export function taxFlowTypeForTaxCalculationSwitchedToCalculator(params) {
    return { evid: 1064, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxAvalaraError' event (evid: 1065)
 *
 * Event description: obtained avalara error when user goes through Avalara onboarding /tried to add tax rule/ tried to delete tax rule/ tried to switch to avalara flow / error in estimating tax amount in cart
 *
 * @param {taxAvalaraErrorParams} params - The parameters for this event
 * @property {string} errorMessage - error message from Avalara
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} errorType - error_type
 * @property {string} estimateRequestId - estimate_request_id
 * @property {string} origin - submit new account / add_tax rule mapping / delete tax rule mapping/estimate tax rate
 * @property {string} operationName - operation_name
 * @property {string} identityType - identity_type
 * @return {LogObject<taxAvalaraErrorParams>} LogObject<taxAvalaraErrorParams>
 */
export function taxAvalaraError(params) {
    return { evid: 1065, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileActionOnSharedConfigurationModalSrc130Evid107' event (evid: 107)
 *
 * Event description: When making any action "choose from existing sections" - create new, cancel, done, "x".
 *
 * @param {deliveryProfileActionOnSharedConfigurationModalSrc130Evid107Params} params - The parameters for this event
 * @property {string} profileId - profile id
 * @property {string} deliveryRegionId - Delivery region id
 * @property {string} carrierId - Carrier id that the modal was opened to
 * @property {number} numberOfExistingCarriers - No. of existing carriers presented on the screen
 * @property {string} origin - From where the modal was opened: edit/add new method
 * @property {string} action - Action in modal:  close/ save/create new/exit
 * @property {string} SharedCarrierChosenId - Ids of the methods were chosen, if more than separated by commas (if chosen from existing carrier) If null - isn’t chosen from existing
 * @property {string} carrierName - existing pickup/existing local delivery
 * @return {LogObject<deliveryProfileActionOnSharedConfigurationModalSrc130Evid107Params>} LogObject<deliveryProfileActionOnSharedConfigurationModalSrc130Evid107Params>
 */
export function deliveryProfileActionOnSharedConfigurationModalSrc130Evid107(params) {
    return { evid: 107, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxRefundCommitToAvalara' event (evid: 1073)
 *
 * Event description: Commit to Avalara of refund made by user that has Avalara. we do check if original order was commited to Avalara, in this case we will not succeed to commit
 *
 * @param {taxRefundCommitToAvalaraParams} params - The parameters for this event
 * @property {GUID} clientRefundId - unique id of refund, to join to 130:1166
 * @property {string} taxRefundId - unique identifier of commit
 * @property {string} orderId - order_id
 * @property {GUID} uuid - uuid
 * @property {number} taxCommittedLong - INT (multiplied by 100000), tax of original order commited to Avalara for specific line items (send only in case of partial refund for specific line items)
 * @property {string} errorReason - in case when is_success = false - what was the reason
 * @property {boolean} isSuccess - true if refund commit didn't fail
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {number} taxLong - INT (multiplied by 100000), tax of refund commited to Avalara
 * @property {boolean} withShipping - true if shipping is also refunded
 * @property {string} currency - currency
 * @property {string} identityType - identity_type
 * @property {boolean} withLineItems - true - refund is on line items , false - an arbitrary amount (aka custom refund)
 * @property {string} refundType - full/partial
 * @return {LogObject<taxRefundCommitToAvalaraParams>} LogObject<taxRefundCommitToAvalaraParams>
 */
export function taxRefundCommitToAvalara(params) {
    return { evid: 1073, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxTaxRuleUpdated' event (evid: 1080)
 *
 * Event description: When a tax rule is updated in the BM
 *
 * @param {taxTaxRuleUpdatedParams} params - The parameters for this event
 * @property {GUID} calculatorId - The calculator id of this specific country. When it manual - send null.
 * @property {boolean} calcTaxAfterShipping - calc_tax_after_shipping
 * @property {boolean} isTaxIncludingInPrice - True/False
 * @property {GUID} uuid - uuid
 * @property {number} taxRate - INT, multiplied by 100 000.
 * @property {string} taxState - tax_state
 * @property {string} user_agent - user_agent
 * @property {string} manualRatesPerGroup - a json object where the key is the group_id and the value is the rate.
 * @property {string} appDefId - app_def_id
 * @property {string} taxCountry - tax_country
 * @property {boolean} taxOnDigital - if there is tax on digital send TRUE otherwise FALSE
 * @property {string} identityType - identity_type
 * @property {GUID} taxId - tax_rule_id
 * @return {LogObject<taxTaxRuleUpdatedParams>} LogObject<taxTaxRuleUpdatedParams>
 */
export function taxTaxRuleUpdated(params) {
    return { evid: 1080, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfilePartialDaysShowingInDeliverySlotsSrc130Evid109' event (evid: 109)
 *
 * Event description: some TPAs can have a delivery slot with partial days showing while we don't support it.
 * this is an event that indicates that this modal is showing
 *
 * @param {deliveryProfilePartialDaysShowingInDeliverySlotsSrc130Evid109Params} params - The parameters for this event
 * @property {string} profileId -  Under which profile id the rate is created
 * @property {string} deliveryRegionId - deliveryRegionId
 * @return {LogObject<deliveryProfilePartialDaysShowingInDeliverySlotsSrc130Evid109Params>} LogObject<deliveryProfilePartialDaysShowingInDeliverySlotsSrc130Evid109Params>
 */
export function deliveryProfilePartialDaysShowingInDeliverySlotsSrc130Evid109(params) {
    return { evid: 109, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cartCreated' event (evid: 1101)
 *
 * Event description: Sent when a new cart is created
 *
 * @param {cartCreatedParams} params - The parameters for this event
 * @property {number} priceSummaryTotalAmount - INT, multiplied by 100 000
 * @property {number} numberOfDiscounts - number of all discounts in the cart
 * @property {string} numLineItemsPerCatalog - Json - number of line items per catalog - example: {“stores”: 3, “bookings”: 4}
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} itemsQuantityPerCatalog - Json - sum of total items quantity per catalog - example: {“stores”: 9, “bookings”: 7}
 * @property {boolean} taxIncludedInPrices - Is tax included in the line items' prices
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isCustomItem - True/False
 * @property {string} itemType - List of item types: Supported values: UNRECOGNISED, PHYSICAL, DIGITAL / Custom/gift card/service. Will be a list longer than one In case the cart is created with more then one item (velo, bundle)
 * @property {string} merchantDiscountType - list of applied merchant discount types e.g. GLOBAL, SPECIFIC_ITEMS, SHIPPING
 * @property {number} numLineItems - total number of line items
 * @property {string} currency - currency
 * @property {string} distinctNumItemsPerCatalog - Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}
 * @property {number} itemsQuantity - sum of total items quantity
 * @property {GUID} ecomId - ecom_id
 * @property {string} identityType - identity_type
 * @property {string} pricePerCatalog - Json - sum of gpv in usd per catalog - example: {“stores”: 9.00, “bookings”: 7.49}
 * @property {string} buyerLanguage - language selected by buyer in which translated values shown
 * @property {number} distinctNumItems - count distinct item_id
 * @property {number} numberOfCoupons - number of coupons in the cart
 * @return {LogObject<cartCreatedParams>} LogObject<cartCreatedParams>
 */
export function cartCreated(params) {
    return { evid: 1101, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cartUpdated' event (evid: 1102)
 *
 * Event description: for wix stores cart- When the uou update buyer note or set coupon on cart. Note- we don't have the info regarding the coupon amount in cart (we will only know coupon id because there is no call to totals calculator
 *
 * @param {cartUpdatedParams} params - The parameters for this event
 * @property {number} priceSummaryTotalAmount - INT, multiplied by 100 000
 * @property {number} numberOfDiscounts - number of coupons in the order + number of discounts in the order
 * @property {string} numLineItemsPerCatalog - Json - number of line items per catalog - example: {“stores”: 3, “bookings”: 4}
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {number} distinctNumCustomItems - distinct_num_custom_items
 * @property {string} itemsQuantityPerCatalog - items_quantity_per_catalog
 * @property {boolean} taxIncludedInPrices - Is tax included in the line items' prices
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} updated - updated_fields
 * @property {string} buyerNote - buyer_note
 * @property {string} merchantDiscountType - list of applied merchant discount types e.g. GLOBAL, SPECIFIC_ITEMS, SHIPPING
 * @property {GUID} contactId - CRM contact ID
 * @property {number} numLineItems - total number of line items
 * @property {string} currency - currency
 * @property {string} distinctNumItemsPerCatalog - Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}
 * @property {number} itemsQuantity - items_quantity
 * @property {GUID} ecomId - ecom_id
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkout_id, can be NULL
 * @property {string} pricePerCatalog - price_per_catalog
 * @property {string} buyerLanguage - language selected by buyer in which translated values shown
 * @property {number} distinctNumItems - count distinct item_id
 * @property {number} discountAmount - INT, multiplied by 100 000. It will be merchant's discount amount
 * @property {number} numberOfCoupons - number of coupons in the order
 * @return {LogObject<cartUpdatedParams>} LogObject<cartUpdatedParams>
 */
export function cartUpdated(params) {
    return { evid: 1102, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cartDeleted' event (evid: 1103)
 *
 * Event description: When a cart has been deleted due to -
 * 1. checkout completed
 * 2. we might define that carts are being deleted after a while (e.g. one month).
 * Since March 18th: Cart Deleted (1103) will be sent only when DeleteCart API is called explicitly.
 * When a Checkout is completed, as a side effect, we delete the carts associated with the visitor / member that has completed the checkout, but in this case 1103 will not be sent
 *
 * @param {cartDeletedParams} params - The parameters for this event
 * @property {GUID} cartId - cart_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} identityType - identity_type
 * @return {LogObject<cartDeletedParams>} LogObject<cartDeletedParams>
 */
export function cartDeleted(params) {
    return { evid: 1103, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cartEstimatedTotals' event (evid: 1104)
 *
 * Event description: Cart Estimated Totals.
 *
 * @param {cartEstimatedTotalsParams} params - The parameters for this event
 * @property {number} priceSummaryTotalAmount - INT, multiplied by 100 000
 * @property {number} numberOfDiscounts - number_of_discounts
 * @property {string} numLineItemsPerCatalog - num_line_items_per_catalog
 * @property {GUID} giftCardId - gift_card_id
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} selectedCarrierCode - Unique code of selected shipping option like usps_std_overnight
 * @property {number} numShippingOptions - number of shipping choices presented to the buyer
 * @property {string} autoTaxFallbackError - json with all error details - example: {errorCode: code, errorDescroption: descroption}
 * @property {string} carrierServiceOptions - Json - example: {carrierId: id, carrierCode: code, carrierTitle: title}
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} manualTaxRateReason - Supported values: GLOBAL_SETTING_TO_MANUAL, REGION_SETTING_TO_MANUAL. reason for the manual calculation being used
 * @property {boolean} selectedCarrierRequestedShippingOption - selected_carrier_requested_shipping_option
 * @property {string} selectedCarrierTitle - Title of the option, such as USPS Standard Overnight Delivery (in the requested locale) e.g Standard or First-Class Package International (in legacy its called option title)
 * @property {string} itemsQuantityPerCatalog - Json - sum of total items quantity per catalog - example: {stores: 9, bookings: 7}
 * @property {boolean} taxIncludedInPrices - Is tax included in the line items prices
 * @property {string} shippingCountry - buyer country code by the shipping details
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - appDefId
 * @property {number} taxAmount - INT!! multiply by 100000
 * @property {string} taxRateType - Supported values: NO_TAX_COLLECTED, MANUAL_RATE, AUTO_RATE, FALLBACK_RATE.
 * @property {string} autoTaxFallbackReason - Supported values: AUTO_TAX_FAILED, AUTO_TAX_DEACTIVATED. reason for fallback. When Avalara is not connected the value is AUTO_TAX_FAILED
 * @property {number} discountRulesAmount - INT, multiplied by 100 000 the amount of discount by discount rules in the order.
 * @property {GUID} giftCardAppId - App def id of the GiftCard provider
 * @property {number} numberOfDiscountRules - number of discount rules in the order
 * @property {number} selectedCarrierShippingPrice - shipping price
 * @property {number} giftCardAmount - INT, multiplied by 100 000
 * @property {string} merchantDiscountType - list of applied merchant discount types e.g. GLOBAL, SPECIFIC_ITEMS, SHIPPING
 * @property {GUID} contactId - contact_id
 * @property {number} numLineItems - total number of line items
 * @property {string} calculationErrorsType - list of calculation errors types e.g. tax, coupon. gift card, etc.
 * @property {number} couponsAmount - INT, multiplied by 100 000. the amount of discount by coupons in the order.
 * @property {string} currency - checkout currency
 * @property {number} selectedCarrierOtherChargesPrice - other charges price
 * @property {string} distinctNumItemsPerCatalog - Json - sum of total count distinct item_id per catalog - example: {stores: 2, bookings: 3}
 * @property {number} itemsQuantity - sum of total items quantity
 * @property {string} selectedCarrierDeliveryTime - When the item is expected to be delivered in free text, e.g 3-5 business days
 * @property {string} selectedCarrierOtherChargesType - Supported values: HANDLING_FEE, INSURANCE. The reason for the additional cost
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart/order
 * @property {string} selectedCarrierInstructions - Instructions for caller, e.g for pickup: Ensure to come during Opening Hours, and please dont park in disabled-spot
 * @property {string} selectedCarrierId - This carriers unique ID
 * @property {GUID} ecomId - ecom_id
 * @property {string} selectedCarrierPickupDetails - selected_carrier_pickup_country
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart/order
 * @property {string} regionId - unique identifier of the shipping region
 * @property {string} identityType - identityType
 * @property {GUID} checkoutId - checkout_id, can be NULL
 * @property {string} regionName - shipping region name
 * @property {string} pricePerCatalog - Json - sum of gpv in usd per catalog - example: {stores: 9.00, bookings: 7.49}
 * @property {string} buyerLanguage - language selected by buyer in which translated values shown
 * @property {string} selectedCarrierOtherChargesDetails - selected_carrier_other_charges_details
 * @property {number} distinctNumItems - count distinct item_id
 * @property {string} shippingCity - buyer city by the shipping details
 * @property {number} discountAmount - INT, multiplied by 100 000
 * @property {number} numberOfCoupons - number of coupons in the order
 * @property {string} shippingOptionSelected - array of carrier_id and shipping options that were selected by the UoU
 *
 * @property {string} ShippingOptionsPresented - array of carrier_id and shipping options that were presented to the UoU
 *
 * @return {LogObject<cartEstimatedTotalsParams>} LogObject<cartEstimatedTotalsParams>
 */
export function cartEstimatedTotals(params) {
    return { evid: 1104, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickToAddCoupon' event (evid: 111)
 *
 * Event description: user clicks on "add code"/"insert promo code" (first step of applying coupon) . since june 2019 also sent from OA StoreFront (member view)
 *
 * @param {clickToAddCouponParams} params - The parameters for this event
 * @property {string} mobilePosition - Top/Bottom. Null if not mobile device. The place in the checkout on mobile device (not Wix app) where the uou did the action. There are 2 option - on the top of the checkout or on the bottom of the checkout.
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} owner_id - uuid of site owner
 * @property {boolean} isMember - true if visitor is member
 * @property {string} origin - shopping cart / checkout
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<clickToAddCouponParams>} LogObject<clickToAddCouponParams>
 */
export function clickToAddCoupon(params) {
    return { evid: 111, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileSiteAddedToPopulationForRoSrc130Evid1111' event (evid: 1111)
 *
 * Event description: When a site was added to the population (used for RO)
 *
 * @param {deliveryProfileSiteAddedToPopulationForRoSrc130Evid1111Params} params - The parameters for this event
 * @property {GUID} meta_site_id - msid
 * @return {LogObject<deliveryProfileSiteAddedToPopulationForRoSrc130Evid1111Params>} LogObject<deliveryProfileSiteAddedToPopulationForRoSrc130Evid1111Params>
 */
export function deliveryProfileSiteAddedToPopulationForRoSrc130Evid1111(params) {
    return { evid: 1111, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'siteWasMigratedToAnotherServiceGenericBiSrc130Evid1112' event (evid: 1112)
 *
 * Event description: Generic BI event for Migrations for the data engineers usage.
 * One of the ways to handle backfill of domain events is to keep a list of migrated sites. For that we can use this bi
 *
 * @param {siteWasMigratedToAnotherServiceGenericBiSrc130Evid1112Params} params - The parameters for this event
 * @property {string} newService - new service that the site was migrated to
 * @property {string} oldService - old service that the site was migrated from
 * @return {LogObject<siteWasMigratedToAnotherServiceGenericBiSrc130Evid1112Params>} LogObject<siteWasMigratedToAnotherServiceGenericBiSrc130Evid1112Params>
 */
export function siteWasMigratedToAnotherServiceGenericBiSrc130Evid1112(params) {
    return { evid: 1112, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'serverErrorsInCheckout' event (evid: 1117)
 *
 * Event description: Triggers on server errors in checkout
 * right now sent only when the transaction currency selected in checkout is not supported in multi currency
 * (this event is waiting for migration from src 10)
 *
 * @param {serverErrorsInCheckoutParams} params - The parameters for this event
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cartId
 * @property {string} customFields - Json containing additional error info
 * @property {string} errorReason - the error that triggers the event
 * @property {string} user_agent - user_agent
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkoutId
 * @return {LogObject<serverErrorsInCheckoutParams>} LogObject<serverErrorsInCheckoutParams>
 */
export function serverErrorsInCheckout(params) {
    return { evid: 1117, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickApplyCoupon' event (evid: 112)
 *
 * Event description: after entering promo code click on Apply. since june 2019 can be sent also from OA StoreFront
 *
 * @param {clickApplyCouponParams} params - The parameters for this event
 * @property {string} mobilePosition - Top/Bottom. Null if not mobile device. The place in the checkout on mobile device (not Wix app) where the uou did the action. There are 2 option - on the top of the checkout or on the bottom of the checkout.
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} couponCode - coupon_code
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} owner_id - uuid of site owner
 * @property {boolean} isMember - true if visitor is member
 * @property {string} origin - shopping cart / checkout
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart/order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart/order
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<clickApplyCouponParams>} LogObject<clickApplyCouponParams>
 */
export function clickApplyCoupon(params) {
    return { evid: 112, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'discountAppliedInCart' event (evid: 1120)
 *
 * Event description: Discount applied in Cart.
 *
 * @param {discountAppliedInCartParams} params - The parameters for this event
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} discountType - "GLOBAL" for merchant and None for Coupon
 * @property {string} couponCode - Coupon Code
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} couponName - Coupon Name/ *discount rule0 name (since March 22)
 * @property {GUID} contactId - CRM contact ID
 * @property {string} discountSource - "coupon" or "merchant discount" or *discount rule (since March 22)
 * @property {string} currency - the cart currency
 * @property {GUID} ecomId - ecom_id
 * @property {string} identityType - identity_type
 * @property {GUID} couponId - Coupon id
 * @property {GUID} checkoutId - checkout_id, can be NULL
 * @return {LogObject<discountAppliedInCartParams>} LogObject<discountAppliedInCartParams>
 */
export function discountAppliedInCart(params) {
    return { evid: 1120, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'discountRemovedFromCart' event (evid: 1121)
 *
 * Event description: when coupon/merchant discount is removed from the cart
 *
 * @param {discountRemovedFromCartParams} params - The parameters for this event
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} discountType - Discount type.  ""GLOBAL"" - discount applies to entire order. ""SPECIFIC-ITEMS"" - discount applies to specific items. ""SHIPPING"" - discount applies to shipping. For example, free shipping.
 * @property {string} couponCode - Coupon Code
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} couponName - Coupon Name / *discount rule name (since March 22)
 * @property {GUID} contactId - CRM contact ID
 * @property {string} discountSource - "coupon" or "merchant discount" or *discount rule (since March 22)
 * @property {string} currency - the cart currency
 * @property {GUID} ecomId - ecom_id
 * @property {string} identityType - identity_type
 * @property {GUID} couponId - Coupon id / *discount rule Id (since March 22)
 * @property {GUID} checkoutId - checkout_id, can be NULL
 * @return {LogObject<discountRemovedFromCartParams>} LogObject<discountRemovedFromCartParams>
 */
export function discountRemovedFromCart(params) {
    return { evid: 1121, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'discountAppliedInCheckout' event (evid: 1122)
 *
 * Event description: when coupon/merchant discount/ discount rule (since March 22)  is applied in the checkout
 *
 * @param {discountAppliedInCheckoutParams} params - The parameters for this event
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} discountType - Discount type.  ""GLOBAL"" - discount applies to entire order. ""SPECIFIC-ITEMS"" - discount applies to specific items. ""SHIPPING"" - discount applies to shipping. For example, free shipping.
 * @property {string} couponCode - Coupon Code
 * @property {string} user_agent - user_agent
 * @property {GUID} appDefId - app_def_id
 * @property {number} amount - INT, multiplied by 100 000. the discount amount.
 * @property {string} couponName - Coupon Name, discount rule name is sent here as well since March 22
 * @property {number} numberOfItems - number Of Items
 * @property {GUID} contactId - CRM contact ID
 * @property {string} discountSource - "coupon" or "merchant discount" or ''discount rules" (DR added on march 22)
 * @property {number} numLineItems - Number of line items discount applied to.
 * @property {string} currency - the cart currency
 * @property {GUID} ecomId - ecom_id
 * @property {string} identityType - identity_type
 * @property {string} couponId - Coupon id, discount rule Id is sent here as well since March 22
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<discountAppliedInCheckoutParams>} LogObject<discountAppliedInCheckoutParams>
 */
export function discountAppliedInCheckout(params) {
    return { evid: 1122, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'discountRemovedFromCheckout' event (evid: 1123)
 *
 * Event description: when coupon/merchant discount/ discount rule (since March 22) is removed from Checkout
 *
 * @param {discountRemovedFromCheckoutParams} params - The parameters for this event
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} discountType - Discount type.  ""GLOBAL"" - discount applies to entire order. ""SPECIFIC-ITEMS"" - discount applies to specific items. ""SHIPPING"" - discount applies to shipping. For example, free shipping.
 * @property {string} couponCode - Coupon Code
 * @property {string} user_agent - user_agent
 * @property {GUID} appDefId - app_def_id
 * @property {number} amount - INT, multiplied by 100 000. the discount amount.
 * @property {string} couponName - Coupon Name/ *discount rule name (since March 22)
 * @property {number} numberOfItems - number Of Items
 * @property {GUID} contactId - CRM contact ID
 * @property {string} discountSource - "coupon" or "merchant discount" or *discount rule (since March 22)
 * @property {number} numLineItems - Number of line items discount applied to.
 * @property {string} currency - the cart currency
 * @property {GUID} ecomId - ecom_id
 * @property {string} identityType - identity_type
 * @property {GUID} couponId - Coupon id, *discount rule Id (since March 22)
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<discountRemovedFromCheckoutParams>} LogObject<discountRemovedFromCheckoutParams>
 */
export function discountRemovedFromCheckout(params) {
    return { evid: 1123, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'giftCardAppliedInCheckout' event (evid: 1124)
 *
 * Event description: when a Gift Card is applied in Checkout
 *
 * @param {giftCardAppliedInCheckoutParams} params - The parameters for this event
 * @property {GUID} giftCardId - gift_card_id
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} discountType - Discount type.  ""GLOBAL"" - discount applies to entire order. ""SPECIFIC-ITEMS"" - discount applies to specific items. ""SHIPPING"" - discount applies to shipping. For example, free shipping.
 * @property {string} user_agent - user_agent
 * @property {GUID} appDefId - app_def_id
 * @property {GUID} giftCardAppId - App def id of the GiftCard provider
 * @property {number} giftCardAmount - INT, multiplied by 100 000
 * @property {GUID} contactId - CRM contact ID
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<giftCardAppliedInCheckoutParams>} LogObject<giftCardAppliedInCheckoutParams>
 */
export function giftCardAppliedInCheckout(params) {
    return { evid: 1124, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'giftCardRemovedFromCheckout' event (evid: 1125)
 *
 * Event description: when a Gift Card is removed from Checkout
 *
 * @param {giftCardRemovedFromCheckoutParams} params - The parameters for this event
 * @property {GUID} giftCardId - gift_card_id
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} discountType - Discount type.  ""GLOBAL"" - discount applies to entire order. ""SPECIFIC-ITEMS"" - discount applies to specific items. ""SHIPPING"" - discount applies to shipping. For example, free shipping.
 * @property {string} user_agent - user_agent
 * @property {GUID} appDefId - app_def_id
 * @property {GUID} giftCardAppId - App def id of the GiftCard provider
 * @property {number} giftCardAmount - INT, multiplied by 100 000
 * @property {GUID} contactId - CRM contact ID
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart/order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart/order
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<giftCardRemovedFromCheckoutParams>} LogObject<giftCardRemovedFromCheckoutParams>
 */
export function giftCardRemovedFromCheckout(params) {
    return { evid: 1125, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickOnCheckoutWithEWallet' event (evid: 113)
 *
 * Event description: buyer clicks on checkout with e-wallwt in cart page
 *
 * @param {clickOnCheckoutWithEWalletParams} params - The parameters for this event
 * @property {string} orig_shipping_method - current shipping method in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
 * @property {GUID} cartId - cart_id
 * @property {number} itemsCount - Numbers of items in cart
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
 * @property {string} productsList - json containing all product guids for products in the cart
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected (and displaying in cart)
 * @property {string} paymet_providers - array of payment providers connected to the store
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor
 * @property {string} origin - origin
 * @property {string} shippingMethodType - shipping /store pickup / none
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
 * @property {string} type - button / tooltip / banner
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
 * @property {GUID} checkoutId - checkout_id
 * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
 * @property {string} purchaseFlowId - purchase flow id
 * @return {LogObject<clickOnCheckoutWithEWalletParams>} LogObject<clickOnCheckoutWithEWalletParams>
 */
export function clickOnCheckoutWithEWallet(params) {
    return { evid: 113, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'createCheckoutFromCart' event (evid: 1135)
 *
 * Event description: When the user clicks on 'checkout' button in this cart page for the first time
 *
 * @param {createCheckoutFromCartParams} params - The parameters for this event
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} channelType - TYPE_UNSPECIFIED, WEB, POS, EBAY, AMAZON, OTHER_PLATFORM, WIX_APP_STORE, WIX_INVOICES
 * @property {string} user_agent - user_agent
 * @property {GUID} appDefId - app_def_id
 * @property {GUID} contactId - CRM contact ID
 * @property {GUID} ecomId - ecom_id
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<createCheckoutFromCartParams>} LogObject<createCheckoutFromCartParams>
 */
export function createCheckoutFromCart(params) {
    return { evid: 1135, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutCreated' event (evid: 1136)
 *
 * Event description: Sent when a checkout is created
 *
 * @param {checkoutCreatedParams} params - The parameters for this event
 * @property {number} priceSummaryTotalAmount - grand_total_long, multiplied by 100 000 and rounded to int
 * @property {number} numberOfDiscounts - number of all discounts in the checkout
 * @property {string} numLineItemsPerCatalog - Json - number of line items per catalog - example: {“stores”: 3, “bookings”: 4}
 * @property {string} giftCardId - gift_card_id
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - if null-> buy now flow. If not null-> checkout created from cart (field added in 29.8.22)
 * @property {number} numShippingOptions - number of shipping choices presented to the buyer
 * @property {string} catalogAppId - list of all catalog app ids
 * @property {string} channelType - TYPE_UNSPECIFIED, WEB, POS, EBAY, AMAZON, OTHER_PLATFORM, WIX_APP_STORE, WIX_INVOICES
 * @property {string} itemsQuantityPerCatalog - Json - sum of total items quantity per catalog - example: {“stores”: 9, “bookings”: 7}
 * @property {string} shippingOptionsTitle - The title of the shipping option that was selected by the buyer (note that this is what was selected and not presented)
 * @property {string} shippingCountry - buyer country code by the shipping details
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - appDefId
 * @property {number} numberOfItems - number OfItems
 * @property {string} taxRateType - Supported values: NO_TAX_COLLECTED, MANUAL_RATE, AUTO_RATE, FALLBACK_RATE
 * @property {string} customFieldsTitle - title of custom field (can be a list if there is more than one field
 * @property {number} discountRulesAmount - INT, multiplied by 100 000 the amount of discount by discount rules in the order.
 * @property {number} numberOfDiscountRules - number of discount rules in the order
 * @property {number} giftCardAmount - INT, multiplied by 100 000
 * @property {string} merchantDiscountType - list of applied merchant discount types e.g. GLOBAL, SPECIFIC_ITEMS, SHIPPING
 * @property {GUID} contactId - CRM contact ID
 * @property {number} payNow - Int multiplied by 100,000 Minimal amount to pay in order to place the order
 * @property {number} numLineItems - total number of line items
 * @property {string} calculationErrorsType - list of calculation errors types e.g. tax, coupon. gift card, etc.
 * @property {number} couponsAmount - INT, multiplied by 100 000. the amount of discount by coupons in the chckout
 * @property {string} currency - checkout currency
 * @property {string} distinctNumItemsPerCatalog - Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}
 * @property {number} itemsQuantity - sum of total items quantity
 * @property {number} payLater - Int multiplied by 100,00 Remaining amount so that the order would be fully paid
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart/order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart/order
 * @property {string} identityType - identityType
 * @property {GUID} checkoutId - checkout_id
 * @property {string} pricePerCatalog - Json - sum of gpv in usd per catalog - example: {“stores”: 9.00, “bookings”: 7.49}
 * @property {number} distinctNumItems - count distinct item_id
 * @property {number} discountAmount - INT, multiplied by 100 000
 * @property {number} numberOfCoupons - number of coupons in the checkout
 * @return {LogObject<checkoutCreatedParams>} LogObject<checkoutCreatedParams>
 */
export function checkoutCreated(params) {
    return { evid: 1136, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutUpdated' event (evid: 1137)
 *
 * Event description: checkout updated
 *
 * @param {checkoutUpdatedParams} params - The parameters for this event
 * @property {number} priceSummaryTotalAmount - grand_total_long, multiplied by 100 000 and rounded to int
 * @property {number} numberOfDiscounts - number of all discounts in the checkout
 * @property {string} numLineItemsPerCatalog - Json - number of line items per catalog - example: {“stores”: 3, “bookings”: 4}
 * @property {string} giftCardId - gift_card_id
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - if null-> buy now flow. If not null-> checkout created from cart (field added in 29.8.22)
 * @property {number} numShippingOptions - number of shipping choices presented to the buyer
 * @property {string} catalogAppId - list of all catalog app ids
 * @property {string} channelType - TYPE_UNSPECIFIED, WEB, POS, EBAY, AMAZON, OTHER_PLATFORM, WIX_APP_STORE, WIX_INVOICES
 * @property {string} itemsQuantityPerCatalog - Json - sum of total items quantity per catalog - example: {“stores”: 9, “bookings”: 7}
 * @property {string} shippingOptionsTitle - The title of the shipping option that was selected by the buyer (note that this is what was selected and not presented)
 * @property {string} shippingCountry - buyer country code by the shipping details
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - appDefId
 * @property {number} numberOfItems - number Of Items
 * @property {string} taxRateType - Supported values: NO_TAX_COLLECTED, MANUAL_RATE, AUTO_RATE, FALLBACK_RATE
 * @property {string} updated - list of updated fields
 * @property {string} customFieldsTitle - title of custom field (can be a list if there is more than one field
 * @property {number} discountRulesAmount - INT, multiplied by 100 000 the amount of discount by discount rules in the order.
 * @property {number} numberOfDiscountRules - number of discount rules in the order
 * @property {number} giftCardAmount - INT, multiplied by 100 000
 * @property {string} merchantDiscountType - list of applied merchant discount types e.g. GLOBAL, SPECIFIC_ITEMS, SHIPPING
 * @property {GUID} contactId - CRM contact ID
 * @property {number} payNow - Int multiplied by 100,000 Minimal amount to pay in order to place the order
 * @property {number} numLineItems - total number of line items
 * @property {string} calculationErrorsType - list of calculation errors types e.g. tax, coupon. gift card, etc.
 * @property {number} couponAmount - coupon_long
 * @property {number} couponsAmount - INT, multiplied by 100 000. the amount of discount by coupons in the checkout
 * @property {string} currency - checkout currency
 * @property {string} distinctNumItemsPerCatalog - Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}
 * @property {number} itemsQuantity - sum of total items quantity
 * @property {number} payLater - Int multiplied by 100,00 Remaining amount so that the order would be fully paid
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart/order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart/order
 * @property {string} identityType - identityType
 * @property {GUID} checkoutId - checkout_id
 * @property {string} pricePerCatalog - Json - sum of gpv in usd per catalog - example: {“stores”: 9.00, “bookings”: 7.49}
 * @property {number} distinctNumItems - count distinct item_id
 * @property {number} discountAmount - INT, multiplied by 100 000
 * @property {number} numberOfCoupons - number of coupons in the checkout
 * @property {string} shippingOptionSelected - array of carrier_id and shipping options that were selected by the UoU
 *
 * @property {string} ShippingOptionsPresented - array of carrier_id and shipping options that were presented to the UoU. If you want to know what was presented to the UoU for the first time you should use it from this evid (doesnt exist when the checkout is created)
 *
 * @return {LogObject<checkoutUpdatedParams>} LogObject<checkoutUpdatedParams>
 */
export function checkoutUpdated(params) {
    return { evid: 1137, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutCompleted' event (evid: 1138)
 *
 * Event description: when the order is placed successfully and the checkout is deleted
 * parallel to TYP
 *
 * @param {checkoutCompletedParams} params - The parameters for this event
 * @property {string} siteOriginalCurrency - site original currency (for multi currency analysis)
 * @property {number} priceSummaryTotalAmount - grand_total_long, multiplied by 100 000 and rounded to int
 * @property {number} numberOfDiscounts - number of all discounts in the checkout
 * @property {string} numLineItemsPerCatalog - Json - number of line items per catalog - example: {“stores”: 3, “bookings”: 4}
 * @property {string} giftCardId - gift_card_id
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - if null-> buy now flow. If not null-> checkout created from cart (field added in 29.8.22)
 * @property {number} numShippingOptions - number of shipping choices presented to the buyer
 * @property {string} catalogAppId - list of all catalog app ids
 * @property {string} channelType - TYPE_UNSPECIFIED, WEB, POS, EBAY, AMAZON, OTHER_PLATFORM, WIX_APP_STORE, WIX_INVOICES
 * @property {string} itemsQuantityPerCatalog - Json - sum of total items quantity per catalog - example: {“stores”: 9, “bookings”: 7}
 * @property {string} shippingOptionsTitle - The title of the shipping option that was selected by the buyer (note that this is what was selected and not presented)
 * @property {string} shippingCountry - buyer country code by the shipping details
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - appDefId
 * @property {number} numberOfItems - number Of Items
 * @property {string} taxRateType - Supported values: NO_TAX_COLLECTED, MANUAL_RATE, AUTO_RATE, FALLBACK_RATE
 * @property {string} customFieldsTitle - title of custom field (can be a list if there is more than one field
 * @property {number} discountRulesAmount - INT, multiplied by 100 000 the amount of discount by discount rules in the order.
 * @property {number} numberOfDiscountRules - number of discount rules in the order
 * @property {number} giftCardAmount - INT, multiplied by 100 000
 * @property {string} merchantDiscountType - list of applied merchant discount types e.g. GLOBAL, SPECIFIC_ITEMS, SHIPPING
 * @property {GUID} contactId - CRM contact ID
 * @property {number} payNow - Int multiplied by 100,000 Minimal amount to pay in order to place the order
 * @property {number} numLineItems - total number of line items
 * @property {number} conversionRate - multiply by 100M (int) - due to rate with 7 digits after the decimal number
 * @property {string} calculationErrorsType - list of calculation errors types e.g. tax, coupon. gift card, etc.
 * @property {number} couponsAmount - INT, multiplied by 100 000. the amount of discount by coupons in the checkout
 * @property {string} currency - checkout currency
 * @property {string} distinctNumItemsPerCatalog - Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}
 * @property {number} itemsQuantity - sum of total items quantity
 * @property {number} payLater - Int multiplied by 100,00 Remaining amount so that the order would be fully paid
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart/order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart/order
 * @property {string} identityType - identityType
 * @property {GUID} checkoutId - checkout_id
 * @property {string} pricePerCatalog - Json - sum of gpv in usd per catalog - example: {“stores”: 9.00, “bookings”: 7.49}
 * @property {number} distinctNumItems - count distinct item_id
 * @property {number} discountAmount - INT, multiplied by 100 000
 * @property {number} numberOfCoupons - number of coupons in the checkout
 * @property {string} shippingOptionSelected - array of carrier_id and shipping options that were selected by the UoU
 *
 * @property {string} ShippingOptionsPresented - array of carrier_id and shipping options that were presented to the UoU
 *
 * @return {LogObject<checkoutCompletedParams>} LogObject<checkoutCompletedParams>
 */
export function checkoutCompleted(params) {
    return { evid: 1138, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'lineItemInCheckout' event (evid: 1139)
 *
 * Event description: ONLY when checkout is created, sends one event per line item
 *
 * @param {lineItemInCheckoutParams} params - The parameters for this event
 * @property {number} weight - INT, multiplied by 100 000
 * @property {number} quantity - INT, multiplied by 100 000
 * @property {string} sku - Stock-keeping unit.
 * @property {string} paymentOption - FULL_PAYMENT_ONLINE / FULL_PAYMENT_OFFLINE / MEMBERSHIP
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} deliveryProfileId - Delivery profile id that is related to the destenation configuration
 * @property {string} paymentStatus - Int multiplied by 100,000
 * @property {string} fulfillerId - Fulfiller ID. Field is empty when the line item is self-fulfilled.
 * @property {string} channelType - TYPE_UNSPECIFIED, WEB, POS, EBAY, AMAZON, OTHER_PLATFORM, WIX_APP_STORE, WIX_INVOICES
 * @property {number} totalPriceBeforeTax - INT, multiplied by 100 000. Total price after all duscouts, before tax.
 * @property {number} taxRate - INT, multiplied by 100 000. Tax rate percentage, as a decimal numeral between 0 and 1 multipled.
 * @property {number} totalPriceAfterTax - INT, multiplied by 100 000. Total price after all discouts and tax.
 * @property {string} productNameTranslated - Translated product name
 * @property {number} totalTaxAmount - INT, multiplied by 100 000. The calculated tax, based on taxableAmount and taxRate.
 * @property {boolean} shippable - Whether this line item is shippable.
 * @property {string} user_agent - user_agent
 * @property {GUID} appDefId - app_def_id
 * @property {boolean} isCustomItem - True/false
 * @property {string} catalogItemId - ID of the item within it's Wix or 3rd-party catalog. For example: productId for Stores or eventId for Events.
 * @property {string} options - Additional info in key: value form. For example, {Size: M, Color: Red}
 * @property {string} weightUnit - Measure unit - defaults to site's weight unit. Supported values: UNSPECIFIED_WEIGHT_UNIT, KG, LB.
 * @property {string} itemType - Supported values: UNRECOGNISED, PHYSICAL, DIGITAL / Custom.
 * @property {GUID} contactId - CRM contact ID
 * @property {string} productName - Original product name (in site's default language)
 * @property {number} restockQuantity - quantity of inventory requested to be returned. Whether to restock or ignore the request is up the vertical.
 * @property {number} taxableAmount - INT, multiplied by 100 000. Taxable amount of this line item.
 * @property {GUID} appId - ID of the catalog app. For example: the Wix Stores appId, or the 3rd-party appId
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart/order
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkout_id
 * @property {number} discountAmount - INT, multiplied by 100 000
 * @property {number} catalogItemPrice - INT, multiplied by 100 000. Price before tax and discounts.
 * @return {LogObject<lineItemInCheckoutParams>} LogObject<lineItemInCheckoutParams>
 */
export function lineItemInCheckout(params) {
    return { evid: 1139, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickOnCheckout' event (evid: 114)
 *
 * Event description: Click on checkout from Cart page. since june 2019 also sent from OneApp with origin = 'OA StoreFront'
 *
 * @param {clickOnCheckoutParams} params - The parameters for this event
 * @property {string} validationMessage - jason with the validation that appear in the checkout while loaded. {type - warning/error, is_line_item - true/false, message - what the uou saw}
 * @property {string} orig_shipping_method - current shipping method in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
 * @property {GUID} cartId - cart_id
 * @property {number} itemsCount - Numbers of items in cart
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
 * @property {string} productsList - json containing all product guids for products in the cart
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} owner_id - uuid of site owner
 * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected (and displaying in cart)
 * @property {string} paymet_providers - array of payment providers connected to the store
 * @property {boolean} isOwner - true if visitor is the site owner
 * @property {boolean} is_member - true is the visitor signed in as a member, false otherwise
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor
 * @property {string} origin - origin
 * @property {string} shippingMethodType - shipping /store pickup / none
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
 * @property {GUID} checkoutId - checkout_id
 * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
 * @property {string} purchaseFlowId - purchase flow id
 * @return {LogObject<clickOnCheckoutParams>} LogObject<clickOnCheckoutParams>
 */
export function clickOnCheckout(params) {
    return { evid: 114, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'removeLineItemInCheckout' event (evid: 1140)
 *
 * Event description: A buyer can remove a line item from the checkout if it is out of stock. If the buyer won't remove the item s/he will get an error when placing the order.
 *
 * @param {removeLineItemInCheckoutParams} params - The parameters for this event
 * @property {number} weight - INT, multiplied by 100 000
 * @property {number} quantity - INT, multiplied by 100 000
 * @property {string} sku - Stock-keeping unit.
 * @property {string} paymentOption - FULL_PAYMENT_ONLINE / FULL_PAYMENT_OFFLINE / MEMBERSHIP
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} fulfillerId - Fulfiller ID. Field is empty when the line item is self-fulfilled.
 * @property {string} channelType - TYPE_UNSPECIFIED, WEB, POS, EBAY, AMAZON, OTHER_PLATFORM, WIX_APP_STORE, WIX_INVOICES
 * @property {number} totalPriceBeforeTax - INT, multiplied by 100 000. Total price after all duscouts, before tax.
 * @property {number} taxRate - INT, multiplied by 100 000. Tax rate percentage, as a decimal numeral between 0 and 1 multipled.
 * @property {number} totalPriceAfterTax - INT, multiplied by 100 000. Total price after all discouts and tax.
 * @property {string} productNameTranslated - Translated product name
 * @property {number} totalTaxAmount - INT, multiplied by 100 000. The calculated tax, based on taxableAmount and taxRate.
 * @property {boolean} shippable - Whether this line item is shippable.
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isCustomItem - is_custom_item
 * @property {string} catalogItemId - ID of the item within it's Wix or 3rd-party catalog. For example: productId for Stores or eventId for Events.
 * @property {string} options - Additional info in key: value form. For example, {Size: M, Color: Red}
 * @property {string} weightUnit - Measure unit - defaults to site's weight unit. Supported values: UNSPECIFIED_WEIGHT_UNIT, KG, LB.
 * @property {string} itemType - Supported values: UNRECOGNISED, PHYSICAL, DIGITAL / Custom.
 * @property {GUID} contactId - CRM contact ID
 * @property {string} productName - Original product name (in site's default language)
 * @property {number} restockQuantity - quantity of inventory requested to be returned. Whether to restock or ignore the request is up the vertical.
 * @property {number} taxableAmount - INT, multiplied by 100 000. Taxable amount of this line item.
 * @property {GUID} appId - ID of the catalog app. For example: the Wix Stores appId, or the 3rd-party appId
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart/order
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkout_id
 * @property {number} discountAmount - INT, multiplied by 100 000
 * @property {number} catalogItemPrice - INT, multiplied by 100 000. Price before tax and discounts.
 * @return {LogObject<removeLineItemInCheckoutParams>} LogObject<removeLineItemInCheckoutParams>
 */
export function removeLineItemInCheckout(params) {
    return { evid: 1140, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutLineItemAddedToCheckout' event (evid: 1141)
 *
 * Event description: When a line item is added to checkout (with the API / slots).
 *
 * @param {checkoutLineItemAddedToCheckoutParams} params - The parameters for this event
 * @property {number} quantity - INT, multiplied by 100 000
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} deliveryProfileId - Delivery profile id that is related to the destenation configuration
 * @property {string} catalogAppId - The item's vertical
 * @property {number} totalPriceAfterTax - INT, multiplied by 100 000. Total price after all discouts and tax.
 * @property {number} totalTaxAmount - INT, multiplied by 100 000. The calculated tax, based on taxableAmount and taxRate.
 * @property {boolean} shippable - Whether this line item is shippable.
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isCustomItem - True/false
 * @property {string} catalogItemId - ID of the item within it's Wix or 3rd-party catalog. For example: productId for Stores or eventId for Events.
 * @property {string} itemType - Supported values: UNRECOGNISED, PHYSICAL, DIGITAL / Custom.
 * @property {GUID} contactId - CRM contact ID
 * @property {string} productName - Original product name (in site's default language)
 * @property {string} currency - currency
 * @property {number} taxableAmount - INT, multiplied by 100 000. Taxable amount of this line item.
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkout_id
 * @property {number} discountAmount - INT, multiplied by 100 000
 * @property {number} catalogItemPrice - INT, multiplied by 100 000. Price before tax and discounts.
 * @return {LogObject<checkoutLineItemAddedToCheckoutParams>} LogObject<checkoutLineItemAddedToCheckoutParams>
 */
export function checkoutLineItemAddedToCheckout(params) {
    return { evid: 1141, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutUpdateLineItemsQuantityInCheckout' event (evid: 1142)
 *
 * Event description: When a line item quantity is changed in checkout (with the API / Slots)
 *
 * @param {checkoutUpdateLineItemsQuantityInCheckoutParams} params - The parameters for this event
 * @property {number} weight - INT, multiplied by 100 000
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} deliveryProfileId - Delivery profile id that is related to the destenation configuration
 * @property {string} catalogAppId - The item's vertical
 * @property {number} taxRate - INT, multiplied by 100 000. Tax rate percentage, as a decimal numeral between 0 and 1 multipled.
 * @property {number} totalPriceAfterTax - INT, multiplied by 100 000. Total price after all discouts and tax.
 * @property {number} totalTaxAmount - INT, multiplied by 100 000. The calculated tax, based on taxableAmount and taxRate.
 * @property {boolean} shippable - Whether this line item is shippable.
 * @property {string} destinationConfigId - the destenation configuration that is related to the line item
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} isCustomItem - True/false
 * @property {string} catalogItemId - ID of the item within it's Wix or 3rd-party catalog. For example: productId for Stores or eventId for Events.
 * @property {string} weightUnit - Measure unit - defaults to site's weight unit. Supported values: UNSPECIFIED_WEIGHT_UNIT, KG, LB.
 * @property {string} itemType - Supported values: UNRECOGNISED, PHYSICAL, DIGITAL / Custom.
 * @property {GUID} contactId - CRM contact ID
 * @property {number} newQuantity - INT, New quantity after the change
 * @property {string} productName - Original product name (in site's default language)
 * @property {string} currency - currency
 * @property {number} taxableAmount - INT, multiplied by 100 000. Taxable amount of this line item.
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkout_id
 * @property {number} oldQuantity - INT, Old quantity after the change
 * @property {number} discountAmount - INT, multiplied by 100 000
 * @property {number} catalogItemPrice - INT, multiplied by 100 000. Price before tax and discounts. Line item single product price
 * @return {LogObject<checkoutUpdateLineItemsQuantityInCheckoutParams>} LogObject<checkoutUpdateLineItemsQuantityInCheckoutParams>
 */
export function checkoutUpdateLineItemsQuantityInCheckout(params) {
    return { evid: 1142, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'localDeliveryInOrderPlaced' event (evid: 1145)
 *
 * Event description: This event should be sent after an order is placed, after 1158 order placed event if the order was made with local delivery service.
 *
 * @param {localDeliveryInOrderPlacedParams} params - The parameters for this event
 * @property {string} externalId - External id of shipping rule which LocalDeliveryOption is linked to. Most commonly it would be shippingRuleId from WixStores
 * @property {string} orderId - order_id
 * @property {string} optionId - Local delivery option Id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} shippingTitle - Shipping option title the UoU saw.
 * @property {boolean} isSchedule - is the selected method is schedule delivery
 * @property {string} areaType - "radius" or "zip code"
 * @property {string} identityType - identity_type
 * @return {LogObject<localDeliveryInOrderPlacedParams>} LogObject<localDeliveryInOrderPlacedParams>
 */
export function localDeliveryInOrderPlaced(params) {
    return { evid: 1145, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'lineItemInOrderPlaced' event (evid: 1148)
 *
 * Event description: This event is being sent foe each line item in an order when an order is placed.
 *
 * @param {lineItemInOrderPlacedParams} params - The parameters for this event
 * @property {string} locations - Source location - id (Location id), appId (Location owner app), quantity (per specific location)
 * @property {number} weight - INT, multiplied by 100 000
 * @property {number} quantity - quantity
 * @property {string} sku - Stock-keeping unit.
 * @property {string} paymentOption - FULL_PAYMENT_ONLINE / FULL_PAYMENT_OFFLINE / MEMBERSHIP
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} deliveryProfileId - Delivery profile id that is related to the destenation configuration
 * @property {string} fulfillerId
 * @property {string} orderId - order_id
 * @property {number} price - INT, multiplied by 100 000. Price before tax and discounts.
 * @property {number} totalPriceBeforeTax - discounted_price_before_tax
 * @property {string} subscriptionId - subscription_id
 * @property {string} taxCalculatorName - The name of the tax calculator. If manual - null
 * @property {number} taxRate - tax_rate
 * @property {number} totalPriceAfterTax - INT, multiplied by 100 000. Total price after all discouts and tax.
 * @property {string} productNameTranslated - Translated product name
 * @property {number} subscriptionCycle - subscription_cycle
 * @property {number} totalTaxAmount - INT, multiplied by 100 000. The calculated tax, based on taxableAmount and taxRate.
 * @property {string} lineItemId - line_item_id
 * @property {boolean} shippable - shippable
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} catalogItemId - catalog_item_id
 * @property {string} options - Additional info in key:value form. For example, {"Size": "M", "Color": "Red"} or {"variantId": "<VARIANT_ID>"}
 * @property {string} weightUnit - weight_unit
 * @property {number} depositAmount - Int multiplied by 100,000
 * @property {string} itemType - Supported values: UNRECOGNISED, PHYSICAL, DIGITAL / Custom.
 * @property {string} productName - product_name
 * @property {string} currency - currency
 * @property {string} subscriptionOptionDescription - Subscription option description. For example, "1kg of selected coffee, once a month".
 * @property {number} taxableAmount - INT, multiplied by 100 000. Taxable amount of this line item.
 * @property {GUID} appId - ID of the catalog app. For example: the Wix Stores appId, or the 3rd-party appId
 * @property {string} subscriptionOptionTitle - Subscription option title. For example, "Monthly coffee Subscription".
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkout_id
 * @property {number} discountAmount - INT, multiplied by 100 000. both merchant discounts + coupons discounts
 * @return {LogObject<lineItemInOrderPlacedParams>} LogObject<lineItemInOrderPlacedParams>
 */
export function lineItemInOrderPlaced(params) {
    return { evid: 1148, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'orderPaymentStatusChanged' event (evid: 1149)
 *
 * Event description: When order payment status is changed.
 *
 * @param {orderPaymentStatusChangedParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} newStatus - New payment status of the order. Supported values: UNSPECIFIED, NOT_PAID, PAID, PARTIALLY_REFUNDED, FULLY_REFUNDED, PENDING.
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} oldStatus - Old payment status of the order. Supported values: UNSPECIFIED, NOT_PAID, PAID, PARTIALLY_REFUNDED, FULLY_REFUNDED, PENDING.
 * @property {string} identityType - identity_type
 * @property {string} channelType - order's channel type
 * @return {LogObject<orderPaymentStatusChangedParams>} LogObject<orderPaymentStatusChangedParams>
 */
export function orderPaymentStatusChanged(params) {
    return { evid: 1149, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'removedProductFromCartSf' event (evid: 115)
 *
 * Event description: Removed product from cart SF. since june 2019 also for OneApp StoreFront (member view)
 *
 * @param {removedProductFromCartSfParams} params - The parameters for this event
 * @property {GUID} cartId - cart id
 * @property {number} itemsCount - origin
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {string} productType - digital / physical
 * @property {string} origin - number of items in the cart
 * @property {string} productId - product_id
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchaseFlowId
 * @return {LogObject<removedProductFromCartSfParams>} LogObject<removedProductFromCartSfParams>
 */
export function removedProductFromCartSf(params) {
    return { evid: 115, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'discountInOrderPlaced' event (evid: 1150)
 *
 * Event description: This event is being sent after an order is placed if it has any discounts in it. Per each discount in order - one event
 *
 * @param {discountInOrderPlacedParams} params - The parameters for this event
 * @property {string} discountType - GLOBAL/SPECIFIC-ITEMS/SHIPPING
 * @property {string} orderId - order_id
 * @property {string} couponCode - coupon_code
 * @property {string} appDefId - app_def_id
 * @property {number} amount - INT, multiplied by 100 000. the discount amount.
 * @property {string} couponName - coupon name ,*discount rule name (since March 22)
 * @property {number} numberOfItems - Number of line items discount applied to
 * @property {string} currency - currency
 * @property {string} type - "coupon" or "merchant discount" or *discount rule (since March 22)
 * @property {string} identityType - identity_type
 * @property {string} couponId - coupon_id / *discount rule  id (since March 22)
 * @return {LogObject<discountInOrderPlacedParams>} LogObject<discountInOrderPlacedParams>
 */
export function discountInOrderPlaced(params) {
    return { evid: 1150, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'orderFulfillmentStatusChanged' event (evid: 1152)
 *
 * Event description: When the fulfillment status of an order is being changed
 *
 * @param {orderFulfillmentStatusChangedParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {string} newStatus - new_status
 * @property {string} appDefId - app_def_id
 * @property {string} fulfillmentStatusesAggregate - Unique string values based on Fulfillment entities statuses - currently for restaurants orders ( pending, accepted, out for delivery etc. )
 * @property {string} oldStatus - Old fulfillment status of the order. Supported values: NOT_FULFILLED, FULFILLED, PARTIALLY_FULFILLED.
 * @property {string} newFulfillmentStatusesAggregate - New value - Unique string values based on Fulfillment entities statuses - currently for restaurants orders ( pending, accepted, out for delivery etc. )
 * @property {string} identityType - identity_type
 * @property {string} action - The action that changed the fulfillment status.
 * @return {LogObject<orderFulfillmentStatusChangedParams>} LogObject<orderFulfillmentStatusChangedParams>
 */
export function orderFulfillmentStatusChanged(params) {
    return { evid: 1152, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'paymentUpdated' event (evid: 1155)
 *
 * Event description: This event is being sent every time a payment is updated. For online payments - when the payment is approved. For offline payments - when the payment is created, and then again when approved by the user.
 *
 * @param {paymentUpdatedParams} params - The parameters for this event
 * @property {GUID} providerAppId - Membership provider app id
 * @property {string} giftCardId - the ID of the gift card
 * @property {string} paymentId - payment id
 * @property {boolean} offlinePayment - is need to manually "marked as paid"
 * @property {string} paymentOrderId - payments.regularPaymentDetails.paymentOrderId
 * @property {GUID} orderId - order_id
 * @property {string} providerTransactionId - Transaction ID from payment provider (e.g., PayPal, Square, Stripe)
 * @property {GUID} membershipId - The membership id
 * @property {string} lineItemId - ID of the line item this membership applies to.
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app that send bi
 * @property {number} amount - INT, multiplied by 100 000
 * @property {string} giftCardAppId - the ID of the gift card app
 * @property {string} status - For online orders always "APPROVED". For offline orders, the status is "OFFLINE" until the user changes it to "APPROVED"
 * @property {string} paymentProvider - payment provider
 * @property {string} currency - currency
 * @property {boolean} allowRefund - allow_refund
 * @property {string} identityType - user / visitor / member..
 * @property {string} transactionId - cashier's transaction_id
 * @property {boolean} savedPaymentMethod - Whether there is a payment agreement that allows for future charges (Card Tokenization)
 * @property {string} captures - Array <AuthorizationCapture> List of captures associated with payment In case of failed it can be replaced with new one with PENDING or SUCCESS statuses
 * @property {string} void - Void associated with payment
 *
 * @property {boolean} delayedCapture - Whether the authorized payment is of a delayed capture.
 *
 * @property {DateTime} authorize - Date and time the payment was authorized
 * @return {LogObject<paymentUpdatedParams>} LogObject<paymentUpdatedParams>
 */
export function paymentUpdated(params) {
    return { evid: 1155, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'orderStatusChanged' event (evid: 1156)
 *
 * Event description: Cancel Order.
 *
 * @param {orderStatusChangedParams} params - The parameters for this event
 * @property {boolean} restockAllItems - Should restock all items on that order
 * @property {string} orderId - order_id
 * @property {string} appDefId - app_def_id
 * @property {string} message - Personal note added to the email (optional)
 * @property {string} identityType - identity_type
 * @property {boolean} isEmail - Should send a confirmation mail to the customer
 * @return {LogObject<orderStatusChangedParams>} LogObject<orderStatusChangedParams>
 */
export function orderStatusChanged(params) {
    return { evid: 1156, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'orderPlaced' event (evid: 1158)
 *
 * Event description: This event is being sent after an order is placed. This is an aggregated event per order_id. An equivalent event is "Line Items in Order Placed" which is aggregated by line items.
 *
 * @param {orderPlacedParams} params - The parameters for this event
 * @property {string} siteOriginalCurrency - site_original_currency
 * @property {number} globalDiscountAmount - INT , multiplied by 100000
 * @property {string} deliveryByDate - Latest expected delivery date
 * @property {number} numberOfDiscounts - number of all discounts in the order
 * @property {string} numLineItemsPerCatalog - Json - number of line items per catalog - example: {appId1: 3, appId2: 4}
 * @property {string} billingCountry - The country of the billing address
 * @property {string} privateTagIds - Tags that require an additional permission in order to access them, normally not given to site members or visitors.
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} cartId - cart_id
 * @property {string} externalOrderId - Reference to an order ID from an external system, as defined in channelInfo (e.g., eBay or Amazon)
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING/ PARTIALLY_PAID/PAID
 * @property {string} siteLanguage - site's language in which original values shown
 * @property {string} shippingRegionName - name of shipping region (the name from the shipping rule in BO)
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} channelType - Sales channel that submitted the order. Supported values: UNSPECIFIED, WEB, POS, EBAY, AMAZON, OTHER_PLATFORM, WIX_APP_STORE, WIX_INVOICES.
 * @property {string} billingCity - The city of the billing address
 * @property {number} shippingTax - INT, multiplied by 100 000 -  tax on shipping amount
 * @property {string} itemsQuantityPerCatalog - Json - sum of total items quantity per catalog - example: {appId1: 9, appId2: 7}
 * @property {boolean} taxIncludedInPrices - Is tax included in the line items' prices
 * @property {string} tag_ids - Tags that are exposed to anyone who has access to the labeled entity itself, including site members and visitors.
 * @property {number} balance - Int multiplied by 100,00 Balance = orderTotal - sumOfPayments + sumOfRefunds. **static amount - will be updated in the future.
 * @property {string} shippingInstructions - Instructions for caller, e.g for pickup: "Ensure to come during Opening Hours, and please don't park in disabled-spot"
 * @property {string} attributionSource - Attribution of order. e.g. FB-Ads, invoice. Supported values: UNSPECIFIED, FACEBOOK_ADS.
 * @property {string} shippingCountry - The country of the shipping address
 * @property {number} additionalFeesTax - INT, multiplied by 100 000 -  additional fees tax
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {number} totalPrice - INT, multiplied by 100 000
 * @property {string} shippingTitle - Shipping option title. For example, "USPS Standard Overnight Delivery", "Standard" or "First-Class Package International".
 * @property {number} shippingDiscount - INT, multiplied by 100 000 -  discount on shipping amount
 * @property {string} weightUnit - Measure unit - defaults to site's weight unit. Supported values: UNSPECIFIED_WEIGHT_UNIT, KG, LB.
 * @property {number} taxAmount - INT, multiplied by 100 000
 * @property {string} buyerNote - Buyer note
 * @property {string} shippingType - shipping_type
 * @property {number} discountRulesAmount - INT, multiplied by 100 000 the amount of discount by discount rules in the order.
 * @property {number} numberOfDiscountRules - number of discount rules in the order
 * @property {string} contactId - CRM contact ID
 * @property {number} payNow - Int multiplied by 100,000 Minimal amount to pay in order to place the order
 * @property {number} numLineItems - num_line_items
 * @property {string} externalOrderUrl - URL to the order in the external system, as defined in channelInfo (e.g., eBay or Amazon)
 * @property {string} carrierId - App Def Id of external provider which was a source of shipping info
 * @property {number} couponsAmount - INT, multiplied by 100 000. the amount of discount by coupons in the order.
 * @property {string} currency - paid currency
 * @property {string} deliveryTime - est_delivery_time
 * @property {string} distinctNumItemsPerCatalog - Json - sum of total count distinct item_id per catalog - example: {appId1: 2, appId2: 3}
 * @property {string} appdefid - app_def_id
 * @property {number} itemsQuantity - sum of total items quantity
 * @property {number} shippingAmount - INT, multiplied by 100 000
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkout_id
 * @property {string} pricePerCatalog - Json - sum of gpv in usd per catalog - example: {appid1: 9.00, appid2: 7.49}
 * @property {string} buyerLanguage - buyer_language
 * @property {number} distinctNumItems - count distinct item_id
 * @property {string} shippingCity - The city of the shipping address
 * @property {number} discountAmount - INT, multiplied by 100 000
 * @property {number} numberOfCoupons - number of coupons in the order
 * @property {string} orderApprovalStrategy - Strategy defining the condition under which the order is approved.
 * DEFAULT: Same as order.status: APPROVED
 * order.price_summary.total == 0
 * OR
 * payment received
 * PAYMENT_RECEIVED: Order is approved ONLY when payment is received.
 * @return {LogObject<orderPlacedParams>} LogObject<orderPlacedParams>
 */
export function orderPlaced(params) {
    return { evid: 1158, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'invoicesCreateInvoice' event (evid: 1159)
 *
 * Event description: When a user creates an invoice for an order:
 *
 * @param {invoicesCreateInvoiceParams} params - The parameters for this event
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING/ PARTIALLY_PAID/PAID
 * @property {string} orderId - order_id
 * @property {GUID} invoiceId - invoice guid
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} identityType - identity_type
 * @return {LogObject<invoicesCreateInvoiceParams>} LogObject<invoicesCreateInvoiceParams>
 */
export function invoicesCreateInvoice(params) {
    return { evid: 1159, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'updatedCartItemQuantitySf' event (evid: 116)
 *
 * Event description: Updated cart item quantity
 *
 * @param {updatedCartItemQuantitySfParams} params - The parameters for this event
 * @property {GUID} cartId - cart id
 * @property {number} itemsCount - number of items in the cart
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {string} origin - origin
 * @property {string} productId - product_id
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase_flow_id
 * @return {LogObject<updatedCartItemQuantitySfParams>} LogObject<updatedCartItemQuantitySfParams>
 */
export function updatedCartItemQuantitySf(params) {
    return { evid: 116, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'emailSent' event (evid: 1160)
 *
 * Event description: When an email is being sent to the user or to the buyer.
 *
 * @param {emailSentParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} emailType - email_type
 * @property {GUID} emailRefId - email_id
 * @property {string} appDefId - app_def_id
 * @property {string} identityType - identity_type
 * @property {string} addresseeType - to whom the email was sent to - user / buyer.
 * @return {LogObject<emailSentParams>} LogObject<emailSentParams>
 */
export function emailSent(params) {
    return { evid: 1160, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxTaxRateEstimationFromAvalara' event (evid: 1162)
 *
 * Event description: Estimation of the tax rate was obtained from Avalara in the cart/checkout. Sent when the estimation is back from Avalara
 *
 * @param {taxTaxRateEstimationFromAvalaraParams} params - The parameters for this event
 * @property {number} duration - The time the estimation took, in ms
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} visitorId - visitor_id
 * @property {GUID} uuid - uuid
 * @property {GUID} storeId - store_id
 * @property {string} externalEntityId - cart_id/ checkout_id
 * @property {string} user_agent - user_agent
 * @property {GUID} appDefId - app_def_id
 * @property {boolean} isMerchant - merchant status
 * @property {number} taxLong - Tax estimation total tax * 100,000
 * @property {string} estimateRequestId - estimate_request_id
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {string} currency - currency
 * @property {GUID} msid - msid
 * @property {string} identityType - identity_type
 * @property {GUID} siteMemberId - member guid
 * @return {LogObject<taxTaxRateEstimationFromAvalaraParams>} LogObject<taxTaxRateEstimationFromAvalaraParams>
 */
export function taxTaxRateEstimationFromAvalara(params) {
    return { evid: 1162, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxCommittedTaxTransactionWithAvalara' event (evid: 1163)
 *
 * Event description: when the order becomes paid / is marked as paid we commit to Avalara in order for them to record the tax taken on the order. (up to 3 times per order if for some reason the commit fails). Valid values since 25 Feb 2019 (before included also manual trnx) Tax calculated during the commit can be different than the estimate. NB : field nexus_defined starts from 07.03.2019. msid is invalid
 *
 * @param {taxCommittedTaxTransactionWithAvalaraParams} params - The parameters for this event
 * @property {number} orderNumber - order index number the users are seeing in their orders page
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} orderId - order_id
 * @property {number} taxCommittedLong - INT (multiplied by 100000), send 0 if commit failed
 * @property {number} taxEstimateLong - INT (multiplied by 100000)
 * @property {string} externalEntityId - external_entity_id
 * @property {string} errorReason - in case when is_success = false - what was the reason
 * @property {boolean} isRetryable - in case when is_success = false indicator if a retry should occur after
 * @property {boolean} isSuccess - true if commit didn't fail
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {boolean} nexusDefined - true - calls where we actually needed Avalara (where we have nexus), false - for calls that are only exists for reporting purposes (with no nexuses, will be committed with 0 tax). Relevant only when is_success = true (in other case its just a guess)
 * @property {string} draftOrderId - draft_order_id
 * @property {number} taxDifference - committed - estimate, INT (multiplied by 100000), send 0 if commit failed
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} fallbackUsed - true if fallback was used. Relevant only when is_suvvess = true (in other case its just a guess)
 * @return {LogObject<taxCommittedTaxTransactionWithAvalaraParams>} LogObject<taxCommittedTaxTransactionWithAvalaraParams>
 */
export function taxCommittedTaxTransactionWithAvalara(params) {
    return { evid: 1163, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'refundTransactionCreated' event (evid: 1164)
 *
 * Event description: When a refund transaction being created (one refund can have multiple payments).
 *
 * @param {refundTransactionCreatedParams} params - The parameters for this event
 * @property {string} paymentId - payment_id
 * @property {string} refundStatus - Refund status. Supported values: PENDING, SUCCEEDED, FAILED.
 * @property {string} orderId - order_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {number} amount - INT, multiplied by 100 000. The payment refund amount.
 * @property {boolean} externalRefund - Whether refund was made externally and manually (on the payment provider's side).
 * @property {string} providerRefundId - Payment gateway's refund ID. This ID can be used with the Wix Payments Transactions API. This field is only returned when the value of external_refund is false
 * @property {string} refundId - refund_id
 * @property {string} currency - currency
 * @property {string} gatewayRefundId - ID of the payment gateway refund.
 * @property {string} identityType - identity_type
 * @return {LogObject<refundTransactionCreatedParams>} LogObject<refundTransactionCreatedParams>
 */
export function refundTransactionCreated(params) {
    return { evid: 1164, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'refundTransactionUpdatedSrc130Evid1165' event (evid: 1165)
 *
 * Event description: When a refund transaction is updated
 *
 * @param {refundTransactionUpdatedSrc130Evid1165Params} params - The parameters for this event
 * @property {string} paymentId - payment_id
 * @property {string} refundStatus - Refund status. Supported values: PENDING, SUCCEEDED, FAILED.
 * @property {string} orderId - order_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {number} amount - INT, multiplied by 100 000. The payment refund amount.
 * @property {boolean} externalRefund - Whether refund was made externally and manually (on the payment provider's side).
 * @property {string} providerRefundId - ID of the refund in the payment provider's system.
 * @property {string} refundId - refund_id
 * @property {string} currency - currency
 * @property {string} gatewayRefundId - ID of the payment gateway refund.
 * @property {string} identityType - identity_type
 * @return {LogObject<refundTransactionUpdatedSrc130Evid1165Params>} LogObject<refundTransactionUpdatedSrc130Evid1165Params>
 */
export function refundTransactionUpdatedSrc130Evid1165(params) {
    return { evid: 1165, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'refundCreated' event (evid: 1166)
 *
 * Event description: When a refund for an order is being created.
 *
 * @param {refundCreatedParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} reason - Reason for refund, given by user (optional).
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {number} numberOfItems - The number of refunded line items.
 * @property {boolean} shippingIncluded - Whether shipping rate is also refunded.
 * @property {number} numberOfPayments - The number of payments in the refund.
 * @property {string} refundId - refund_id
 * @property {string} identityType - identity_type
 * @property {string} customerReason - Reason for the refund, provided by customer (optional).
 *
 * @property {string} additionalFees - Additional fees to refund Additional fee ID+Amount to refund. Empty value means refund for remaining (refundable) amount.
 * @property {number} shippingRefundAmount - Shipping to refund *100,000
 * @property {string} items - Order line item IDs and quantities that were refunded.
 * @property {number} requestedRefund - requestedRefund*100,000
 * @return {LogObject<refundCreatedParams>} LogObject<refundCreatedParams>
 */
export function refundCreated(params) {
    return { evid: 1166, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'fulfillmentUpdated' event (evid: 1167)
 *
 * Event description: When a fulfillment is being updated
 *
 * @param {fulfillmentUpdatedParams} params - The parameters for this event
 * @property {boolean} isCompleted - Wheather the fulfilment was completed or not
 * @property {string} lineItems - A lost of line item id + quantity that their fulfillment was updated. Field was implemented in March 24
 * @property {string} orderId - order_id
 * @property {string} shippingProvider - Shipping provider.
 * @property {string} appDefId - app_def_id
 * @property {string} trackingNumber - Tracking number.
 * @property {string} trackingLink - Tracking link - auto-filled if using a predefined shipping provider, otherwise provided on creation. Using the following shipping providers will allow for auto-filling the tracking link: fedex, ups, usps, dhl, canadaPost.
 * @property {string} fulfillmentId - ID of created fulfillment
 * @property {string} customFulfillmentInfo - A list of  filed+name of the custom fulfilment info (additional info aded by the user)
 * @property {string} status - The status of the fulfilment. Its a custom field added by the user. options: "Pending", "Accepted", "Ready", "In_Delivery", "Fulfilled"
 * @property {string} identityType - identity_type
 * @return {LogObject<fulfillmentUpdatedParams>} LogObject<fulfillmentUpdatedParams>
 */
export function fulfillmentUpdated(params) {
    return { evid: 1167, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'fulfillmentDeleted' event (evid: 1168)
 *
 * Event description: When a fulfillment is being deleted (there is not UI for that, so this event is rarely sent)
 *
 * @param {fulfillmentDeletedParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - A list of verticals which are in this fulfilment separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} appDefId - app_def_id
 * @property {string} fulfillmentId - ID of created fulfillment
 * @property {string} identityType - identity_type
 * @return {LogObject<fulfillmentDeletedParams>} LogObject<fulfillmentDeletedParams>
 */
export function fulfillmentDeleted(params) {
    return { evid: 1168, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'lineItemInFulfilmentCreated' event (evid: 1169)
 *
 * Event description: Sends for each line item after fulfillment created
 *
 * @param {lineItemInFulfilmentCreatedParams} params - The parameters for this event
 * @property {boolean} isCompleted - Wheather the fulfilment was completed or not
 * @property {number} quantity - Line item quantity.
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - A list of verticals which are in this fulfilment separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} lineItemId - Line item ID
 * @property {string} appDefId - app_def_id
 * @property {string} fulfillmentId - ID of created fulfillment
 * @property {string} customFulfillmentInfo - A list of  filed+name of the custom fulfilment info (additional info aded by the user)
 * @property {string} status - The status of the fulfilment. Its a custom field added by the user. options: "Pending", "Accepted", "Ready", "In_Delivery", "Fulfilled"
 * @property {string} identityType - identity_type
 * @return {LogObject<lineItemInFulfilmentCreatedParams>} LogObject<lineItemInFulfilmentCreatedParams>
 */
export function lineItemInFulfilmentCreated(params) {
    return { evid: 1169, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'errorWhenApplyingACoupon' event (evid: 117)
 *
 * Event description: Checkout -> Error when applying a coupon.
 *
 * @param {errorWhenApplyingACouponParams} params - The parameters for this event
 * @property {string} mobilePosition - Top/Bottom. Null if not mobile device. The place in the checkout on mobile device (not Wix app) where the uou did the action. There are 2 option - on the top of the checkout or on the bottom of the checkout.
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} couponCode - coupon_code
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} owner_id - owner_id
 * @property {boolean} isMember - is_member
 * @property {string} errorCode - dsc
 * @property {string} origin - origin
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<errorWhenApplyingACouponParams>} LogObject<errorWhenApplyingACouponParams>
 */
export function errorWhenApplyingACoupon(params) {
    return { evid: 117, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'fulfillmentCreated' event (evid: 1170)
 *
 * Event description: when a fulfillment is being created (via adding tracking number)
 *
 * @param {fulfillmentCreatedParams} params - The parameters for this event
 * @property {boolean} isCompleted - Wheather the fulfilment was completed or not
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - A list of verticals which are in this fulfilment separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} shippingProvider - Shipping provider.
 * @property {string} appDefId - app_def_id
 * @property {number} totalPrice - Total price of fulfilled items, INT, multiplied by 100 000
 * @property {string} trackingNumber - Tracking number.
 * @property {string} trackingLink - Tracking link - auto-filled if using a predefined shipping provider, otherwise provided on creation. Using the following shipping providers will allow for auto-filling the tracking link: fedex, ups, usps, dhl, canadaPost.
 * @property {boolean} applyToPartItems - false if the fulfillment applies to all items in order
 * @property {string} fulfillmentId - ID of created fulfillment
 * @property {string} customFulfillmentInfo - A list of  filed+name of the custom fulfilment info (additional info aded by the user)
 * @property {string} status - The status of the fulfilment. Its a custom field added by the user. options: "Pending", "Accepted", "Ready", "In_Delivery", "Fulfilled"
 * @property {number} numLineItems - Number of line items fulfilled by the fulfiller.
 * @property {string} currency - Order's currency
 * @property {number} itemsQuantity - Sum of total items quantity
 * @property {string} identityType - identity_type
 * @return {LogObject<fulfillmentCreatedParams>} LogObject<fulfillmentCreatedParams>
 */
export function fulfillmentCreated(params) {
    return { evid: 1170, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'orderUpdated' event (evid: 1171)
 *
 * Event description: When an order is updated successfully.
 *
 * @param {orderUpdatedParams} params - The parameters for this event
 * @property {string} description - description
 * @property {string} orderId - order_id
 * @property {string} lineItemId - line_item_id
 * @property {string} appDefId - id
 * @property {string} origin - email address / shipping address / billing address / delivery method / draft order
 * @property {string} identityType - user/visitor/member/wixService
 * @property {string} channelType - order's channel type
 * @return {LogObject<orderUpdatedParams>} LogObject<orderUpdatedParams>
 */
export function orderUpdated(params) {
    return { evid: 1171, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'editOrderError' event (evid: 1172)
 *
 * Event description: When there is an error in editing order
 *
 * @param {editOrderErrorParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} errorReason - the reason for the error
 * @property {string} appDefId - id of app who sends the event (WixStores in most cases, can be Corvid as well), not id of fulfiller who will create the order
 * @property {string} origin - email address / shipping address / billing address / delivery method
 * @property {string} identityType - user/visitor/member/wixService
 * @return {LogObject<editOrderErrorParams>} LogObject<editOrderErrorParams>
 */
export function editOrderError(params) {
    return { evid: 1172, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'additionalFeeInOrder' event (evid: 1173)
 *
 * Event description: This event is being sent for each additional fee that is in order (when calling to totals calculator)
 *
 * @param {additionalFeeInOrderParams} params - The parameters for this event
 * @property {string} providerAppId - SPI implementer’s id
 * @property {string} orderId - Order_id that the additional fee is on
 * @property {string} catalogAppId - list of all catalog app ids. A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {number} price - INT, multiplied by 100 000. the additional fee price
 * @property {number} totalPriceBeforeTax - INT, multiplied by 100 000. Total price before tax. Similar to priceBeforeTax
 * @property {number} taxRate - INT, multiplied by 100 000. Tax rate percentage, as a decimal numeral between 0 and 1 multipled.
 * @property {number} totalPriceAfterTax - numeric INT, multiplied by 100 000. Total price after tax.
 * @property {number} totalTaxAmount - INT, multiplied by 100 000. The calculated tax, based on taxableAmount and taxRate.
 * @property {string} appDefId - app_def_id
 * @property {GUID} taxGroupID - Tax group ID
 * @property {string} additionalFeeName - additional_fee_name
 * @property {string} currency - The currency of the additional fee
 * @property {number} taxableAmount - INT, multiplied by 100 000. Taxable amount.
 * @property {string} additionalFeeCode - The code (Id) of the additional fee (not mandatory)
 * @property {string} identityType - identity_type
 * @property {number} priceBeforeTax - INT, multiplied by 100 000. additional fee price before tax.
 * @return {LogObject<additionalFeeInOrderParams>} LogObject<additionalFeeInOrderParams>
 */
export function additionalFeeInOrder(params) {
    return { evid: 1173, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'minimumOrderValidationError' event (evid: 1174)
 *
 * Event description: in checkout / in cart - validation to check if the grand total reach the minimum order subtotal limit - if not a message is sent to the buyer
 *
 * @param {minimumOrderValidationErrorParams} params - The parameters for this event
 * @property {number} minimumValueLong - the minimum order limit the user set in the stores settings
 * @property {string} stage - stage
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cartId
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {number} diffLong - The diff between the actual value and the minimum order limit
 * @property {string} currency - the currency that is presented to the buyer
 * @property {GUID} ecomId - ecom_id
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkoutId
 * @return {LogObject<minimumOrderValidationErrorParams>} LogObject<minimumOrderValidationErrorParams>
 */
export function minimumOrderValidationError(params) {
    return { evid: 1174, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'additionalFeeInCheckout' event (evid: 1175)
 *
 * Event description: This event is being sent for each additional fee that is in checkout (when calling to totals calculator)
 *
 * @param {additionalFeeInCheckoutParams} params - The parameters for this event
 * @property {string} providerAppId - SPI implementer’s id
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} catalogAppId - list of all catalog app ids. A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {number} price - INT, multiplied by 100 000. the additional fee price
 * @property {number} totalPriceBeforeTax - INT, multiplied by 100 000. Total price before tax.
 * @property {number} taxRate - INT, multiplied by 100 000. Tax rate percentage, as a decimal numeral between 0 and 1 multipled.
 * @property {number} totalPriceAfterTax - INT, multiplied by 100 000. Total price after tax.
 * @property {number} totalTaxAmount - INT, multiplied by 100 000. The calculated tax, based on taxableAmount and taxRate.
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - appDefId
 * @property {GUID} taxGroupID - Tax group ID
 * @property {string} additionalFeeName - The name of the additional fee
 * @property {string} currency - The currency of the additional fee
 * @property {number} taxableAmount - INT, multiplied by 100 000. Taxable amount.
 * @property {GUID} ecomId - ecom_id
 * @property {string} additionalFeeCode - The code (Id) of the additional fee (not mandatory)
 * @property {GUID} checkoutId - checkout_id
 * @property {number} priceBeforeTax - INT, multiplied by 100 000. additional fee price before tax.
 * @return {LogObject<additionalFeeInCheckoutParams>} LogObject<additionalFeeInCheckoutParams>
 */
export function additionalFeeInCheckout(params) {
    return { evid: 1175, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'additionalFeeInEstimateTotalsCart' event (evid: 1176)
 *
 * Event description: This event is being sent for each additional fee that is in cart (when calling to totals calculator)
 *
 * @param {additionalFeeInEstimateTotalsCartParams} params - The parameters for this event
 * @property {string} providerAppId - SPI implementer’s id
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cartId
 * @property {string} catalogAppId - list of all catalog app ids. A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {number} price - INT, multiplied by 100 000. the additional fee price
 * @property {number} totalPriceBeforeTax - INT, multiplied by 100 000. Total price before tax.
 * @property {number} taxRate - INT, multiplied by 100 000. Tax rate percentage, as a decimal numeral between 0 and 1 multipled.
 * @property {number} totalPriceAfterTax - INT, multiplied by 100 000. Total price after tax.
 * @property {number} totalTaxAmount - INT, multiplied by 100 000. The calculated tax, based on taxableAmount and taxRate.
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - appDefId
 * @property {GUID} taxGroupID - Tax group ID
 * @property {string} additionalFeeName - The name of the additional fee
 * @property {string} currency - The currency of the additional fee
 * @property {number} taxableAmount - INT, multiplied by 100 000. Taxable amount.
 * @property {GUID} ecomId - ecom_id
 * @property {string} additionalFeeCode - The code (Id) of the additional fee (not mandatory)
 * @property {number} priceBeforeTax - INT, multiplied by 100 000. additional fee price before tax.
 * @return {LogObject<additionalFeeInEstimateTotalsCartParams>} LogObject<additionalFeeInEstimateTotalsCartParams>
 */
export function additionalFeeInEstimateTotalsCart(params) {
    return { evid: 1176, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'orderSourceUpdated' event (evid: 1177)
 *
 * Event description: When an order's source is being updated (like with FB ads). This event can be sent a couple of days after an order is being created.
 *
 * @param {orderSourceUpdatedParams} params - The parameters for this event
 * @property {string} source - The source of the order
 * @property {GUID} visitorId - visitor_id
 * @property {string} orderId - order_id
 * @property {string} appDefId - app_def_id
 * @property {string} identityType - identity_type
 * @property {GUID} transactionId - transaction_id
 * @return {LogObject<orderSourceUpdatedParams>} LogObject<orderSourceUpdatedParams>
 */
export function orderSourceUpdated(params) {
    return { evid: 1177, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'lineItemInOrderAfterDraft' event (evid: 1178)
 *
 * Event description: This event is being sent after the draft order is committed -
 * Modified line items- added, changed
 * response object- orderAfterCommit
 * Similar fields from line items in order placed 1148 + deltas from the draft order
 * https://bo.wix.com/wix-docs/rest/drafts/draft-order-updates/commit-draft-order
 *
 * @param {lineItemInOrderAfterDraftParams} params - The parameters for this event
 * @property {number} weight - INT, multiplied by 100 000
 * @property {number} quantity - quantity
 * @property {number} totalPriceDelta - Int multiplied by 100,000
 * @property {string} sku - Stock-keeping unit.
 * @property {string} paymentOption - FULL_PAYMENT_ONLINE / FULL_PAYMENT_OFFLINE / MEMBERSHIP
 * @property {boolean} updateInventory - Update inventory
 * @property {GUID} cartId - cart_id
 * @property {string} deliveryProfileId - Delivery profile id that is related to the destenation configuration
 * @property {string} fulfillerId - fulfiller_id
 * @property {string} orderId - order_id
 * @property {number} discountPriceDelta - Int multiplied by 100,000
 * @property {number} price - INT, multiplied by 100 000. Price before tax and discounts.
 * @property {number} totalPriceBeforeTax - discounted_price_before_tax
 * @property {string} subscriptionId - subscription_id
 * @property {string} taxCalculatorName - The name of the tax calculator. If manual - null
 * @property {number} taxRate - tax_rate
 * @property {number} totalPriceAfterTax - INT, multiplied by 100 000. Total price after all discouts and tax.
 * @property {string} productNameTranslated - Translated product name
 * @property {number} subscriptionCycle - subscription_cycle
 * @property {number} totalTaxAmount - INT, multiplied by 100 000. The calculated tax, based on taxableAmount and taxRate.
 * @property {string} lineItemId - line_item_id
 * @property {boolean} shippable - shippable
 * @property {GUID} appDefId - app_def_id
 * @property {string} catalogItemId - catalog_item_id
 * @property {string} options - Additional info in key:value form. For example, {"Size": "M", "Color": "Red"} or {"variantId": "<VARIANT_ID>"}
 * @property {string} weightUnit - weight_unit
 * @property {number} depositAmount - Int multiplied by 100,000
 * @property {string} itemType - Supported values: UNRECOGNISED, PHYSICAL, DIGITAL / Custom.
 * @property {string} lineItemDeltaAction - added, modified
 * @property {string} productName - product_name
 * @property {string} currency - currency
 * @property {number} quantityDelta - quantity_delta
 * @property {string} subscriptionOptionDescription - Subscription option description. For example, "1kg of selected coffee, once a month".
 * @property {number} taxableAmount - INT, multiplied by 100 000. Taxable amount of this line item.
 * @property {string} subscriptionOptionTitle - Subscription option title. For example, "Monthly coffee Subscription".
 * @property {GUID} checkoutId - checkout_id
 * @property {string} draftOrderID - draft_order_id
 * @property {number} discountAmount - INT, multiplied by 100 000. both merchant discounts + coupons discounts
 * @return {LogObject<lineItemInOrderAfterDraftParams>} LogObject<lineItemInOrderAfterDraftParams>
 */
export function lineItemInOrderAfterDraft(params) {
    return { evid: 1178, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'orderAfterDraft' event (evid: 1179)
 *
 * Event description: This event is being sent after the draft order is committed -
 * Modified line items- added, changed
 * response object- orderAfterCommit
 * Similar fields from order placed 1158 + deltas from the draft order
 * https://bo.wix.com/wix-docs/rest/drafts/draft-order-updates/commit-draft-order
 *
 * @param {orderAfterDraftParams} params - The parameters for this event
 * @property {string} siteOriginalCurrency - site_original_currency
 * @property {number} globalDiscountAmount - INT , multiplied by 100000
 * @property {string} deliveryByDate - Latest expected delivery date
 * @property {number} numberOfDiscounts - number of all discounts in the order
 * @property {string} numLineItemsPerCatalog - Json - number of line items per catalog - example: {appId1: 3, appId2: 4}
 * @property {number} totalPriceDelta - INT, multiplied by 100 000
 * @property {string} billingCountry - The country of the billing address
 * @property {string} additionalFeesDeltaAction - additional fee id + status - Added / modified / removed
 * @property {string} cartId - cart_id
 * @property {string} externalOrderId - Reference to an order ID from an external system, as defined in channelInfo (e.g., eBay or Amazon)
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING/ PARTIALLY_PAID/PAID
 * @property {string} siteLanguage - site's language in which original values shown
 * @property {string} shippingRegionName - name of shipping region
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} channelType - Sales channel that submitted the order. Supported values: UNSPECIFIED, WEB, POS, EBAY, AMAZON, OTHER_PLATFORM, WIX_APP_STORE, WIX_INVOICES.
 * @property {number} discountPriceDelta - INT, multiplied by 100 000
 * @property {string} billingCity - The city of the billing address
 * @property {number} additionalFeesPriceDelta - INT, multiplied by 100 000
 * @property {number} shippingPriceDelta - shipping_price_delta
 * @property {number} shippingTax - INT, multiplied by 100 000 -  tax on shipping amount
 * @property {string} itemsQuantityPerCatalog - Json - sum of total items quantity per catalog - example: {appId1: 9, appId2: 7}
 * @property {boolean} taxIncludedInPrices - Is tax included in the line items' prices
 * @property {string} lineItemsDeltaAction - lineItemId + action (added / modified)
 * @property {number} balance - Int multiplied by 100,00 Balance = orderTotal - sumOfPayments + sumOfRefunds. **static amount - will be updated in the future.
 * @property {string} shippingInstructions - Instructions for caller, e.g for pickup: "Ensure to come during Opening Hours, and please don't park in disabled-spot"
 * @property {string} attributionSource - Attribution of order. e.g. FB-Ads, invoice. Supported values: UNSPECIFIED, FACEBOOK_ADS.
 * @property {string} shippingCountry - The country of the shipping address
 * @property {number} additionalFeesTax - INT, multiplied by 100 000 -  additional fees tax
 * @property {GUID} appDefId - app_def_id
 * @property {number} totalPrice - INT, multiplied by 100 000
 * @property {string} discountDeltaAction - discount id + status - Added / modified / removed
 * @property {string} shippingTitle - Shipping option title. For example, "USPS Standard Overnight Delivery", "Standard" or "First-Class Package International".
 * @property {number} shippingDiscount - INT, multiplied by 100 000 -  discount on shipping amount
 * @property {string} weightUnit - Measure unit - defaults to site's weight unit. Supported values: UNSPECIFIED_WEIGHT_UNIT, KG, LB.
 * @property {number} taxAmount - INT, multiplied by 100 000
 * @property {string} catalogAppIdsDeltaAction - catalog app id + status - Added / modified / removed
 * @property {string} draftReason - Reason for edit, given by user (optional).
 * @property {string} buyerNote - Buyer note
 * @property {string} shippingType - shipping_type
 * @property {number} discountRulesAmount - INT, multiplied by 100 000 the amount of discount by discount rules in the order.
 * @property {number} numberOfDiscountRules - number of discount rules in the order
 * @property {string} commitSettings - List of action and status - sendNotificationsToBuyer,  sendNotificationsToBusiness, addActivitiesToOrder, sendNotificationsToCustomFulfillers
 * @property {string} contactId - CRM contact ID
 * @property {number} payNow - Int multiplied by 100,000 Minimal amount to pay in order to place the order
 * @property {number} numLineItems - num_line_items
 * @property {string} externalOrderUrl - URL to the order in the external system, as defined in channelInfo (e.g., eBay or Amazon)
 * @property {string} carrierId - App Def Id of external provider which was a source of shipping info
 * @property {number} couponsAmount - INT, multiplied by 100 000. the amount of discount by coupons in the order.
 * @property {string} currency - paid currency
 * @property {string} deliveryTime - est_delivery_time
 * @property {string} distinctNumItemsPerCatalog - Json - sum of total count distinct item_id per catalog - example: {appId1: 2, appId2: 3}
 * @property {number} itemsQuantity - sum of total items quantity
 * @property {number} shippingAmount - INT, multiplied by 100 000
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} checkoutId - checkout_id
 * @property {string} pricePerCatalog - Json - sum of gpv in usd per catalog - example: {appid1: 9.00, appid2: 7.49}
 * @property {string} draftOrderID - draft_order_id
 * @property {string} buyerLanguage - buyer_language
 * @property {number} distinctNumItems - count distinct item_id
 * @property {string} shippingCity - The city of the shipping address
 * @property {number} discountAmount - INT, multiplied by 100 000
 * @property {number} numberOfCoupons - number of coupons in the order
 * @property {string} tag_ids - need to deprecate
 * @property {string} privateTagIds - Tags that require an additional permission in order to access them, normally not given to site members or visitors.
 * @property {string} tagIds - Tags that are exposed to anyone who has access to the labeled entity itself, including site members and visitors.
 * @return {LogObject<orderAfterDraftParams>} LogObject<orderAfterDraftParams>
 */
export function orderAfterDraft(params) {
    return { evid: 1179, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'removeACoupon' event (evid: 118)
 *
 * Event description: Checkout > Remove a coupon.
 *
 * @param {removeACouponParams} params - The parameters for this event
 * @property {string} mobilePosition - Top/Bottom. Null if not mobile device. The place in the checkout on mobile device (not Wix app) where the uou did the action. There are 2 option - on the top of the checkout or on the bottom of the checkout.
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} couponCode - coupon_code
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} owner_id - uuid of site owner
 * @property {boolean} isMember - is_member
 * @property {string} origin - origin
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart/order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart/order
 * @property {string} couponId - coupon_id
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<removeACouponParams>} LogObject<removeACouponParams>
 */
export function removeACoupon(params) {
    return { evid: 118, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'localDeliveryInOrderPlacedSrc130Evid1180' event (evid: 1180)
 *
 * Event description: This event should be sent after an order is placed, after 1158 order placed event if the order was made with local delivery service.
 *
 * @param {localDeliveryInOrderPlacedSrc130Evid1180Params} params - The parameters for this event
 * @property {string} externalId - External id of shipping rule which LocalDeliveryOption is linked to. Most commonly it would be shippingRuleId from WixStores
 * @property {GUID} visitorId - visitor_id
 * @property {string} orderId - order_id
 * @property {string} optionId - Local delivery option Id
 * @property {string} appDefId - app_def_id
 * @property {string} shippingTitle - Shipping option title the UoU saw.
 * @property {boolean} isSchedule - is the selected method is schedule delivery
 * @property {string} areaType - "radius" or "zip code"
 * @return {LogObject<localDeliveryInOrderPlacedSrc130Evid1180Params>} LogObject<localDeliveryInOrderPlacedSrc130Evid1180Params>
 */
export function localDeliveryInOrderPlacedSrc130Evid1180(params) {
    return { evid: 1180, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'orderPaidWithInvoice' event (evid: 1181)
 *
 * Event description: When an order is paid with an invoice.
 *
 * @param {orderPaidWithInvoiceParams} params - The parameters for this event
 * @property {string} paymentId - payment id
 * @property {GUID} orderId - order_id
 * @property {GUID} invoiceId - invoice_guid
 * @property {string} appDefId - appDefId
 * @property {number} amount - INT, multiplied by 100 000
 * @property {string} paymentProvider - payment provider
 * @property {string} currency - currency
 * @property {string} identityType - identityType
 * @property {string} transactionId - cashier's transaction_id
 * @return {LogObject<orderPaidWithInvoiceParams>} LogObject<orderPaidWithInvoiceParams>
 */
export function orderPaidWithInvoice(params) {
    return { evid: 1181, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bulkCreateFulfillment' event (evid: 1182)
 *
 * Event description: Send this event with the response to the bulk action of create fulfillment
 *
 * @param {bulkCreateFulfillmentParams} params - The parameters for this event
 * @property {string} fulfillmentsIdList - List of fulfillment ids that were success
 * @property {string} appDefId - App id that created the bulk
 * @property {number} totalFailures - Number of failures that couldn't be processed.
 * @property {string} identityType - identity_type
 * @property {number} numOrders - Number of orders that fulfilled in the bulk
 * @property {number} numFulfillments - Number of fulfillments in the bulk
 * @return {LogObject<bulkCreateFulfillmentParams>} LogObject<bulkCreateFulfillmentParams>
 */
export function bulkCreateFulfillment(params) {
    return { evid: 1182, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'orderTagsUpdated' event (evid: 1183)
 *
 * Event description: Tag IDs collections associated with the order.
 *
 * @param {orderTagsUpdatedParams} params - The parameters for this event
 * @property {string} tag_ids - need to deprecate
 * @property {string} privateTagIds - Tags that require an additional permission in order to access them, normally not given to site members or visitors.
 * @property {GUID} orderId - order_id
 * @property {GUID} appDefId - From which app did the action occur?
 * @property {string} TagIds - Tags that are exposed to anyone who has access to the labeled entity itself, including site members and visitors.
 * @return {LogObject<orderTagsUpdatedParams>} LogObject<orderTagsUpdatedParams>
 */
export function orderTagsUpdated(params) {
    return { evid: 1183, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'inventoryUpdatedSrc130Evid1184' event (evid: 1184)
 *
 * Event description: When the inventory of an item is being updated - sent from eCom inventory SPI.
 *
 *
 * @param {inventoryUpdatedSrc130Evid1184Params} params - The parameters for this event
 * @property {string} catalog_item_id - ID of the item within the catalog it belongs to.
 * @property {string} catalogAppId - ID of the app providing the catalog.
 * @property {string} options - Additional item details in key:value pairs.  For example products and variants. part of catalog reference field.
 * @property {string} operation - increase/decrease quantity
 * @property {GUID} orderId - order_id
 * @property {string} intentName - possible values:
 * order paid, order placed, order canceled, order refunded, order deltas committed (after edit order), order rejected (order placed, then was pending and rejected at the end).
 * @property {GUID} appId - app_id that implemented the inventory SPI and performed the action
 * @property {GUID} locationId - locationId
 * @property {number} quantity - the number of items increase/decrease
 * @return {LogObject<inventoryUpdatedSrc130Evid1184Params>} LogObject<inventoryUpdatedSrc130Evid1184Params>
 */
export function inventoryUpdatedSrc130Evid1184(params) {
    return { evid: 1184, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'subscriptionsOrchestratorFailureSrc130Evid1185' event (evid: 1185)
 *
 * Event description: Subscriptions Orchestrator Failure - once a subscription order is created for the first time this service is responsible to call ecom-orders and (create order in initialize status) and call to subscription-contracts (create subscription for each subscription) and call to bass-orders (create order in bass system).
 *
 * @param {subscriptionsOrchestratorFailureSrc130Evid1185Params} params - The parameters for this event
 * @property {GUID} subscriptionsOrderId - subscriptionsOrderId
 * @property {GUID} billingSubscriptionsOrderId - billingSubscriptionsOrderId
 * @property {GUID} orderId - orderId
 * @property {GUID} paymentGatewayOrderId - paymentGatewayOrderId
 * @property {GUID} subscriptionContractId - subscriptionContractId
 * @property {GUID} billingSubscriptionContractId - billingSubscriptionContractId
 * @return {LogObject<subscriptionsOrchestratorFailureSrc130Evid1185Params>} LogObject<subscriptionsOrchestratorFailureSrc130Evid1185Params>
 */
export function subscriptionsOrchestratorFailureSrc130Evid1185(params) {
    return { evid: 1185, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'subscriptionContractsFailureSrc130Evid1186' event (evid: 1186)
 *
 * Event description: failure of handling of new subscription billing cycle in subscription-contracts -
 * 1. ecom-orders - create order with reconciled data
 * 2. payments- orchestrator - get payment info
 * 3. ecom-payments - add payments for ecom order
 *
 * @param {subscriptionContractsFailureSrc130Evid1186Params} params - The parameters for this event
 * @property {GUID} billingSubscriptionContractId - billingSubscriptionContractId
 * @property {GUID} subscriptionContractId - subscriptionContractId
 * @property {number} cycleNumber - cycleNumber
 * @property {GUID} paymentTransactionId - paymentTransactionId
 * @property {GUID} billingInvoiceId - billingInvoiceId
 * @property {GUID} orderId - orderId
 * @property {GUID} paymentId - paymentId
 * @return {LogObject<subscriptionContractsFailureSrc130Evid1186Params>} LogObject<subscriptionContractsFailureSrc130Evid1186Params>
 */
export function subscriptionContractsFailureSrc130Evid1186(params) {
    return { evid: 1186, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'couponApplied' event (evid: 119)
 *
 * Event description: Checkout -> Coupon applied.
 *
 * @param {couponAppliedParams} params - The parameters for this event
 * @property {string} mobilePosition - Top/Bottom. Null if not mobile device. The place in the checkout on mobile device (not Wix app) where the uou did the action. There are 2 option - on the top of the checkout or on the bottom of the checkout.
 * @property {string} name - collection_name
 * @property {number} total_long - total_long
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} couponCode - coupon_code
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} owner_id - owner_id
 * @property {boolean} isMember - is_member
 * @property {boolean} isOwner - is_owner
 * @property {string} origin - origin
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {string} type - type
 * @property {GUID} ecomId - ecom_id
 * @property {string} couponId - coupon_id
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase flow id. Note that this field was implemented in January 25
 * @return {LogObject<couponAppliedParams>} LogObject<couponAppliedParams>
 */
export function couponApplied(params) {
    return { evid: 119, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutTemplateCheckoutTemplateCreated' event (evid: 1190)
 *
 * Event description: When a new checkout template is created
 *
 * @param {checkoutTemplateCheckoutTemplateCreatedParams} params - The parameters for this event
 * @property {string} checkoutCustomization - JSON with the customization of the checkout (lock coupon/lock giftcard/
 * @property {string} couponCode - couponCode
 * @property {string} catalogAppId - list of all the catalog app id in the checkout
 * @property {string} checkoutTemplateId - checkout_template_id
 * @property {string} customLineItem - Array with all the parameters of custom line item
 * @property {number} numLineItems - total number of line items
 * @property {number} couponAmount - the amount of the coupon that is set to be in the checkout
 * @property {string} distinctNumItemsPerCatalog - Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}
 * @property {string} templateStatus - active/inactive
 * @property {string} lineItemsPerCatalog - Catalog id, list of items in the templet from this catalog
 * @return {LogObject<checkoutTemplateCheckoutTemplateCreatedParams>} LogObject<checkoutTemplateCheckoutTemplateCreatedParams>
 */
export function checkoutTemplateCheckoutTemplateCreated(params) {
    return { evid: 1190, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutTemplateCheckoutTemplateUpdated' event (evid: 1191)
 *
 * Event description: When a new checkout template is updated
 *
 * @param {checkoutTemplateCheckoutTemplateUpdatedParams} params - The parameters for this event
 * @property {string} checkoutCustomization - JSON with the customization of the checkout (lock coupon/lock giftcard/
 * @property {string} couponCode - couponCode
 * @property {string} catalogAppId - list of all the catalog app id in the checkout
 * @property {string} checkoutTemplateId - checkout_template_id
 * @property {string} customLineItem - Array with all the parameters of custom line item
 * @property {number} numLineItems - total number of line items
 * @property {number} couponAmount - the amount of the coupon that is set to be in the checkout
 * @property {string} distinctNumItemsPerCatalog - Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}
 * @property {string} templateStatus - active/inactive
 * @property {string} lineItemsPerCatalog - Catalog id, list of items in the templet from this catalog
 * @return {LogObject<checkoutTemplateCheckoutTemplateUpdatedParams>} LogObject<checkoutTemplateCheckoutTemplateUpdatedParams>
 */
export function checkoutTemplateCheckoutTemplateUpdated(params) {
    return { evid: 1191, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutTemplateCheckoutTemplateDeleted' event (evid: 1192)
 *
 * Event description: When a new checkout template is deleted
 *
 * @param {checkoutTemplateCheckoutTemplateDeletedParams} params - The parameters for this event
 * @property {string} checkoutTemplateId - checkout_template_id
 * @return {LogObject<checkoutTemplateCheckoutTemplateDeletedParams>} LogObject<checkoutTemplateCheckoutTemplateDeletedParams>
 */
export function checkoutTemplateCheckoutTemplateDeleted(params) {
    return { evid: 1192, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutTemplateCheckoutCreatedFromCheckoutTemplate' event (evid: 1193)
 *
 * Event description: when a Checkout is created from a link after a uou clicks on a link
 *
 * @param {checkoutTemplateCheckoutCreatedFromCheckoutTemplateParams} params - The parameters for this event
 * @property {string} checkoutCustomization - JSON with the customization of the checkout (lock coupon/lock giftcard/
 * @property {string} couponCode - couponCode
 * @property {string} catalogAppId - list of all the catalog app id in the checkout
 * @property {string} checkoutTemplateId - checkout_template_id
 * @property {string} customLineItem - Array with all the parameters of custom line item
 * @property {number} numLineItems - total number of line items
 * @property {number} couponAmount - the amount of the coupon that is set to be in the checkout
 * @property {string} distinctNumItemsPerCatalog - Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}
 * @property {GUID} checkoutId - checkout_id
 * @property {string} lineItemsPerCatalog - Catalog id, list of items in the templet from this catalog
 * @return {LogObject<checkoutTemplateCheckoutCreatedFromCheckoutTemplateParams>} LogObject<checkoutTemplateCheckoutCreatedFromCheckoutTemplateParams>
 */
export function checkoutTemplateCheckoutCreatedFromCheckoutTemplate(params) {
    return { evid: 1193, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'siteCallForFeApiMethodSrc130Evid12' event (evid: 12)
 *
 * Event description: The event is sent when the site calls a FEM APIs
 *
 * @param {siteCallForFeApiMethodSrc130Evid12Params} params - The parameters for this event
 * @property {string} methodName - The name of the method that was in use - for example openSideCart
 * @property {string} msid - The msid of the site that made the call
 * @property {string} methodParams - Parameters send
 * @property {string} moduleName - The module name of the entity - edm name
 * @return {LogObject<siteCallForFeApiMethodSrc130Evid12Params>} LogObject<siteCallForFeApiMethodSrc130Evid12Params>
 */
export function siteCallForFeApiMethodSrc130Evid12(params) {
    return { evid: 12, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickOnContinueShoppingFromCart' event (evid: 120)
 *
 * Event description: Click on continue shopping from checkout/cart
 *
 * @param {clickOnContinueShoppingFromCartParams} params - The parameters for this event
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} origin - from cart/checkout page
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} additionalFeesPrice - number of all additional fees in the order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase flow id
 * Note that this field was implemented in January 25
 * @return {LogObject<clickOnContinueShoppingFromCartParams>} LogObject<clickOnContinueShoppingFromCartParams>
 */
export function clickOnContinueShoppingFromCart(params) {
    return { evid: 120, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'tipsTipsSettingSaved' event (evid: 1200)
 *
 * Event description: When a tip setting is being saved
 *
 * @param {tipsTipsSettingSavedParams} params - The parameters for this event
 * @property {boolean} hasTipByDefault - True when default is set as one of options
 * @property {boolean} isCustomTip - True when allowed custom tip
 * @property {string} optionType - Percentage/Fixed amount - The type of the saved calculation type
 * @property {boolean} isCheckoutEnabled - True when enabled tipping options on checkout, o.w False
 * @property {number} numOfOptions - Number of tipping options without the custom tip amount.
 * @property {string} tipsOptions - Json of the saved tipping options: {} - custom field {1:5, 2:10} default: {1:5}
 * @return {LogObject<tipsTipsSettingSavedParams>} LogObject<tipsTipsSettingSavedParams>
 */
export function tipsTipsSettingSaved(params) {
    return { evid: 1200, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickOnAddNoteToSellerSf' event (evid: 121)
 *
 * Event description: buyer clicks on 'add note to seller' in cart page. since june 2019 also sent from OA StoreFront (with origin)
 *
 * @param {clickOnAddNoteToSellerSfParams} params - The parameters for this event
 * @property {GUID} cartId - cart id
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)v
 * @property {string} origin - OA StoreFront
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<clickOnAddNoteToSellerSfParams>} LogObject<clickOnAddNoteToSellerSfParams>
 */
export function clickOnAddNoteToSellerSf(params) {
    return { evid: 121, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'saveNoteToSellerSf' event (evid: 122)
 *
 * Event description: buyer clicks on 'done' in add note to seller field in cart page. since june 2019 also sent from OA StoreFront (with origin)
 *
 * @param {saveNoteToSellerSfParams} params - The parameters for this event
 * @property {GUID} cartId - cart id
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {string} origin - origin
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} is_empty - is text field empty
 * @return {LogObject<saveNoteToSellerSfParams>} LogObject<saveNoteToSellerSfParams>
 */
export function saveNoteToSellerSf(params) {
    return { evid: 122, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deleteNoteToSellerSf' event (evid: 123)
 *
 * Event description: buyer clicks on 'delete note to seller' in cart page
 *
 * @param {deleteNoteToSellerSfParams} params - The parameters for this event
 * @property {GUID} cartId - cart id
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<deleteNoteToSellerSfParams>} LogObject<deleteNoteToSellerSfParams>
 */
export function deleteNoteToSellerSf(params) {
    return { evid: 123, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'viewCartPageSf' event (evid: 124)
 *
 * Event description: view cart page. since june 2019 also for OneApp Store front
 * Note that it is sending also from editor-when the user is viewing the cart page (view_mode=Editor).
 * Since June/July 2024 it will be also for sideCart.
 * when the UoU clicks on the cart without any item the event will be sent with cart_id = null
 *
 * @param {viewCartPageSfParams} params - The parameters for this event
 * @property {string} validationMessage - JSON with the validation that appear in the cartwhile loaded. {type - warning/error, is_line_item - true/false, message - what the uou saw,name-DELIVERY/ OTHER_DEFAULT / LINE_ITEM_DEFAULT}
 * @property {string} viewMode - editor / site / preview
 * @property {boolean} isMembersInstalled - true if members app installed on site, false otherwise
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} visitorId - visitorId
 * @property {GUID} cartId - cart id
 * @property {number} itemsCount - number of items in the cart
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} uuid - uuid
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected (and displaying in cart)
 * @property {boolean} isContinueShopping - show continue shopping link in cart
 * @property {string} paymet_providers - array of payment providers connected to the store
 * @property {boolean} isFullWidth - is the full width setting in the cart on / off
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {boolean} is_promo_code - show/hide promo code (coupon) in the cart & checkout
 * @property {boolean} is_member - true is the visitor signed in as a member, false otherwise
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor at the first time
 * @property {string} origin - add to cart / mini cart / cart widget / checkout / 'eWallet redirect - cancel'
 * @property {string} checkoutType - in viewer / out of viewer
 * @property {string} validationSpi - jason with the validation that appear in the cart while loaded. {type - warning/error, is_line_item - true/false, message - what the uou saw}
 * @property {boolean} isShippingCalculated - is the shipping estimation is calculated
 * @property {boolean} isTaxCosts - show tax costs in cart
 * @property {number} lineItemsCount - number of line items in cart
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
 * @property {boolean} is_note - show add a note to seller in cart
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
 * @property {boolean} isDeliveryRates - show delivery rates in cart
 * @property {boolean} isPickupAvailable - is pickup available
 * @property {GUID} checkoutId - checkout_id
 * @property {string} shippingReason - the reason why the shipping is not calculated (unknown = POS/digital cart)
 * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
 * @property {GUID} siteMemberId - member guid
 * @property {boolean} savePaymentMethod - save payment method on specific line items (for card tokenization use)
 * @property {string} isCheckoutButtonPresented - Whether the checkout button was presented in the side cart (relevant for classic editor sites only)
 * @property {string} isViewCartButtonPresented - Whether the checkout button was presented in the side cart (relevant for classic editor sites only)
 * @property {string} cartLayout - cart/sideCart.
 * (new field that was added in June 2024. If its null before this date it means that its 'cart')
 * @return {LogObject<viewCartPageSfParams>} LogObject<viewCartPageSfParams>
 */
export function viewCartPageSf(params) {
    return { evid: 124, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'updateClickedInSelectYourShippingDestinationPopupSf' event (evid: 125)
 *
 * Event description: When a visitor clicks on one of the options in the shipping method dropdown on the cart page
 *
 * @param {updateClickedInSelectYourShippingDestinationPopupSfParams} params - The parameters for this event
 * @property {GUID} cartId - cart id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {boolean} hasZipCode - true if the destination was saved with zip code, else false
 * @property {string} shippingDestinationState - shipping destination state
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
 * @property {string} shippingDestinationCountry - shipping destination country
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<updateClickedInSelectYourShippingDestinationPopupSfParams>} LogObject<updateClickedInSelectYourShippingDestinationPopupSfParams>
 */
export function updateClickedInSelectYourShippingDestinationPopupSf(params) {
    return { evid: 125, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cancelClickedInSelectYourShippingDestinationPopupSf' event (evid: 126)
 *
 * Event description: in the cart page, when a user want to change is shipping address, to re calculate shipping cost estimation- cancel or x clicked
 *
 * @param {cancelClickedInSelectYourShippingDestinationPopupSfParams} params - The parameters for this event
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<cancelClickedInSelectYourShippingDestinationPopupSfParams>} LogObject<cancelClickedInSelectYourShippingDestinationPopupSfParams>
 */
export function cancelClickedInSelectYourShippingDestinationPopupSf(params) {
    return { evid: 126, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ordersViewOrderHistoryPageSf' event (evid: 127)
 *
 * Event description: view order history page (when it is with orders or without)
 *
 * @param {ordersViewOrderHistoryPageSfParams} params - The parameters for this event
 * @property {number} itemsCount - number of orders in the page (for without orders it will be 0)
 * @property {string} appName - app_name
 * @property {string} catalogAppId - list of all catalog app ids
 * @property {string} origin - origin
 * @property {GUID} site_member_id - member id
 * @property {string} contact_id - contact_id
 * @return {LogObject<ordersViewOrderHistoryPageSfParams>} LogObject<ordersViewOrderHistoryPageSfParams>
 */
export function ordersViewOrderHistoryPageSf(params) {
    return { evid: 127, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ordersViewOrderDetailsPageSf' event (evid: 128)
 *
 * Event description: view order details in order history page
 *
 * @param {ordersViewOrderDetailsPageSfParams} params - The parameters for this event
 * @property {number} itemsCount - number of items in the order
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} orderId - orderId
 * @property {string} catalogAppId - list of all catalog app ids
 * @property {string} origin - order_page
 * @property {GUID} site_member_id - member id
 * @property {string} contact_id - contact_id
 * @return {LogObject<ordersViewOrderDetailsPageSfParams>} LogObject<ordersViewOrderDetailsPageSfParams>
 */
export function ordersViewOrderDetailsPageSf(params) {
    return { evid: 128, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ordersClickInOrderHistoryPageSf' event (evid: 129)
 *
 * Event description: UoU clicks that are coming from the order_history page
 *
 * @param {ordersClickInOrderHistoryPageSfParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} orderId - orderId
 * @property {string} click_type - go_shopping / track_order / download / view_invoice
 * @property {string} catalogAppId - list of all catalog app ids
 * @property {string} origin - order_history_page / order_details_page
 * @property {string} productId - only for click on "Track item" in order details page
 * @property {GUID} site_member_id - member id
 * @property {string} contact_id - contact_id
 * @return {LogObject<ordersClickInOrderHistoryPageSfParams>} LogObject<ordersClickInOrderHistoryPageSfParams>
 */
export function ordersClickInOrderHistoryPageSf(params) {
    return { evid: 129, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickToViewCartPage' event (evid: 130)
 *
 * Event description: click to view cart page. since june 2019 also for OneApp Store front
 *
 * @param {clickToViewCartPageParams} params - The parameters for this event
 * @property {string} viewMode - view_mode
 * @property {GUID} cartId - cart_id
 * @property {number} itemsCount - count
 * @property {string} cartType - cart_type
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {boolean} isNavigateCart - is_navigate_cart
 * @property {GUID} owner_id - owner_id
 * @property {string} origin - origin
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase flow id
 * @return {LogObject<clickToViewCartPageParams>} LogObject<clickToViewCartPageParams>
 */
export function clickToViewCartPage(params) {
    return { evid: 130, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileProfileCreated' event (evid: 1301)
 *
 * Event description: When delivery profile is created
 *
 * @param {deliveryProfileProfileCreatedParams} params - The parameters for this event
 * @property {string} name - Delivery profile name
 * @property {string} deliveryProfileId - Delivery profile id
 * @property {string} appDefId - App id that made tha action (correct since 09.08.23)
 * @return {LogObject<deliveryProfileProfileCreatedParams>} LogObject<deliveryProfileProfileCreatedParams>
 */
export function deliveryProfileProfileCreated(params) {
    return { evid: 1301, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileProfileUpdate' event (evid: 1302)
 *
 * Event description: When delivery profile is updated
 *
 * @param {deliveryProfileProfileUpdateParams} params - The parameters for this event
 * @property {string} name - Delivery profile name
 * @property {string} deliveryProfileId - Delivery profile id
 * @property {string} appDefId - App id that made tha action (correct since 09.08.23)
 * @return {LogObject<deliveryProfileProfileUpdateParams>} LogObject<deliveryProfileProfileUpdateParams>
 */
export function deliveryProfileProfileUpdate(params) {
    return { evid: 1302, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileProfileDeleted' event (evid: 1303)
 *
 * Event description: When delivery profile is deleted
 *
 * @param {deliveryProfileProfileDeletedParams} params - The parameters for this event
 * @property {string} deliveryProfileId - Delivery profile id
 * @property {string} appDefId - App id that made tha action(correct since 09.08.23)
 * @return {LogObject<deliveryProfileProfileDeletedParams>} LogObject<deliveryProfileProfileDeletedParams>
 */
export function deliveryProfileProfileDeleted(params) {
    return { evid: 1303, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileDestinationConfigurationIsCreated' event (evid: 1304)
 *
 * Event description: When delivery destination configuration is is created
 *
 * @param {deliveryProfileDestinationConfigurationIsCreatedParams} params - The parameters for this event
 * @property {string} name - destenation configuration name
 * @property {string} deliveryProfileId - Delivery profile id that is related to the destenation configuration
 * @property {string} deliveryDestinations - a list of arrays for the destinations (country code,regions)
 * or an enum with value None - means there is no need to use this field (not suppose to be reached)
 * @property {string} destinationConfigId - Vertical which created the destenation configuration (stores app id, bookings app_id, ...) .
 * @property {string} appDefId - App id that made the action
 * @property {string} providersIds - List of providers
 * @property {string} complementaryDestinations - REST_OF_THE_WORLD - means that this configuration is complementary to all of the others configs in under the current ProfileId
 * @property {boolean} isEnabled - Does the destenation configuration is enabled or not
 * @return {LogObject<deliveryProfileDestinationConfigurationIsCreatedParams>} LogObject<deliveryProfileDestinationConfigurationIsCreatedParams>
 */
export function deliveryProfileDestinationConfigurationIsCreated(params) {
    return { evid: 1304, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileDestinationConfigurationIsUpdated' event (evid: 1305)
 *
 * Event description: When delivery destination configuration is updated
 *
 * @param {deliveryProfileDestinationConfigurationIsUpdatedParams} params - The parameters for this event
 * @property {string} name - destenation configuration name
 * @property {string} deliveryProfileId - Delivery profile id that is related to the destenation configuration
 * @property {string} deliveryDestinations - a list of arrays for the destinations (country code,regions)  or an enum with 2 values: 1. None - means there is no need to use this field (not suppose to be reached) 2. REST_OF_THE_WORLD - means that this configuration is complementary to all of the others configs in under the current ProfileId
 * @property {string} destinationConfigId - Vertical which created the destenation configuration (stores app id, bookings app_id, ...) .
 * @property {string} appDefId - App id that made the action
 * @property {string} providersIds - List of providers
 * @property {string} complementaryDestinations - REST_OF_THE_WORLD - means that this configuration is complementary to all of the others configs in under the current ProfileId
 * @property {boolean} isEnabled - Does the destenation configuration is enabled or not
 * @return {LogObject<deliveryProfileDestinationConfigurationIsUpdatedParams>} LogObject<deliveryProfileDestinationConfigurationIsUpdatedParams>
 */
export function deliveryProfileDestinationConfigurationIsUpdated(params) {
    return { evid: 1305, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileDestinationConfigurationIsDeleted' event (evid: 1306)
 *
 * Event description: When delivery destination configuration is deleted
 *
 * @param {deliveryProfileDestinationConfigurationIsDeletedParams} params - The parameters for this event
 * @property {string} destinationConfigId - Vertical which created the destenation configuration (stores app id, bookings app_id, ...) .
 * @property {string} appDefId - App id that made the action
 * @return {LogObject<deliveryProfileDestinationConfigurationIsDeletedParams>} LogObject<deliveryProfileDestinationConfigurationIsDeletedParams>
 */
export function deliveryProfileDestinationConfigurationIsDeleted(params) {
    return { evid: 1306, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cartSideCartErrorPresentedInCartSideCartSrc130Evid131' event (evid: 131)
 *
 * Event description: When an error message is showing up in cart/side cart
 *
 *
 * @param {cartSideCartErrorPresentedInCartSideCartSrc130Evid131Params} params - The parameters for this event
 * @property {string} errorMessage - Why the error appeared
 * @property {string} origin - cart/side cart
 * @return {LogObject<cartSideCartErrorPresentedInCartSideCartSrc130Evid131Params>} LogObject<cartSideCartErrorPresentedInCartSideCartSrc130Evid131Params>
 */
export function cartSideCartErrorPresentedInCartSideCartSrc130Evid131(params) {
    return { evid: 131, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickOnAdditionalActionsInProfilePageSrc130Evid132' event (evid: 132)
 *
 * Event description: when clicking advanced actions (three dots) in the profiles page
 *
 * @param {deliveryProfileClickOnAdditionalActionsInProfilePageSrc130Evid132Params} params - The parameters for this event
 * @return {LogObject<deliveryProfileClickOnAdditionalActionsInProfilePageSrc130Evid132Params>} LogObject<deliveryProfileClickOnAdditionalActionsInProfilePageSrc130Evid132Params>
 */
export function deliveryProfileClickOnAdditionalActionsInProfilePageSrc130Evid132(params) {
    return { evid: 132, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickOnManageWithoutProfilesSrc130Evid133' event (evid: 133)
 *
 * Event description: when clicking manage without profiles (roll back to no profiles).
 *
 * @param {deliveryProfileClickOnManageWithoutProfilesSrc130Evid133Params} params - The parameters for this event
 * @return {LogObject<deliveryProfileClickOnManageWithoutProfilesSrc130Evid133Params>} LogObject<deliveryProfileClickOnManageWithoutProfilesSrc130Evid133Params>
 */
export function deliveryProfileClickOnManageWithoutProfilesSrc130Evid133(params) {
    return { evid: 133, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileSharedConfigurationApplyModalAppearsSrc130Evid137' event (evid: 137)
 *
 * Event description: When apply changes modal appears
 *
 * @param {deliveryProfileSharedConfigurationApplyModalAppearsSrc130Evid137Params} params - The parameters for this event
 * @property {string} profileId - profile id
 * @property {string} deliveryRegionId - Delivery region id
 * @property {string} carrierId - Carrier id that the modal was opened to
 * @property {number} numberOfExistingCarriers - No. of existing carriers presented on the screen
 * @property {string} CarrierName - existing pickup/existing local  delivery
 * @return {LogObject<deliveryProfileSharedConfigurationApplyModalAppearsSrc130Evid137Params>} LogObject<deliveryProfileSharedConfigurationApplyModalAppearsSrc130Evid137Params>
 */
export function deliveryProfileSharedConfigurationApplyModalAppearsSrc130Evid137(params) {
    return { evid: 137, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileSharedConfigurationApplyModalActionSrc130Evid138' event (evid: 138)
 *
 * Event description: When apply changes modal appears
 *
 * @param {deliveryProfileSharedConfigurationApplyModalActionSrc130Evid138Params} params - The parameters for this event
 * @property {string} profileId - profile id
 * @property {string} deliveryRegionId - Delivery region id
 * @property {string} carrierId - Carrier id that the modal was opened to
 * @property {number} numberOfExistingCarriers - No. of existing carriers presented on the screen
 * @property {string} action - Action in modal:  close/ apply / exit
 * @property {string} CarrierName - existing pickup/existing local  delivery
 * @return {LogObject<deliveryProfileSharedConfigurationApplyModalActionSrc130Evid138Params>} LogObject<deliveryProfileSharedConfigurationApplyModalActionSrc130Evid138Params>
 */
export function deliveryProfileSharedConfigurationApplyModalActionSrc130Evid138(params) {
    return { evid: 138, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'draftOrderAddDeliveryMethodSrc130Evid14' event (evid: 14)
 *
 * Event description: When the user clicks on “Save” in the edit delivery method modal
 *
 * @param {draftOrderAddDeliveryMethodSrc130Evid14Params} params - The parameters for this event
 * @property {string} name - Delivery method name
 * @property {string} orderId - order_id
 * @property {number} amount - *100000 fee amount
 * @property {string} draftOrderID - draft_order_id
 * @property {string} currency - currency
 * @property {string} deliveryOption - current / don't charge / select-available / custom_rate
 * @property {string} deliveryType - pickup / shipping
 * @property {boolean} hasCustomScheduling - true/ false
 * @return {LogObject<draftOrderAddDeliveryMethodSrc130Evid14Params>} LogObject<draftOrderAddDeliveryMethodSrc130Evid14Params>
 */
export function draftOrderAddDeliveryMethodSrc130Evid14(params) {
    return { evid: 14, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'refundClickOnCtaInRefundPageSrc130Evid15' event (evid: 15)
 *
 * Event description: When the user clicks on CTA in the items sections/ shipping and fees/ refund options
 *
 * @param {refundClickOnCtaInRefundPageSrc130Evid15Params} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalogAppId
 * @property {string} catalogItemId - catalog_item_id
 * @property {string} action - choose product / increase quantity/ decrease quantity / update inventory/ shipping/ fees/ send confirmation mail/ reason for refund/ learn more/ payment amount
 * @property {string} sectionName - items sections/ shipping and fees/ refund options
 * @property {number} amount - ee/shipping/payment amount entered by user
 * @property {string} currency - currency amount
 * @property {string} reason - reason for refund - null if action <> resaon_for_refund
 * @return {LogObject<refundClickOnCtaInRefundPageSrc130Evid15Params>} LogObject<refundClickOnCtaInRefundPageSrc130Evid15Params>
 */
export function refundClickOnCtaInRefundPageSrc130Evid15(params) {
    return { evid: 15, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'validationspiRequest' event (evid: 1501)
 *
 * Event description: When a request was sent to the implementer
 *
 * @param {validationspiRequestParams} params - The parameters for this event
 * @property {string} numLineItemsPerCatalog - Json - number of line items per catalog - example: {appId1: 3, appId2: 4}
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} catalogAppId - List of catalog app id's to identify between verticals
 * @property {string} itemsQuantityPerCatalog - Json - sum of total items quantity per catalog - example: {appId1: 9, appId2: 7}
 * @property {string} appDefId - app_def_id
 * @property {string} entityType - Currently 24/4 - Cart / Checkout
 * @property {number} numLineItems - sum of total line items
 * @property {number} itemsQuantity - sum of total items quantity
 * @property {GUID} implementerId - The ID of the Implementer the request is address to
 * @property {GUID} ecomId - ecom_id
 * @return {LogObject<validationspiRequestParams>} LogObject<validationspiRequestParams>
 */
export function validationspiRequest(params) {
    return { evid: 1501, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'copyOfValidationspiResponse' event (evid: 1503)
 *
 * Event description: When a response was sent to the host after the request
 *
 * @param {copyOfValidationspiResponseParams} params - The parameters for this event
 * @property {string} numLineItemsPerCatalog - Json - number of line items per catalog - example: {appId1: 3, appId2: 4}
 * @property {string} purchaseFlowId - purchase_flow_id (ecom id)
 * @property {string} catalogAppId - List of catalog app id's to identify between verticals
 * @property {string} itemsQuantityPerCatalog - Json - sum of total items quantity per catalog - example: {appId1: 9, appId2: 7}
 * @property {string} appDefId - app_def_id
 * @property {string} entityType - Currently 24/4 - Cart / Checkout
 * @property {number} numLineItems - sum of total line items
 * @property {number} itemsQuantity - sum of total items quantity
 * @property {string} violations - Json - could be more than 1 violation  - {Severity - warning / error, Violation trigger (optional), Description (optional)}  For example : {Warning, quantity, no. of shirts}
 * @property {GUID} implementerId - The ID of the Implementer the request is address to
 * @property {GUID} ecomId - ecom_id
 * @return {LogObject<copyOfValidationspiResponseParams>} LogObject<copyOfValidationspiResponseParams>
 */
export function copyOfValidationspiResponse(params) {
    return { evid: 1503, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'paymentSettingsSpiRequest' event (evid: 1510)
 *
 * Event description: SPI request to check the payment setting - does the payment need to go through the 3d secure or not
 *
 * @param {paymentSettingsSpiRequestParams} params - The parameters for this event
 * @property {string} purchaseFlowId - purchase_flow_id (ecom_id, optional)
 * @property {string} orderId - order_id
 * @property {string} implementerId - The ID of the Implementer the request is address to
 * @property {string} checkoutId - checkout id
 * @return {LogObject<paymentSettingsSpiRequestParams>} LogObject<paymentSettingsSpiRequestParams>
 */
export function paymentSettingsSpiRequest(params) {
    return { evid: 1510, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'paymentSettingsSpiResponse' event (evid: 1511)
 *
 * Event description: The SPI returns multiple payment settings - does the payment need to go through the 3d secure or not (the request is sent after a uou create an order, and before the order is approved)
 *
 * @param {paymentSettingsSpiResponseParams} params - The parameters for this event
 * @property {string} purchaseFlowId - purchaseFlowId (optional)
 * @property {string} orderId - order_id
 * @property {boolean} requires3dSecure - true / false
 * @property {string} implementerId - The ID of the Implementer the request is address to
 * @property {string} checkoutId - checkout_id
 * @return {LogObject<paymentSettingsSpiResponseParams>} LogObject<paymentSettingsSpiResponseParams>
 */
export function paymentSettingsSpiResponse(params) {
    return { evid: 1511, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxAvalaraAccountCreatedSuccessfully' event (evid: 1603)
 *
 * Event description: When Avalara account was created successfully (onboarding)
 *
 * @param {taxAvalaraAccountCreatedSuccessfullyParams} params - The parameters for this event
 * @property {GUID} uuid - uuid
 * @property {string} accountId - account_id
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {string} identityType - identity_type
 * @return {LogObject<taxAvalaraAccountCreatedSuccessfullyParams>} LogObject<taxAvalaraAccountCreatedSuccessfullyParams>
 */
export function taxAvalaraAccountCreatedSuccessfully(params) {
    return { evid: 1603, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bisStopCollectingRequest' event (evid: 1604)
 *
 * Event description: Stop collecting back in stock request
 *
 * @param {bisStopCollectingRequestParams} params - The parameters for this event
 * @property {GUID} instanceId - the instance id of the back in stock app
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {GUID} appId - app_id
 * @property {string} identityType - identity_type
 * @return {LogObject<bisStopCollectingRequestParams>} LogObject<bisStopCollectingRequestParams>
 */
export function bisStopCollectingRequest(params) {
    return { evid: 1604, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bisStartCollectingRequest' event (evid: 1605)
 *
 * Event description: Start collecting back in stock request
 *
 * @param {bisStartCollectingRequestParams} params - The parameters for this event
 * @property {GUID} instanceId - the instance id of the back in stock app
 * @property {string} user_agent - user_agent
 * @property {string} appDefId - app_def_id
 * @property {GUID} appId - app_id
 * @property {string} identityType - identity_type
 * @return {LogObject<bisStartCollectingRequestParams>} LogObject<bisStartCollectingRequestParams>
 */
export function bisStartCollectingRequest(params) {
    return { evid: 1605, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bisRequestCreated' event (evid: 1606)
 *
 * Event description: when a back in stock request is created (triggered by UoU)
 *
 * @param {bisRequestCreatedParams} params - The parameters for this event
 * @property {GUID} instanceId - the instance id of the back in stock app
 * @property {string} catalogAppId - catalog App id
 * @property {string} user_agent - user_agent
 * @property {GUID} appDefId - the app Id of the app that created the request. (BIS/VELO)
 * @property {string} catalogItemId - The guid of the requested item (product_guid / service_id..)
 * @property {string} options - map of strings of the options chosen in the requested item
 * @property {GUID} contactId - The contact id of the contact created the request
 * @property {GUID} backInStockRequestId - unique ID of the request
 * @property {GUID} appId - The app id of the requested item catalog
 * @property {string} identityType - identity_type
 * @return {LogObject<bisRequestCreatedParams>} LogObject<bisRequestCreatedParams>
 */
export function bisRequestCreated(params) {
    return { evid: 1606, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxCreateTaxGroup' event (evid: 1607)
 *
 * Event description: When a user creates a new group
 *
 * @param {taxCreateTaxGroupParams} params - The parameters for this event
 * @property {string} taxGroupId - tax_group_id
 * @property {string} taxGroupName - tax group name
 * @return {LogObject<taxCreateTaxGroupParams>} LogObject<taxCreateTaxGroupParams>
 */
export function taxCreateTaxGroup(params) {
    return { evid: 1607, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bisRequestsAreReadyToBeReported' event (evid: 1608)
 *
 * Event description: Requests are ready to be reported when Item is back in stock.
 * It checks how many requests this item has and report it to automations if the automation is on / contact the you manually.
 *
 * @param {bisRequestsAreReadyToBeReportedParams} params - The parameters for this event
 * @property {GUID} instanceId - the instance id of the back in stock app
 * @property {number} numberOfRequests - number of requests for the same item ready to be reported to trigger automation/ contact the you manually
 * @property {string} user_agent - user_agent
 * @property {GUID} appDefId - the app Id of the app that created the request. (BIS/VELO)
 * @property {string} catalogItemId - The guid of the requested item (product_guid / service_id..)
 * @property {string} options - map of strings of the options chosen in the requested item
 * @property {GUID} appId - The app id of the requested item catalog
 * @property {string} identityType - identity_type
 * @return {LogObject<bisRequestsAreReadyToBeReportedParams>} LogObject<bisRequestsAreReadyToBeReportedParams>
 */
export function bisRequestsAreReadyToBeReported(params) {
    return { evid: 1608, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bisRequestChangedStatus' event (evid: 1609)
 *
 * Event description: When a back in stock request status is being changed.
 * In case of failure, it will send an event no matter if the status was fail before or not.
 *
 * @param {bisRequestChangedStatusParams} params - The parameters for this event
 * @property {GUID} instanceId - the instance id of the back in stock app
 * @property {string} statusText - received /done/ failed
 * @property {string} user_agent - user_agent
 * @property {GUID} appDefId - the app Id of the app that created the request. (BIS/VELO)
 * @property {string} catalogItemId - The guid of the requested item (product_guid / service_id..)
 * @property {string} options - map of strings of the options chosen in the requested item
 * @property {GUID} contactId - The contact id of the contact created the request
 * @property {GUID} backInStockRequestId - unique ID of the request
 * @property {GUID} appId - The app id of the requested item catalog
 * @property {string} identityType - identity_type
 * @return {LogObject<bisRequestChangedStatusParams>} LogObject<bisRequestChangedStatusParams>
 */
export function bisRequestChangedStatus(params) {
    return { evid: 1609, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'shippingAddressSet' event (evid: 161)
 *
 * Event description: Shipping address set. since june 2019 is also sentt from OneApp (origin =OA StoreFront)
 *
 * @param {shippingAddressSetParams} params - The parameters for this event
 * @property {boolean} isChecked - is billing address the same as delivery address
 * @property {boolean} isFormValid - is form valid (all mandatory fields are compatible)
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} owner_id - uuid of site owner
 * @property {boolean} isOwner - true if visitor is the site owner
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {string} item_type - List of distinct checkout.lineItems.itemType
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase flow id. Note that this field was implemented in January 25
 * @return {LogObject<shippingAddressSetParams>} LogObject<shippingAddressSetParams>
 */
export function shippingAddressSet(params) {
    return { evid: 161, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bisBackInStockRequestTriggersAutomation' event (evid: 1610)
 *
 * Event description: When an item is back in stock and has a request and automation is enabled - The service trigger an automation (sent only after a positive response from automation)
 *
 * @param {bisBackInStockRequestTriggersAutomationParams} params - The parameters for this event
 * @property {GUID} instanceId - the instance id of the back in stock app
 * @property {string} user_agent - user_agent
 * @property {GUID} appDefId - the app Id of the app that created the request. (BIS/VELO)
 * @property {string} catalogItemId - The guid of the requested item (product_guid / service_id..)
 * @property {string} options - map of strings of the options chosen in the requested item
 * @property {GUID} contactId - The contact id of the contact created the request
 * @property {GUID} backInStockRequestId - unique ID of the request
 * @property {GUID} appId - The app id of the requested item catalog
 * @property {string} identityType - identity_type
 * @return {LogObject<bisBackInStockRequestTriggersAutomationParams>} LogObject<bisBackInStockRequestTriggersAutomationParams>
 */
export function bisBackInStockRequestTriggersAutomation(params) {
    return { evid: 1610, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxUpdateTaxGroup' event (evid: 1611)
 *
 * Event description: When a user creates a new group
 *
 * @param {taxUpdateTaxGroupParams} params - The parameters for this event
 * @property {string} taxGroupId - tax_group_id
 * @property {string} taxGroupName - tag group name
 * @return {LogObject<taxUpdateTaxGroupParams>} LogObject<taxUpdateTaxGroupParams>
 */
export function taxUpdateTaxGroup(params) {
    return { evid: 1611, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxDeleteTaxGroup' event (evid: 1612)
 *
 * Event description: When a user deletes a new group
 *
 * @param {taxDeleteTaxGroupParams} params - The parameters for this event
 * @property {string} taxGroupId - tax_group_id
 * @return {LogObject<taxDeleteTaxGroupParams>} LogObject<taxDeleteTaxGroupParams>
 */
export function taxDeleteTaxGroup(params) {
    return { evid: 1612, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxCreateManualCalculatorMapping' event (evid: 1613)
 *
 * Event description: When a mapping is created
 *
 * @param {taxCreateManualCalculatorMappingParams} params - The parameters for this event
 * @property {GUID} taxMappingId - tax_mapping_id
 * @property {string} description - description
 * @property {string} taxName - The name of the tax against which this tax amount was calculated, for example "STATE TAX" for "State Tax" or "GST" for "Goods and Services Tax".
 * @property {number} taxRate - Rate multiple 100000
 * @property {string} taxType - The type of tax that was calculated. Depends on the jurisdiction's tax laws.
 * @property {string} taxGroupId - tax_group_id - sends Stores catalog_app_id for products, Bookings for services
 * @property {GUID} taxRegionId - tax region id
 * @property {string} taxGroupMappingId - tax_group_mapping_id
 * @property {string} jurisdictionType - The type of the jurisdiction in which this tax detail applies. (Country,State,County,City,Special)
 * @property {string} taxBreakdowns - Jason of tax name and tax rate. (Tax rate is Rate multiple 100000)
 * @property {string} jurisdictionName - The name of the jurisdiction to which this tax detail applies.
 * @return {LogObject<taxCreateManualCalculatorMappingParams>} LogObject<taxCreateManualCalculatorMappingParams>
 */
export function taxCreateManualCalculatorMapping(params) {
    return { evid: 1613, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxUpdateManualCalculatorMapping' event (evid: 1614)
 *
 * Event description: When a mapping is updated
 *
 * @param {taxUpdateManualCalculatorMappingParams} params - The parameters for this event
 * @property {GUID} taxMappingId - tax_mapping_id
 * @property {string} description - description
 * @property {string} taxName - The name of the tax against which this tax amount was calculated, for example "STATE TAX" for "State Tax" or "GST" for "Goods and Services Tax".
 * @property {number} taxRate - Rate multiple 100000
 * @property {string} taxType - The type of tax that was calculated. Depends on the jurisdiction's tax laws.
 * @property {string} taxGroupId - tax_group_id
 * @property {GUID} taxRegionId - tax_region_id
 * @property {string} taxGroupMappingId - tax_group_mapping_id
 * @property {string} jurisdictionType - The type of the jurisdiction in which this tax detail applies. (Country,State,County,City,Special)
 * @property {string} jurisdictionName - The name of the jurisdiction to which this tax detail applies.
 * @return {LogObject<taxUpdateManualCalculatorMappingParams>} LogObject<taxUpdateManualCalculatorMappingParams>
 */
export function taxUpdateManualCalculatorMapping(params) {
    return { evid: 1614, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxDeleteCalculatorMapping' event (evid: 1615)
 *
 * Event description: When a mapping is deleted
 *
 * @param {taxDeleteCalculatorMappingParams} params - The parameters for this event
 * @property {string} taxGroupMappingId - tax_group_mapping_id
 * @property {GUID} taxMappingId - tax_mapping_id
 * @return {LogObject<taxDeleteCalculatorMappingParams>} LogObject<taxDeleteCalculatorMappingParams>
 */
export function taxDeleteCalculatorMapping(params) {
    return { evid: 1615, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxDeleteAvalaraCalculatorMapping' event (evid: 1616)
 *
 * Event description: When a mapping is deleted
 *
 * @param {taxDeleteAvalaraCalculatorMappingParams} params - The parameters for this event
 * @property {GUID} avalaraTaxMappingId - avalara_tax_mapping_id
 * @return {LogObject<taxDeleteAvalaraCalculatorMappingParams>} LogObject<taxDeleteAvalaraCalculatorMappingParams>
 */
export function taxDeleteAvalaraCalculatorMapping(params) {
    return { evid: 1616, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryMethodSet' event (evid: 163)
 *
 * Event description: Click on continue to payment (on web) since June 2019 also sent from OneApp (leads to "Review Order" (placeOrder) screen)
 *
 * @param {deliveryMethodSetParams} params - The parameters for this event
 * @property {string} orig_shipping_method - current shipping method in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
 * @property {number} optionscount - number of payment options
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} selectedoptiontype - type of option selected
 * @property {boolean} isOwner - true if visitor is the site owner
 * @property {string} methodType - pickup/non-pickup
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {number} selectedoptionindex - index of selected option
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} isWithTimeSlots - True/false. right now only for Restaurant. Does the selected delivery option has a time slot option?
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} isSetFromSlot - whether the delivery method was set from slot
 * @property {string} shippingRuleOptions - all the shipping types presented in the modal
 * @property {string} purchaseFlowId - purchase flow id. Note that this field was implemented in January 25
 * @return {LogObject<deliveryMethodSetParams>} LogObject<deliveryMethodSetParams>
 */
export function deliveryMethodSet(params) {
    return { evid: 163, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutShowMerchantPaymentPopupSf' event (evid: 164)
 *
 * Event description: When the user connects to his site and tries to do checkout when the payment method doesn't define in the site's settings
 *
 * @param {checkoutShowMerchantPaymentPopupSfParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} catalogAppId - list of all catalog app ids
 * @property {string} origin - where the modal pops up (cart / product page...)
 * @property {string} mode - mode
 * @property {GUID} ecomId - ecom_id
 * @return {LogObject<checkoutShowMerchantPaymentPopupSfParams>} LogObject<checkoutShowMerchantPaymentPopupSfParams>
 */
export function checkoutShowMerchantPaymentPopupSf(params) {
    return { evid: 164, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickPlaceOrder' event (evid: 168)
 *
 * Event description: click on place order (client event). since june 2019 also from OneApp (leads to cashier screen to choose payment method and pay)
 *
 * @param {clickPlaceOrderParams} params - The parameters for this event
 * @property {boolean} isCalculationErrors - does calculation errors exist. Not exist in OOI checkout
 * @property {string} validationMessage - JSON with the validation that appear in the checkout while loaded. {type - warning/error, is_line_item - true/false, message - what the uou saw,name-DELIVERY/ OTHER_DEFAULT / LINE_ITEM_DEFAULT, suggested_fix}
 * @property {boolean} isDiscountRulePriceSummary - does discount rule exist in price summary. Not exist in OOI checkout
 * @property {string} giftCardCode - Not exist in OOI checkout
 * @property {string} numLineItemsPerCatalog - Json - number of line items per catalog - example: {“stores”: 3, “bookings”: 4}
 * @property {string} giftCardId - gift_card_id. Not exist in OOI checkout
 * @property {GUID} cartId - cart_id
 * @property {string} originType - the type of flow that lead to the checkout, like buy now, paypal, etc.
 * @property {boolean} isGiftCard - does gift card is available in the checkout
 * @property {boolean} isPolicy - has policies in checkout
 * @property {string} selectedCarrierServiceOption - Take from: Checkout.Chekout object.Shipping Info.selectedCarrierServiceOption
 * @property {string} cartType - cart_type
 * @property {string} siteLanguage - site Language
 * @property {boolean} is_with_offline_payment - does the site has an offline payment connected
 * @property {string} flowType - 'quick flow' / 'full flow'. For OOI Checkout- fastFlow = 'fast flow', visitorPickupFlow = 'visitor pickup flow', memberPickupFlow = 'member pickup flow', visitorShippingFlow = 'visitor shipping flow', memberShippingFlow = 'member shipping flow', nonShippableFlow = 'non shippable flow', unrecognizedFlow = 'unrecognized Flow',
 * @property {string} appName - app_name
 * @property {boolean} isBuyerNote - does a buyes note exist. Not exist in OOI checkout
 * @property {string} couponCode - coupon_code. Not exist in OOI checkout
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} selectedDeliveryOption - what was the selected delivery option
 * @property {string} channelType - what is the channel type
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {string} paymentMethod - authorize-net/Stripe
 * @property {GUID} owner_id - owner_id
 * @property {string} itemsQuantityPerCatalog - Json - sum of total items quantity per catalog - example: {“stores”: 9, “bookings”: 7}. Not exist in OOI checkout
 * @property {boolean} isDiscountPriceSummary - does discount (any kind of discount)  exist in price summary. Not exist in OOI checkout
 * @property {boolean} is_with_ewallet_payment - does the site has an ewallet payment connected
 * @property {string} shippingCountry - buyer country code. Take from: Checkout.Chekout object.Shipping Info. shipping destenation.address.country
 * @property {string} paymet_providers - array of payment providers connected to the store site
 * @property {string} first_stage - first stage open in checkout page
 * @property {boolean} hasCustomField - Not exist in OOI checkout
 * @property {boolean} isOwner - true if visitor is the site owner
 * @property {number} numOfLineItems - number of line items (# of products) in cart included the product just added
 * @property {boolean} is_promo_code - is promo code (coupon) option visible in the cart & checkout
 * @property {boolean} is_member - is_member
 * @property {boolean} customFieldMandatory - true - if custom field was mandatory on checkout
 * @property {boolean} hasPaymentMethod - true / false. Not exist in OOI checkout
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor
 * @property {string} customFieldsTitle - title of custom field (can be a list if there is more than one field
 * @property {string} origin - the component / page that the visitor came from to the checkout, like product page, cart page, etc.
 * @property {boolean} isBuyNowPayLaterOption - is buy now pay later option exist. Not exist in OOI checkout
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {string} checkoutType - in viewer / out of viewer. Not exist in OOI checkout
 * @property {string} contactId - Buyer's contact ID. taken from: Checkout.Chekout object.buyerInfo.contactId
 * @property {string} validationSpi - jason with the validation that appear in the checkout while loaded. {type - warning/error, is_line_item - true/false, message - what the uou saw}
 * @property {boolean} isCouponPriceSummary - does coupon exist in price summary. Not exist in OOI checkout
 * @property {number} dintinctNumItems - count distinct item_id. Not exist in OOI checkout
 * @property {string} shippingMethodType - what was the selected shipping option (shipping /store pickup / none)
 * @property {boolean} isShippingPriceSummary - does shipping exist in price summary. Not exist in OOI checkout
 * @property {string} distinctNumItemsPerCatalog - Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}. Not exist in OOI checkout
 * @property {number} itemsQuantity - sum of total items quantity. Not exist in OOI checkout
 * @property {boolean} isPremium - Not exist in OOI checkout
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order. Not exist in OOI checkout
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} checkoutId - checkout_id
 * @property {string} buyerLanguage - buyer Language. Not exist in OOI checkout
 * @property {string} shippingCity - buyer city. Take from: Checkout.Chekout object.Shipping Info. shipping destenation.address.city
 * @property {boolean} isTaxPriceSummary - does tax exist in price summary. Not exist in OOI checkout
 * @property {number} num_of_paymet_providers - How many payment providers does the site has connected. Not exist in OOI checkout
 * @property {GUID} siteMemberId - site_member_id
 * @property {string} purchaseFlowId - purchase flow id. Note that this field was implemented in January 25
 * @property {boolean} isRequiredPaymentPolicy - policy agreement checkbox
 * @property {boolean} isMarketingCommunication - Marketing and communications
 * checkbox
 * @property {boolean} isTermsConditions - terms and conditions checkbox
 * @return {LogObject<clickPlaceOrderParams>} LogObject<clickPlaceOrderParams>
 */
export function clickPlaceOrder(params) {
    return { evid: 168, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutClickOnCallToActionInMerchantPopUpSf' event (evid: 169)
 *
 * Event description: click on call to action (upgrade / set payment) in merchant pop-up
 *
 * @param {checkoutClickOnCallToActionInMerchantPopUpSfParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} notificationType - payments/upgrade/shipping
 * @property {string} type - merchant pop-up / buyer pop-up
 * @property {GUID} ecomId - ecom_id
 * @return {LogObject<checkoutClickOnCallToActionInMerchantPopUpSfParams>} LogObject<checkoutClickOnCallToActionInMerchantPopUpSfParams>
 */
export function checkoutClickOnCallToActionInMerchantPopUpSf(params) {
    return { evid: 169, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'orderPageMessagePresentedToMerchantSrc130Evid17' event (evid: 17)
 *
 * Event description: message displayed to merchant in order page (refund pending/ failed)
 *
 *
 * @param {orderPageMessagePresentedToMerchantSrc130Evid17Params} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} flowType - refund
 * @property {string} messageType - failed / pending
 * @property {string} sectionName - The section name of the order page when the message was displayed - payment details/ page header etc.
 * @property {string} paymentStatus - payment_status
 * @return {LogObject<orderPageMessagePresentedToMerchantSrc130Evid17Params>} LogObject<orderPageMessagePresentedToMerchantSrc130Evid17Params>
 */
export function orderPageMessagePresentedToMerchantSrc130Evid17(params) {
    return { evid: 17, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickOnBackInCheckoutProcess' event (evid: 170)
 *
 * Event description: click on 'back' or 'edit' in checkout process. since june 2019 also sent from OneApp
 *
 * @param {clickOnBackInCheckoutProcessParams} params - The parameters for this event
 * @property {string} previousStage - the closed stage - payment / shippingDetails / deliveryMethod / payment-method / pickupDetails / shipping-method / customerDetails
 * @property {string} stage - which stage in the wishlist installation process
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} owner_id - uuid of site owner
 * @property {boolean} isOwner - true if visitor is the site owner
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase flow id. Note that this field was implemented in January 25
 * @return {LogObject<clickOnBackInCheckoutProcessParams>} LogObject<clickOnBackInCheckoutProcessParams>
 */
export function clickOnBackInCheckoutProcess(params) {
    return { evid: 170, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickOnEditCart' event (evid: 171)
 *
 * Event description: click on edit cart button in checkout process
 *
 * @param {clickOnEditCartParams} params - The parameters for this event
 * @property {string} mobilePosition - Top/Bottom. Null if not mobile device. The place in the checkout on mobile device (not Wix app) where the uou did the action. There are 2 option - on the top of the checkout or on the bottom of the checkout.
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - cart_type
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} origin - origin
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase flow id. Note that this field was implemented in January 25
 * @return {LogObject<clickOnEditCartParams>} LogObject<clickOnEditCartParams>
 */
export function clickOnEditCart(params) {
    return { evid: 171, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cartShowMerchantShippingPopup' event (evid: 173)
 *
 * Event description: Show shipping popup - no shipping rule for destination
 *
 * @param {cartShowMerchantShippingPopupParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {string} origin - where the modal pops up (cart / product page...)
 * @property {string} mode - mode
 * @property {string} type - merchant pop-up / buyer pop-up
 * @property {GUID} ecomId - ecom_id
 * @return {LogObject<cartShowMerchantShippingPopupParams>} LogObject<cartShowMerchantShippingPopupParams>
 */
export function cartShowMerchantShippingPopup(params) {
    return { evid: 173, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'thankYouPageLoadSf' event (evid: 174)
 *
 * Event description: this event indicates when the "thank you page" was presented to the user:
 *
 * @param {thankYouPageLoadSfParams} params - The parameters for this event
 * @property {string} viewMode - DESKTOP etc.
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} orderId - orderId
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} paymentMethodType - List of distinct Order.lineItems.paymentOption
 * @property {number} numOfLineItems - Count distinct Order.lineItems.id
 * @property {string} payment_status - payment_status
 * @property {string} origin - the state of the panel when the user clicked on the button
 * @property {string} itemType - List of distinct Order.lineItems.itemType
 * @property {string} paymentProvider - payment_provider
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {string} checkoutId - Order.checkoutId
 * @return {LogObject<thankYouPageLoadSfParams>} LogObject<thankYouPageLoadSfParams>
 */
export function thankYouPageLoadSf(params) {
    return { evid: 174, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'thankYouPageClickOnLinkOnLineItem' event (evid: 175)
 *
 * Event description: When the buyer clicks on one of the item’s links on Thank you page
 *
 * @param {thankYouPageClickOnLinkOnLineItemParams} params - The parameters for this event
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} orderId - orderId
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} catalogItemId - order.lineItems.catalogReference.catalogItemId
 * @property {string} itemType - Order.lineItems.itemType
 * @property {string} actionName - Action name (download/print/add to calendar..)
 * @property {GUID} ecomId - ecom_id
 * @property {string} checkoutId - Order.checkoutId
 * @return {LogObject<thankYouPageClickOnLinkOnLineItemParams>} LogObject<thankYouPageClickOnLinkOnLineItemParams>
 */
export function thankYouPageClickOnLinkOnLineItem(params) {
    return { evid: 175, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'thankYouPageContinueBrowsingLinkClickedSf' event (evid: 176)
 *
 * Event description: Thank you page-> Continue browsing link clicked SF.
 *
 * @param {thankYouPageContinueBrowsingLinkClickedSfParams} params - The parameters for this event
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} orderId - orderId
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} ecomId - ecom_id
 * @property {string} checkoutId - Order.checkoutId
 * @return {LogObject<thankYouPageContinueBrowsingLinkClickedSfParams>} LogObject<thankYouPageContinueBrowsingLinkClickedSfParams>
 */
export function thankYouPageContinueBrowsingLinkClickedSf(params) {
    return { evid: 176, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'paymentDetailsCompleted' event (evid: 177)
 *
 * Event description: UoU clicked continue on payment details step in new checkout funnel. since june 2019 also sent from OA StoreFront (with origin)
 *
 * @param {paymentDetailsCompletedParams} params - The parameters for this event
 * @property {number} optionscount - number of payment options
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {boolean} isOwner - true if visitor is the site owner
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {string} paymentProvider - payment provider that was chosen
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {number} selectedoptionindex - index of selected option
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase flow id. Note that this field was implemented in January 25
 * @return {LogObject<paymentDetailsCompletedParams>} LogObject<paymentDetailsCompletedParams>
 */
export function paymentDetailsCompleted(params) {
    return { evid: 177, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'oneAppStoreFrontClearCartSf' event (evid: 184)
 *
 * Event description: OneApp StoreFront -> Clear cart SF
 *
 * @param {oneAppStoreFrontClearCartSfParams} params - The parameters for this event
 * @property {string} cartId - cartId
 * @property {number} itemsCount - # of products in cart
 * @property {string} catalogAppId - Stores/bookings App id
 * @return {LogObject<oneAppStoreFrontClearCartSfParams>} LogObject<oneAppStoreFrontClearCartSfParams>
 */
export function oneAppStoreFrontClearCartSf(params) {
    return { evid: 184, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickManageProductInCartOaStoreFront' event (evid: 185)
 *
 * Event description: Click Manage Product in cart OA StoreFront
 *
 * @param {clickManageProductInCartOaStoreFrontParams} params - The parameters for this event
 * @property {string} cartId - cartId
 * @property {string} cartType - cartType
 * @property {string} catalogAppId - Stores/bookings App id
 * @property {string} productType - productType
 * @property {string} productId - productId
 * @return {LogObject<clickManageProductInCartOaStoreFrontParams>} LogObject<clickManageProductInCartOaStoreFrontParams>
 */
export function clickManageProductInCartOaStoreFront(params) {
    return { evid: 185, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickOnMyOrdersInThankYouPageOaStoreFront' event (evid: 187)
 *
 * Event description: Click on "My Orders" in Thank you page OA StoreFront
 *
 * @param {clickOnMyOrdersInThankYouPageOaStoreFrontParams} params - The parameters for this event
 * @property {string} cartId - cartId
 * @property {string} orderId - orderId
 * @property {string} catalogAppId - Stores/bookings App id
 * @return {LogObject<clickOnMyOrdersInThankYouPageOaStoreFrontParams>} LogObject<clickOnMyOrdersInThankYouPageOaStoreFrontParams>
 */
export function clickOnMyOrdersInThankYouPageOaStoreFront(params) {
    return { evid: 187, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'settingsBrandedCheckoutCheckoutHeaderPopupIsShownSrc130Evid19' event (evid: 19)
 *
 * Event description: When the user clicks on action in the popup window. It can be cancel/learn more/save/add name/ add logo/ go to business info
 *
 * @param {settingsBrandedCheckoutCheckoutHeaderPopupIsShownSrc130Evid19Params} params - The parameters for this event
 * @property {string} action - cancel/learn more/save/add name/ add logo/ go to business info
 * @property {string} businessInfo - Under which business info does the action made: Name/Logo
 * @property {boolean} isEmptyState - Whether the action was made under empty state (when there’s no business name/logo yet)
 * @property {string} alignment - side/center
 * @return {LogObject<settingsBrandedCheckoutCheckoutHeaderPopupIsShownSrc130Evid19Params>} LogObject<settingsBrandedCheckoutCheckoutHeaderPopupIsShownSrc130Evid19Params>
 */
export function settingsBrandedCheckoutCheckoutHeaderPopupIsShownSrc130Evid19(params) {
    return { evid: 19, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'editorClickOnChangeLinkInSettingsSfe' event (evid: 196)
 *
 * Event description: when the user click on the change link in the settings of the cart or the thank you page / my orders..
 *
 * @param {editorClickOnChangeLinkInSettingsSfeParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} element - product image, name&price&sku, product options&quantity, button, info sections, social media,continue shopping / empty state / back to store..
 * @property {string} link - current navigation link
 * @property {string} component_id - component_id
 * @return {LogObject<editorClickOnChangeLinkInSettingsSfeParams>} LogObject<editorClickOnChangeLinkInSettingsSfeParams>
 */
export function editorClickOnChangeLinkInSettingsSfe(params) {
    return { evid: 196, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'editorLinkChangedInSettingsSfe' event (evid: 197)
 *
 * Event description: when the link changed in the settings (of the cart or the thank you page / my orders..)
 *
 * @param {editorLinkChangedInSettingsSfeParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} element - product image, name&price&sku, product options&quantity, button, info sections, social media
 * @property {string} link - new link changed
 * @property {string} component_id - thank you page / cart page / my orders
 * @return {LogObject<editorLinkChangedInSettingsSfeParams>} LogObject<editorLinkChangedInSettingsSfeParams>
 */
export function editorLinkChangedInSettingsSfe(params) {
    return { evid: 197, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutClickOnCheckboxInReviewAndPlaceOrderStepSrc130Evid2' event (evid: 2)
 *
 * Event description: when the user checks/ unchecks one of the checkboxes in the review and place orders step in the checkout- wrong values were sent until 19.11.24
 *
 * @param {checkoutClickOnCheckboxInReviewAndPlaceOrderStepSrc130Evid2Params} params - The parameters for this event
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase_f
 * @property {string} catalogAppIds - catalog_app_ids
 * @property {string} fieldType - consentRequiredPaymentPolicy/digital policy/checkout policies/subscription policies
 * @property {string} newValue - check/ unckeck
 * @property {boolean} hasLineItemPolicy - has line item policy - for pricing plans policies
 * @return {LogObject<checkoutClickOnCheckboxInReviewAndPlaceOrderStepSrc130Evid2Params>} LogObject<checkoutClickOnCheckboxInReviewAndPlaceOrderStepSrc130Evid2Params>
 */
export function checkoutClickOnCheckboxInReviewAndPlaceOrderStepSrc130Evid2(params) {
    return { evid: 2, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'settingsBrandedCheckoutCheckoutHeaderPopupIsShownSrc130Evid20' event (evid: 20)
 *
 * Event description: When the branded checkout header window is popping
 *
 *
 * @param {settingsBrandedCheckoutCheckoutHeaderPopupIsShownSrc130Evid20Params} params - The parameters for this event
 * @property {string} origin - Where the user was directed from to see the popup : checkout settings/…
 * @return {LogObject<settingsBrandedCheckoutCheckoutHeaderPopupIsShownSrc130Evid20Params>} LogObject<settingsBrandedCheckoutCheckoutHeaderPopupIsShownSrc130Evid20Params>
 */
export function settingsBrandedCheckoutCheckoutHeaderPopupIsShownSrc130Evid20(params) {
    return { evid: 20, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'selectPaymentCategory' event (evid: 200)
 *
 * Event description: Select payment category SF cashier - select radio button
 *
 * @param {selectPaymentCategoryParams} params - The parameters for this event
 * @property {string} abc - a string field
 * @property {string} paymentCategory - payment_category
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} paymentMethod - payment_provider
 * @property {boolean} b - a boolean
 * @property {string} itemType - item_type
 * @property {number} additionalFeesPrice - additional_fees_price
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number_of_additional_fees
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase flow id. Note that this field was implemented in January 25
 * @return {LogObject<selectPaymentCategoryParams>} LogObject<selectPaymentCategoryParams>
 */
export function selectPaymentCategory(params) {
    return { evid: 200, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'advancedShippingAppAdvancedShippingRuleCreated' event (evid: 2001)
 *
 * Event description: When advanced shipping rule is created in the Advanced shipping app. Note that multiple advanced shipping rules can be under 1 singel external shipping rule. Those advanced shipping rules are not connected to a specific shipping_rule_id (external), its general for all. In order to check which shipping_rule_id have the extensions we will need to check bi 130:3902 Shipping > Installed app added/removed and to see under which shpping_rule_id the app is install and enabled.
 *
 * @param {advancedShippingAppAdvancedShippingRuleCreatedParams} params - The parameters for this event
 * @property {number} rate - the advances shipping rate. INTEGER!! (multiply by 100000)
 * @property {string} applyCondition - When to apply the advanced shipping rule:  All conditions/any conditions
 * @property {string} name - the advances shipping name
 * @property {string} advancedShippingId - Advanced shipping id
 * @property {string} appDefId - App id that made the action
 * @property {string} conditionsList - A list of arrays with all the conditions and their data in this advanced shipping rule. Contain this data:   Condition, operator, value
 * @property {boolean} isEnabled - Whether the advances shipping rule is enabled or not
 * @return {LogObject<advancedShippingAppAdvancedShippingRuleCreatedParams>} LogObject<advancedShippingAppAdvancedShippingRuleCreatedParams>
 */
export function advancedShippingAppAdvancedShippingRuleCreated(params) {
    return { evid: 2001, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'advancedShippingAppAdvancedShippingRuleUpdated' event (evid: 2002)
 *
 * Event description: When the advanced shipping rule is updated in the Advanced shipping app.
 *
 * @param {advancedShippingAppAdvancedShippingRuleUpdatedParams} params - The parameters for this event
 * @property {number} rate - the advances shipping rate. INTEGER!! (multiply by 100000)
 * @property {string} applyCondition - When to apply the advanced shipping rule:  All conditions/any conditions
 * @property {string} name - the advances shipping name
 * @property {string} advancedShippingId - Advanced shipping id
 * @property {string} appDefId - App id that made the action
 * @property {string} conditionsList - A list of arrays with all the conditions and their data in this advanced shipping rule. Contain this data:   Condition, operator, value
 * @property {boolean} isEnabled - Whether the advances shipping rule is enabled or not
 * @return {LogObject<advancedShippingAppAdvancedShippingRuleUpdatedParams>} LogObject<advancedShippingAppAdvancedShippingRuleUpdatedParams>
 */
export function advancedShippingAppAdvancedShippingRuleUpdated(params) {
    return { evid: 2002, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'advancedShippingAppAdvancedShippingRuleDeleted' event (evid: 2003)
 *
 * Event description: When advanced shipping rule is deleted in the Advanced shipping app.
 *
 * @param {advancedShippingAppAdvancedShippingRuleDeletedParams} params - The parameters for this event
 * @property {string} advancedShippingId - Advanced shipping id
 * @return {LogObject<advancedShippingAppAdvancedShippingRuleDeletedParams>} LogObject<advancedShippingAppAdvancedShippingRuleDeletedParams>
 */
export function advancedShippingAppAdvancedShippingRuleDeleted(params) {
    return { evid: 2003, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'settingsBrandedCheckoutClickOnEditCheckoutHeaderSrc130Evid21' event (evid: 21)
 *
 * Event description: When the user clicks on ‘edit’ button in the checkout settings to edit the checkout header
 *
 *
 * @param {settingsBrandedCheckoutClickOnEditCheckoutHeaderSrc130Evid21Params} params - The parameters for this event
 * @property {string} origin - From where the user click to edit: checkout settings/…
 * @return {LogObject<settingsBrandedCheckoutClickOnEditCheckoutHeaderSrc130Evid21Params>} LogObject<settingsBrandedCheckoutClickOnEditCheckoutHeaderSrc130Evid21Params>
 */
export function settingsBrandedCheckoutClickOnEditCheckoutHeaderSrc130Evid21(params) {
    return { evid: 21, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'updateCheckoutSettings' event (evid: 2101)
 *
 * Event description: when the user updates the checkout settings in BO
 *
 * @param {updateCheckoutSettingsParams} params - The parameters for this event
 * @property {boolean} digitalItemPolicyVisible - Whether the policy is visible to the customer in the checkout page
 * @property {boolean} contactUsVisible - Whether the policy is visible to the customer in the checkout page
 * @property {string} changedFields - list of all fields that were changed in the last update
 * @property {string} contactUsContent - Policy content.
 * @property {boolean} policyAgreementCheckboxVisible - Whether the checkbox is visible to the customer.
 * @property {string} returnPolicyContent - Policy content.
 * @property {boolean} customPolicyVisible - Whether the policy is visible to the customer in the checkout page
 * @property {boolean} subscriptionCheckboxCheckByDefault - Whether the checkbox is checked by default.
 * @property {boolean} policyAgreementCheckboxCheckByDefault - Whether the checkbox is checked by default.
 * @property {boolean} privacyPolicyVisible - Whether the policy is visible to the customer in the checkout page
 * @property {boolean} subscriptionCheckboxVisible - Whether the checkbox is visible to the customer.
 * @property {string} digitalItemPolicyContent - Policy content.
 * @property {string} customPolicyTitle - Policy title.
 * @property {string} termsAndConditionsContent - Policy content.
 * @property {boolean} returnPolicyVisible - Whether the policy is visible to the customer in the checkout page
 * @property {string} privacyPolicyContent - Policy content.
 * @property {boolean} termsAndConditionsVisible - Whether the policy is visible to the customer in the checkout page
 * @property {string} customPolicyContent - Policy content.
 * @property {boolean} giftCardRedeemEnabled - Whether the gift card redeem is enabled
 * @property {boolean} mitEnabled - Whether the MIT transaction is enabled
 * @property {boolean} delayCaptureEnabled - Whether auth and capture is enabled
 * @property {string} headerText - Textual content to be included in the header (e.g. Business Name)
 * @property {string} headerLogoSize - Size of the logo:
 * UNKNOWN_LOGO/SIZE/SMALL/MEDIUM/LARGE.
 * If its ‘name’ and not ‘logo’ it will be null
 *
 * @property {string} headerAlignment - What is the header alignment:
 * UNKNOWN/ALIGNMENT/SIDE/CENTER
 *
 * @property {string} displayCheckoutLabelInHeader - Whether to display the 'Checkout' label within the header.
 * @property {boolean} captureBeforeExpiryEnabled - Automatically capture payments before the authorization period ends (only if delay capture enabled=TRUE)
 * @return {LogObject<updateCheckoutSettingsParams>} LogObject<updateCheckoutSettingsParams>
 */
export function updateCheckoutSettings(params) {
    return { evid: 2101, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'updateOrderSettings' event (evid: 2102)
 *
 * Event description: when the user updates the order settings in BO
 *
 * @param {updateOrderSettingsParams} params - The parameters for this event
 * @property {string} changedFields - list of all fields that were changed in the last update
 * @property {boolean} createInvoice - Whether to automatically create an invoice for orders that were paid online
 * @property {string} inventoryUpdateTrigger - 2 supported values: ON_ORDER_PAID ,ON_ORDER_PLACED
 * @return {LogObject<updateOrderSettingsParams>} LogObject<updateOrderSettingsParams>
 */
export function updateOrderSettings(params) {
    return { evid: 2102, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cartMiniCartLoaded' event (evid: 211)
 *
 * Event description: Mini Cart loaded
 *
 * @param {cartMiniCartLoadedParams} params - The parameters for this event
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {string} appName - app_name
 * @return {LogObject<cartMiniCartLoadedParams>} LogObject<cartMiniCartLoadedParams>
 */
export function cartMiniCartLoaded(params) {
    return { evid: 211, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'storesScreenRenderedOa' event (evid: 212)
 *
 * Event description: when specific stores screen(product_list, order_list, product, product_new, order) was rendered OneApp. is not sent for rendering coupons
 *
 * @param {storesScreenRenderedOaParams} params - The parameters for this event
 * @property {string} state - full/empty/filtered
 * @property {string} paymentStatus - paymentStatus
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} owner_id - id of site's owner
 * @property {boolean} isOwner - true for merchant, false for member
 * @property {GUID} id - order id
 * @property {string} previousPage - where the user came from (stores_home - for tabs in StoresHome, previous page_name for others)
 * @property {boolean} hasPaymentMethod - for orders screen - true if user has at least one payment method connected
 * @property {string} origin - merchantView / memberView / oneAppDashboard
 * @property {boolean} hasOnlineStoreInstalled - has_online_store_installed
 * @property {boolean} isPremium - for orders screen. true if user is premium (and do not see a bunner to upgrade)
 * @property {string} pageName - current rendered page (products, orders, product, product_new, order, dashboard, settings, shipping..., tax...)/ cannot_sell / view_store /local delivery / local delivery areas
 * @property {string} orderInfo - order_info
 * @return {LogObject<storesScreenRenderedOaParams>} LogObject<storesScreenRenderedOaParams>
 */
export function storesScreenRenderedOa(params) {
    return { evid: 212, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutPayingForExistingOrderClickGoToCheckoutInErrorMessageSrc130Evid22' event (evid: 22)
 *
 * Event description: When the user clicks to go back to checkout when error message is showing up in the flow of paying for an existing order (paylinks on checkout) . can be when the link is not opened/ when the paylink is not found.
 *
 *
 * @param {checkoutPayingForExistingOrderClickGoToCheckoutInErrorMessageSrc130Evid22Params} params - The parameters for this event
 * @property {string} orderId - Order_id that the uou is paying for
 * @property {string} orderPaymentRequestId - order_payment_request_id
 * @property {string} appId - App Def ID that created the order payment request
 * @property {string} externalId - Reference to an ID from an external system, indicating the original source of the order payment request.
 * @property {string} paymentRequestStatus - PAID/ EXPIRED /UNPAID/ UNKNOWN_STATUS
 * @return {LogObject<checkoutPayingForExistingOrderClickGoToCheckoutInErrorMessageSrc130Evid22Params>} LogObject<checkoutPayingForExistingOrderClickGoToCheckoutInErrorMessageSrc130Evid22Params>
 */
export function checkoutPayingForExistingOrderClickGoToCheckoutInErrorMessageSrc130Evid22(params) {
    return { evid: 22, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cartSelectShippingMethodFromTheDropdownInCartPage' event (evid: 222)
 *
 * Event description: NOT IN USE doesnt send data also in src 10. When a visitor clicks on one of the options in the shipping method dropdown on the cart page
 *
 * @param {cartSelectShippingMethodFromTheDropdownInCartPageParams} params - The parameters for this event
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {string} selected_shipping_method - the new shipping method that was selected from the dropdown in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
 * @return {LogObject<cartSelectShippingMethodFromTheDropdownInCartPageParams>} LogObject<cartSelectShippingMethodFromTheDropdownInCartPageParams>
 */
export function cartSelectShippingMethodFromTheDropdownInCartPage(params) {
    return { evid: 222, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickOnShippingDestinationInCartPageSf' event (evid: 223)
 *
 * Event description: Cart -> Click on shipping destination in page SF.
 *
 * @param {clickOnShippingDestinationInCartPageSfParams} params - The parameters for this event
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {string} shippingDestinationState - shipping destination state
 * @property {string} shippingDestinationCountry - shipping_destination_country
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase flow id
 * @return {LogObject<clickOnShippingDestinationInCartPageSfParams>} LogObject<clickOnShippingDestinationInCartPageSfParams>
 */
export function clickOnShippingDestinationInCartPageSf(params) {
    return { evid: 223, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickContinueEWalletModalSf' event (evid: 225)
 *
 * Event description: When a visitor clicks on ‘Continue’ in e-wallet Modal (after the click the visitor is supposed to view the checkout).
 *
 * @param {clickContinueEWalletModalSfParams} params - The parameters for this event
 * @property {GUID} cartId - cart id
 * @property {number} itemsCount - Numbers of items in cart
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} productsList - json containing all product guids for products in the cart
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {string} paymet_providers - array of payment providers connected to the store
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor at the first time
 * @property {string} origin - origin
 * @property {string} type - add / edit
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkout_id
 * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
 * @return {LogObject<clickContinueEWalletModalSfParams>} LogObject<clickContinueEWalletModalSfParams>
 */
export function clickContinueEWalletModalSf(params) {
    return { evid: 225, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutClickGoToCheckoutSettingsSrc130Evid23' event (evid: 23)
 *
 * Event description: When the user clicks on ‘checkout settings’ in the editor
 *
 *
 * @param {checkoutClickGoToCheckoutSettingsSrc130Evid23Params} params - The parameters for this event
 * @property {string} origin - where the click was made from (Side cart editor/...)
 * @return {LogObject<checkoutClickGoToCheckoutSettingsSrc130Evid23Params>} LogObject<checkoutClickGoToCheckoutSettingsSrc130Evid23Params>
 */
export function checkoutClickGoToCheckoutSettingsSrc130Evid23(params) {
    return { evid: 23, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickOnManageFulfillersSrc130Evid239' event (evid: 239)
 *
 * Event description: User clicks on "Manage Fulfillers"  in fulfilment services card of Store Shipping  tab (Shipping and Fulfillment)
 *
 * @param {deliveryProfileClickOnManageFulfillersSrc130Evid239Params} params - The parameters for this event
 * @return {LogObject<deliveryProfileClickOnManageFulfillersSrc130Evid239Params>} LogObject<deliveryProfileClickOnManageFulfillersSrc130Evid239Params>
 */
export function deliveryProfileClickOnManageFulfillersSrc130Evid239(params) {
    return { evid: 239, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'errorInCheckout' event (evid: 24)
 *
 * Event description: errors in checkoutfunnel. since june 2019 also sent from OneApp (origin = 'OA StoreFront')
 *
 * @param {errorInCheckoutParams} params - The parameters for this event
 * @property {boolean} isCalculationErrors - does calculation errors exist.
 * @property {string} validationMessage - JSON with the validation that appear in the checkout while loaded. {type - warning/error, is_line_item - true/false, message - what the uou saw,name-DELIVERY/ OTHER_DEFAULT / LINE_ITEM_DEFAULT, suggested_fix}
 * @property {string} stage - which stage in the wishlist installation process
 * @property {string} numLineItemsPerCatalog - Json - number of line items per catalog - example: {“stores”: 3, “bookings”: 4}. not exit in OOI checkout
 * @property {GUID} cartId - cart_id
 * @property {string} field - Icon text, button text, out of stock...
 * @property {string} originType - the type of flow that lead to the checkout, like buy now, paypal, etc.
 * @property {boolean} isGiftCard - does gift card is available in the checkout
 * @property {string} errorMessage - right now only relevant for minimum order, no message = NULL
 * @property {boolean} isPolicy - has policies in checkout
 * @property {string} selectedCarrierServiceOption - Take from: Checkout.Chekout object.Shipping Info.selectedCarrierServiceOption. not exit in OOI checkout
 * @property {string} siteLanguage - site Language. not exit in OOI checkout
 * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
 * @property {string} flowType - 'quick flow' / 'full flow'. For OOI Checkout- fastFlow = 'fast flow', visitorPickupFlow = 'visitor pickup flow', memberPickupFlow = 'member pickup flow', visitorShippingFlow = 'visitor shipping flow', memberShippingFlow = 'member shipping flow', nonShippableFlow = 'non shippable flow', unrecognizedFlow = 'unrecognized Flow',
 * @property {string} appName - app_name
 * @property {boolean} isBuyerNote - does a buyes note exist. not exit in OOI checkout
 * @property {string} catalogAppId - list of all catalog app ids. A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} selectedDeliveryOption - what was the selected delivery option.. not exit in OOI checkout
 * @property {string} channelType - what is the channel type
 * @property {boolean} savedAddress - true if the member has saved address. not exit in OOI checkout
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} itemsQuantityPerCatalog - Json - sum of total items quantity per catalog - example: {“stores”: 9, “bookings”: 7}. not exit in OOI checkout
 * @property {boolean} isDiscountPriceSummary - does discount exist in price summary. not exit in OOI checkout
 * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected
 * @property {string} shippingCountry - buyer country code when viewing the checkout. Take from: Checkout.Chekout object.Shipping Info. shipping destenation.address.country. not exit in OOI checkout
 * @property {string} paymet_providers - array of payment providers connected to the store site. not exit in OOI checkout
 * @property {boolean} isMember - true if visitor is member
 * @property {boolean} isOwner - true if visitor is the site owner
 * @property {boolean} is_promo_code - is promo code (coupon) option visible in the cart & checkout
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor. not exit in OOI checkout
 * @property {string} customFieldsTitle - title of custom field (can be a list if there is more than one field
 * @property {string} origin - OA StoreFront
 * @property {boolean} isBuyNowPayLaterOption - is buy now pay later option exist. not exit in OOI checkout
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {string} contactId - Buyer's contact ID. take from: Checkout.Chekout object.buyerInfo.contactId
 * @property {number} numLineItems - total number of line items. not exit in OOI checkout
 * @property {number} dintinctNumItems - count distinct item_id. not exist in OOI checkout
 * @property {string} shippingMethodType - shipping /store pickup / none. not exit in OOI checkout
 * @property {boolean} isShippingPriceSummary - does shipping exist in price summary. not exit in OOI checkout
 * @property {string} message - validation error
 * @property {number} itemsQuantity - sum of total items quantity. not exit in OOI checkout
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order. not exist in OOI checkout
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order. not exit in OOI checkout
 * @property {string} dintinctNumItemsPerCatalog - Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}. not exist in OOI checkout
 * @property {GUID} checkoutId - checkout_id
 * @property {string} buyerLanguage - buyer Language. not exist in OOI checkout
 * @property {string} shippingCity - buyer city when viewing the checkout. Take from: Checkout.Chekout object.Shipping Info. shipping destenation.address.city. not exit in OOI checkout
 * @property {boolean} isTaxPriceSummary - does tax exist in price summary. not exit in OOI checkout
 * @property {number} num_of_paymet_providers - How many payment providers does the store/ site has connected. not exit in OOI checkout
 * @property {string} PurchaseFlowId - purchase flow id
 * @return {LogObject<errorInCheckoutParams>} LogObject<errorInCheckoutParams>
 */
export function errorInCheckout(params) {
    return { evid: 24, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bisClickOnNotifyMeButtonToOpenModal' event (evid: 25)
 *
 * Event description: When a user clicks on notify me button to open modal.
 * if eligible = true, then the modal should open
 * if eligible = false, then the button is disabled and the user will get an error.
 *
 * @param {bisClickOnNotifyMeButtonToOpenModalParams} params - The parameters for this event
 * @property {string} catalogAppId - catalog app id
 * @property {string} option - map of strings of the options chosen in the requested item
 * @property {string} catalogItemId - The guid of the requested item (product_guid / service_id..)
 * @property {string} origin - product page / quick view / gallery
 * @property {GUID} catalogInstanceId - In case of stores (store_id)
 * @property {boolean} eligible - true (all options selected/no options ->eligible  to open modal) false (not all the options are selected - not eligible - shows error)
 * @property {GUID} appId - the app Id of the catalog
 * @return {LogObject<bisClickOnNotifyMeButtonToOpenModalParams>} LogObject<bisClickOnNotifyMeButtonToOpenModalParams>
 */
export function bisClickOnNotifyMeButtonToOpenModal(params) {
    return { evid: 25, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bisClickOnTheSubmitButton' event (evid: 26)
 *
 * Event description: When a user clicks on the submit button in 'notify me' modal
 * If the input email is valid, then it triggers to create a request on the server.
 * if the input email is not valid it will send an error
 *
 * @param {bisClickOnTheSubmitButtonParams} params - The parameters for this event
 * @property {boolean} isEmailValid - true - email is valid and trigger to created a request, false - email is not valid and an error is shown
 * @property {string} catalogAppId - catalog app id
 * @property {string} catalogItemId - The guid of the requested item (product_guid / service_id..)
 * @property {string} options - map of strings of the options chosen in the requested item
 * @property {GUID} catalogInstanceId - In case of stores (store_id)
 * @property {GUID} appId - the app Id of the catalog
 * @return {LogObject<bisClickOnTheSubmitButtonParams>} LogObject<bisClickOnTheSubmitButtonParams>
 */
export function bisClickOnTheSubmitButton(params) {
    return { evid: 26, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bisRequestIsAlreadyCreatedError' event (evid: 27)
 *
 * Event description: When a user clicks the submit button after a request is already made. and he gets an error for it
 *
 * @param {bisRequestIsAlreadyCreatedErrorParams} params - The parameters for this event
 * @property {string} catalogAppId - catalog app id
 * @property {string} catalogItemId - The guid of the requested item (product_guid / service_id..)
 * @property {string} options - map of strings of the options chosen in the requested item
 * @property {GUID} catalogInstanceId - In case of stores (store_id)
 * @property {GUID} appId - the app Id of the catalog
 * @return {LogObject<bisRequestIsAlreadyCreatedErrorParams>} LogObject<bisRequestIsAlreadyCreatedErrorParams>
 */
export function bisRequestIsAlreadyCreatedError(params) {
    return { evid: 27, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutNotAbleToAcceptPaymentsVisitorPopupSf' event (evid: 283)
 *
 * Event description: Error pop-up opens when the buyer clicks on one of the checkout buttons, and If the store can't accept orders (not an Active Store / doesn't have any shipping rules).
 *
 * @param {checkoutNotAbleToAcceptPaymentsVisitorPopupSfParams} params - The parameters for this event
 * @property {string} viewMode - editor / live / preview
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} origin - origin
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} checkoutId - Should be taken from checkout.Checkout Object.checkoutId
 * @return {LogObject<checkoutNotAbleToAcceptPaymentsVisitorPopupSfParams>} LogObject<checkoutNotAbleToAcceptPaymentsVisitorPopupSfParams>
 */
export function checkoutNotAbleToAcceptPaymentsVisitorPopupSf(params) {
    return { evid: 283, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutClickOnContinueInCheckoutProcess' event (evid: 29)
 *
 * Event description: When the user clicks on “continue”  on a specific stage in checkout process
 *
 * @param {checkoutClickOnContinueInCheckoutProcessParams} params - The parameters for this event
 * @property {string} previousStage - the closed stage - payment / shippingDetails / deliveryMethod / payment-method / pickupDetails / shipping-method / customerDetails
 * @property {string} stage - which stage in the wishlist installation process
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} owner_id - uuid of site owner
 * @property {boolean} isOwner - true if visitor is the site owner
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<checkoutClickOnContinueInCheckoutProcessParams>} LogObject<checkoutClickOnContinueInCheckoutProcessParams>
 */
export function checkoutClickOnContinueInCheckoutProcess(params) {
    return { evid: 29, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutClickOnLinkSrc130Evid3' event (evid: 3)
 *
 * Event description: when the user clicks on one of the links in the checkout footer or terms and conditions step
 *
 * @param {checkoutClickOnLinkSrc130Evid3Params} params - The parameters for this event
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase_f
 * @property {string} catalogAppIds - catalog_app_ids
 * @property {string} fieldType - terms and conditions / privacy policy / consentRequiredPaymentPolicy etc...
 * @property {string} origin - footer / terms and conditions
 * @return {LogObject<checkoutClickOnLinkSrc130Evid3Params>} LogObject<checkoutClickOnLinkSrc130Evid3Params>
 */
export function checkoutClickOnLinkSrc130Evid3(params) {
    return { evid: 3, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'giftCardVoid' event (evid: 3000)
 *
 * Event description: when a gift card transaction is voided (happens if redemption succeeded but cashier/inventory failed and  the order is created at this step, but this order is not APPROVED)
 *
 * @param {giftCardVoidParams} params - The parameters for this event
 * @property {GUID} providerAppId - app_id of the App who provided the gift card (Gifted App)
 * @property {string} giftCardId - gift_card_id
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} reason - the reason why order failed
 * @property {string} appDefId - app_def_id
 * @property {string} redeemTransactionId - id of redeem transaction in the Gifted App
 * @property {string} identityType - identity_type
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<giftCardVoidParams>} LogObject<giftCardVoidParams>
 */
export function giftCardVoid(params) {
    return { evid: 3000, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'membershipVoidSrc130Evid3001' event (evid: 3001)
 *
 * Event description: when a membership transaction is voided (happens if redemption succeeded but the cashier failed and  the order is created at this step, but this order is not APPROVED)
 *
 * @param {membershipVoidSrc130Evid3001Params} params - The parameters for this event
 * @property {GUID} providerAppId - app_id of the App who provided the gift card (Gifted App)
 * @property {string} giftCardId - gift_card_id
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} reason - the reason why order failed
 * @property {string} redeemTransactionId - id of redeem transaction in the Gifted App
 * @property {string} orderId - order_id
 * @property {string} checkoutId - checkout_id
 * @property {GUID} membershipId - membership_id
 * @property {string} cartId - cart_id
 * @return {LogObject<membershipVoidSrc130Evid3001Params>} LogObject<membershipVoidSrc130Evid3001Params>
 */
export function membershipVoidSrc130Evid3001(params) {
    return { evid: 3001, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutTipsTipModalLoadedOnLiveSiteSrc130Evid31' event (evid: 31)
 *
 * Event description: Tip Modal loaded on live site
 * app ID sent only from v2 of the app (September 2024)
 *
 *
 * @param {checkoutTipsTipModalLoadedOnLiveSiteSrc130Evid31Params} params - The parameters for this event
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} tipType - Percentage/Fixed amount
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} appId - app id to distinguish between the app versions
 * @property {boolean} isCustomTip - is Custom Tip enabled
 * @property {number} defaultTipValue - the default value of the tip when to modal is loaded
 * @return {LogObject<checkoutTipsTipModalLoadedOnLiveSiteSrc130Evid31Params>} LogObject<checkoutTipsTipModalLoadedOnLiveSiteSrc130Evid31Params>
 */
export function checkoutTipsTipModalLoadedOnLiveSiteSrc130Evid31(params) {
    return { evid: 31, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'pageLoadBm' event (evid: 313)
 *
 * Event description: BM page load
 *
 * @param {pageLoadBmParams} params - The parameters for this event
 * @property {string} referralInfo - referral_info
 * @property {string} flowType - avalaraAuto/avalaraManual/manual
 * @property {boolean} withProductTaxGroups - true if page was loaded with productTaxGroups enabled (only for Tax tb and product page)
 * @property {string} listView - this field contains the data about the list view, if the page contain a list that can be edited
 * @property {string} appName - app_name
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} paidStatus - relevant only for orders page: paid, notPaid, partiallyRefunded , refunded
 * @property {boolean} isPremiumEligible - Does the site have a premium package that allows using the feature (if not relevant null)
 * @property {string} previousPage - last page seen by the user(product_page,products_catalog, editor...)
 * @property {string} shippingStatus - relevant only for orders page:    fulfilled, notFulfilled, partiallyFulfilled, cancelled
 * @property {string} origin - store manager / place order / order paid
 * @property {string} pageState - can be different for each page, e.g. empty state, with orders...
 * @property {boolean} hasOnlineStoreInstalled - if user at the opening ecom platform pages has online store installed (215..)
 * @property {number} loadTime - load_time
 * @property {boolean} isPremium - is the user a premium user when opening store manager
 * @property {string} pageName - page name in BO
 * @return {LogObject<pageLoadBmParams>} LogObject<pageLoadBmParams>
 */
export function pageLoadBm(params) {
    return { evid: 313, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'settingChangeCheckoutSetting' event (evid: 315)
 *
 * Event description: in eCommerce settings - when toggling on/off the SF visibility toggle or mark the mandatory checkbox
 *
 * @param {settingChangeCheckoutSettingParams} params - The parameters for this event
 * @property {string} field - company_name/address/phone/policy_agreement/subscription/ custom
 * @property {string} appName - app_name
 * @property {string} type - visibility / mandatory / default_state/ title (for custom)
 * @property {string} value - on/off (for type =visibility ) | checked / unchecked (for type = mandatory / default_state) | user's string value (for title)
 * @return {LogObject<settingChangeCheckoutSettingParams>} LogObject<settingChangeCheckoutSettingParams>
 */
export function settingChangeCheckoutSetting(params) {
    return { evid: 315, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'settingChangeECommerceSettingsField' event (evid: 319)
 *
 * Event description: in settings tab - when changing one of the text fields or the eCommerce logo
 *
 * @param {settingChangeECommerceSettingsFieldParams} params - The parameters for this event
 * @property {string} parameter - logo, busines name, phone, email address, address, email to buyer, mandatory cpf/cnpj tax (BR), minimum order
 * @property {string} appName - app_name
 * @property {string} origin - home/ bisiness info tab
 * @property {string} type - currently only in minimum order enable / input
 * @property {string} newValue - only for relevant fields
 * @return {LogObject<settingChangeECommerceSettingsFieldParams>} LogObject<settingChangeECommerceSettingsFieldParams>
 */
export function settingChangeECommerceSettingsField(params) {
    return { evid: 319, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'settingChangeECommercePolicies' event (evid: 320)
 *
 * Event description: in settings tab - when checking / unchecking a eCommerce policy
 *
 * @param {settingChangeECommercePoliciesParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} policyType - policy type
 * @property {string} oldValue - checked / unchecked
 * @property {string} newValue - checked / unchecked
 * @return {LogObject<settingChangeECommercePoliciesParams>} LogObject<settingChangeECommercePoliciesParams>
 */
export function settingChangeECommercePolicies(params) {
    return { evid: 320, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'settingChangeECommercePoliciesTitle' event (evid: 321)
 *
 * Event description: in settings tab - when checking / unchecking / changing text / changing title for a store policy
 *
 * @param {settingChangeECommercePoliciesTitleParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} policyType - policy type
 * @property {string} title - policy title
 * @return {LogObject<settingChangeECommercePoliciesTitleParams>} LogObject<settingChangeECommercePoliciesTitleParams>
 */
export function settingChangeECommercePoliciesTitle(params) {
    return { evid: 321, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'settingChangeECommercePoliciesText' event (evid: 322)
 *
 * Event description: in settings tab - when changing text in a eCommerce policy
 *
 * @param {settingChangeECommercePoliciesTextParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} text - text
 * @property {string} policyType - policy type
 * @return {LogObject<settingChangeECommercePoliciesTextParams>} LogObject<settingChangeECommercePoliciesTextParams>
 */
export function settingChangeECommercePoliciesText(params) {
    return { evid: 322, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'editorClickOnLeftBarTabsOnComponentSettingsSfe' event (evid: 33)
 *
 * Event description: click to view tab in the settings component (left bar)
 *
 * @param {editorClickOnLeftBarTabsOnComponentSettingsSfeParams} params - The parameters for this event
 * @property {string} tab - tab
 * @property {string} appName - app_name
 * @property {boolean} isPremiumEligible - Does the site have a premium package that allows using the feature (if not relevant null)
 * @property {string} origin - the state of the panel when the user clicked on the button
 * @property {string} component_id - grid gallery, slider galeery, product page, CurrencyConverter, AvalaraTax
 * @return {LogObject<editorClickOnLeftBarTabsOnComponentSettingsSfeParams>} LogObject<editorClickOnLeftBarTabsOnComponentSettingsSfeParams>
 */
export function editorClickOnLeftBarTabsOnComponentSettingsSfe(params) {
    return { evid: 33, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'tipsLoadInOwnerTipModalSrc130Evid34' event (evid: 34)
 *
 * Event description: load in owner tip modals (main or delete)
 * app ID only from v2 of the app (September 2024)
 *
 *
 * @param {tipsLoadInOwnerTipModalSrc130Evid34Params} params - The parameters for this event
 * @property {string} action - load / reset
 * @property {string} component - name of the component opened
 * @property {string} origin - the origin the component was opened from
 * @property {GUID} appId - app id to distinguish between the app versions
 * @return {LogObject<tipsLoadInOwnerTipModalSrc130Evid34Params>} LogObject<tipsLoadInOwnerTipModalSrc130Evid34Params>
 */
export function tipsLoadInOwnerTipModalSrc130Evid34(params) {
    return { evid: 34, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutTipsTipAddedToCheckoutCopySrc130Evid35' event (evid: 35)
 *
 * Event description: When an owner adds a tip in the checkout
 *
 * app ID sent only from v2 of the app (September 2024)
 *
 *
 * @param {checkoutTipsTipAddedToCheckoutCopySrc130Evid35Params} params - The parameters for this event
 * @property {number} rate - The tip value * 100000
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {boolean} isCustomTip - True - custom amount False - option from list
 * @property {string} tipType - Percentage/Fixed amount
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} orderId - orderId
 * @property {string} component - component
 * @property {string} action - action
 * @property {string} origin - origin
 * @property {GUID} appId - app id to distinguish between the app versions
 * @property {boolean} is_default - is default tip value
 * @property {string} draftOrderID - draft_order_id
 * @return {LogObject<checkoutTipsTipAddedToCheckoutCopySrc130Evid35Params>} LogObject<checkoutTipsTipAddedToCheckoutCopySrc130Evid35Params>
 */
export function checkoutTipsTipAddedToCheckoutCopySrc130Evid35(params) {
    return { evid: 35, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutPageLoad' event (evid: 36)
 *
 * Event description: The bi is being sent at the beginning of the app loading. This event indicates which "checkout page" was presented to the user.  there are 6 types that depends on: 1.cart_type : Digital/ Physical/ mixed (Digital &Physical)  2. shipping method : shipping /store pickup / non. 3. flow_type: quick / full
 *
 * @param {checkoutPageLoadParams} params - The parameters for this event
 * @property {boolean} isCalculationErrors - does calculation errors exist. Not exist in OOI checkout
 * @property {string} validationMessage - JSON with the validation that appear in the checkout while loaded. {type - warning/error, is_line_item - true/false, message - what the uou saw,name-DELIVERY/ OTHER_DEFAULT / LINE_ITEM_DEFAULT, suggested_fix}
 * @property {string} numLineItemsPerCatalog - Json - number of line items per catalog - example: {“stores”: 3, “bookings”: 4}. Not exist in OOI checkout
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} originType - the type of flow that lead to the checkout, like buy now, paypal, etc.
 * @property {boolean} isGiftCard - does gift card is available in the checkout
 * @property {boolean} isPolicy - has policies in checkout
 * @property {string} selectedCarrierServiceOption - Taken from: Checkout.Chekout object.Shipping Info.selectedCarrierServiceOption. Not exist in OOI checkout
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} siteLanguage - site Language. Not exist in OOI checkout
 * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
 * @property {string} flowType - 'quick flow' / 'full flow'. For OOI Checkout-   fastFlow = 'fast flow'.
 * fast flow means that the UoU was directed back to the fast flow checkout (after having missing info in the express checkout)
 * @property {string} appName - app_name
 * @property {boolean} isBuyerNote - does a buyes note exist. Not exist in OOI checkout
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} selectedDeliveryOption - what was the selected delivery option. Not exist in OOI checkout
 * @property {string} channelType - what is the channel type (web/back office..)
 * @property {boolean} savedAddress - true if the member has saved address. Not exist in OOI checkout
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} itemsQuantityPerCatalog - Json - sum of total items quantity per catalog - example: {“stores”: 9, “bookings”: 7}. Not exist in OOI checkout
 * @property {boolean} isDiscountPriceSummary - does discount exist in price summary. Not exist in OOI checkout
 * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected
 * @property {string} shippingCountry - buyer country code when viewing the checkout
 * @property {string} paymet_providers - array of payment providers connected to the site - WRONG FIELD
 * @property {string} first_stage - first stage open in checkout page
 * @property {boolean} isOutOfIframe - only send in the ooi flow. therefore, null = false
 * @property {boolean} isOwner - true if visitor is the site owner
 * @property {boolean} is_promo_code - is promo code (coupon) option visible in the cart & checkout
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor. Not exist in OOI checkout
 * @property {string} customFieldsTitle - title of custom field (can be a list if there is more than one field
 * @property {string} origin - the component / page that the visitor came from to the checkout, like product page, cart page, etc.
 * @property {boolean} isBuyNowPayLaterOption - is buy now pay later option exist. Not exist in OOI checkout
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {string} checkoutType - in viewer / out of viewer
 * @property {string} contactId - Buyer's contact ID. take from: Checkout.Chekout object.buyerInfo.contactId
 * @property {number} numLineItems - total number of line items. Not exist in OOI checkout
 * @property {number} dintinctNumItems - count distinct item_id. Not exist in OOI checkout
 * @property {string} shippingMethodType - what are the shipping option that are presented(shipping /store pickup / none). Not exist in OOI checkout
 * @property {boolean} isShippingPriceSummary - does shipping exist in price summary
 * @property {number} itemsQuantity - sum of total items quantity. Not exist in OOI checkout
 * @property {string} paymentProviders - array of payment providers connected to the site - From 1.4.23
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} isWithTimeSlots - True/false. for now - only for Restaurant. Does the checkout have an delivery option with a time slot?
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order. Not exist in OOI checkout
 * @property {string} dintinctNumItemsPerCatalog - Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}. Not exist in OOI checkout
 * @property {GUID} checkoutId - checkout_id
 * @property {string} buyerLanguage - buyer Language. Not exist in OOI checkout
 * @property {string} shippingCity - buyer city when viewing the checkout. Not exist in OOI checkout
 * @property {boolean} isTaxPriceSummary - does tax exist in price summary. Not exist in OOI checkout
 * @property {number} num_of_paymet_providers - How many payment providers does the site has connected. Not exist in OOI checkout
 * @property {boolean} savePaymentMethod - save payment method to one of the line items
 * @property {string} checkoutLayout - lean/full/one step (in the future..?) (if null  its from the past -> full)
 * @property {boolean} requiredPaymentPolicy - policy added to one of the line
 * @return {LogObject<checkoutPageLoadParams>} LogObject<checkoutPageLoadParams>
 */
export function checkoutPageLoad(params) {
    return { evid: 36, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ordersOrdersBulkActionApplie' event (evid: 364)
 *
 * Event description: merchant applies bulk action on selected orders (clicked Apply)
 *
 * @param {ordersOrdersBulkActionApplieParams} params - The parameters for this event
 * @property {boolean} readyForPickupChecked - is ":ready for pickup" checked on bulk action
 * @property {string} appName - appName
 * @property {string} catalogAppId - A list of verticals which are in those orders separated by “ ,“:(stores app id, bookings app_id, ...) - not relevant from Sep 24'
 * @property {boolean} markedAsPaidChecked - is "mark as paid" checked on bulk action
 * @property {number} num_items - number of items bulk action was applied on
 * @property {string} orderIds - array of order guids
 * @property {string} type - bulk action type (fulfilled / not fulfilled / paid / archive...)
 * @property {boolean} shippingConfirmationEmailChecked - is shipping confirmation email checked
 * @return {LogObject<ordersOrdersBulkActionApplieParams>} LogObject<ordersOrdersBulkActionApplieParams>
 */
export function ordersOrdersBulkActionApplie(params) {
    return { evid: 364, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutPageSpecificStageExpanded' event (evid: 37)
 *
 * Event description: when a new stage is expanded and another collapse.
 * When all data is visible. since june 2019 is sent also from OneApp
 *
 * @param {checkoutPageSpecificStageExpandedParams} params - The parameters for this event
 * @property {string} validationMessage - JSON with the validation that appear in the checkout while loaded. {type - warning/error, is_line_item - true/false, message - what the uou saw,name-DELIVERY/ OTHER_DEFAULT / LINE_ITEM_DEFAULT, suggested_fix}
 * @property {string} stage - which stage in the wishlist installation process
 * @property {boolean} isFirstTimeUsage - True If the user sees this stage for the first time, false if it's from edit click
 * @property {boolean} isGiftCardApplied - payment stage only  - true if giftcard is already applied on load
 * @property {GUID} cartId - cart_id
 * @property {number} itemsCount - Numbers of items in cart
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {string} appName - app_name
 * @property {string} catalogAppId - catalog_app_id
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} additionalRequiredField - only for 'placeOrderFastFlow' stage: required additional field that we didnt get info fron PayPal) for "Place Order" button to be clickable='state'/'zip code' / 'state and zip code' / 'none'
 * @property {boolean} isCartPaidOnlyWithGiftCard - True if payments options are hidden due to gift card fully cover the payment (with coupon or without)
 * @property {boolean} isOwner - true if visitor is the site owner
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor
 * @property {string} shippingStatus - data on shipping status from shipping service, only relevant after shipping details were field
 * @property {string} origin - 'OA StoreFront' (for OneApp)
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {string} validationSpi - jason with the validation that appear in the checkout while loaded. {type - warning/error, is_line_item - true/false, message - what the uou saw}
 * @property {string} shippingMethodType - shipping / store pickup or pickup  / none
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} hasGiftCard - payment stage only - true  if visitor sees the Gift Card Checkbox
 * @property {string} purchaseFlowId - purchase flow id. Note that this field was implemented in January 25
 * @property {boolean} hasTermsAndConditions - terms and conditions checkbox is shown to user on the review and place order step
 * @property {boolean} hasMarketingAndCommunications - marketing and communications checkbox is shown to user on the review and place order step
 * @property {boolean} hasRequiredPaymentPolicy - policy agreement checkbox is shown to user on the review and place order step
 *
 * @return {LogObject<checkoutPageSpecificStageExpandedParams>} LogObject<checkoutPageSpecificStageExpandedParams>
 */
export function checkoutPageSpecificStageExpanded(params) {
    return { evid: 37, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'localDeliveryCreatedCopySrc130Evid3700' event (evid: 3700)
 *
 * Event description: When a new local delivery is created
 *
 * @param {localDeliveryCreatedCopySrc130Evid3700Params} params - The parameters for this event
 * @property {number} rate - rate (multiple by 100,000!!) note that the field will be deprecated and instead to use the field "rates" (holds all rules)
 * @property {string} areaName - the area name the user input
 * @property {string} externalId - at the moment = shipping_rule_guid.
 * note that the field will be deprecated and instead to use the field "deliveryRegionIds"
 * @property {number} minimumOrder - minimum order for free delivery (if null then it's not offered) (multiple by 100,000!!).note that the field will be deprecated and instead to use the field "rates" (holds all rules)
 * @property {number} numTimeSlots - General number of time slots
 * @property {string} scheduledDeliveryConfig - Days config which contain days when delivery is enabled with it's time slots
 * @property {number} numDays - How many days were checked
 * @property {number} radius - The size of the radius - multiple by 100,000
 * @property {string} appDefId - app_def_id
 * @property {number} cutOffHours - Hours in format 0-23
 * @property {number} cutOffMinutes - Minutes in format 0-59
 * @property {number} handlingDays - handling_days
 * @property {string} localDeliveryId - local_delivery_id
 * @property {string} deliveryTime - The estimated delivery time
 * @property {number} zipCodesAmount - The amount of zip codes
 * @property {string} rates - jason with all rates rules- conditions and amounts.
 *
 *
 * @property {string} deliveryRegionIds - This local delivery is active for the following delivery regions. (array of all regions)
 * @property {boolean} isPolygon - Weather polygon is defining the delivery area (in the API field customAreaConfig)
 * @property {string} ratesOptions -  one of these values:
 * Free shipping
 * Flat rate
 * Rate by weight
 * Rate by price
 * Rate by quantity
 * Unknown
 *
 * *This field is hard coded by devs
 *
 * @return {LogObject<localDeliveryCreatedCopySrc130Evid3700Params>} LogObject<localDeliveryCreatedCopySrc130Evid3700Params>
 */
export function localDeliveryCreatedCopySrc130Evid3700(params) {
    return { evid: 3700, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'localDeliveryUpdatedCopySrc130Evid3701' event (evid: 3701)
 *
 * Event description: When a new local delivery is updated
 *
 * @param {localDeliveryUpdatedCopySrc130Evid3701Params} params - The parameters for this event
 * @property {number} rate - rate (multiple by 100,000!!).note that the field will be deprecated and instead to use the field "rates" (holds all rules)
 * @property {string} areaName - the area name the user input
 * @property {string} externalId - at the moment = shipping_rule_guid.
 * note that the field will be deprecated and instead to use the field "deliveryRegionIds"
 * @property {number} minimumOrder - minimum order for free delivery (if null then it's not offered) (multiple by 100,000!!).note that the field will be deprecated and instead to use the field "rates" (holds all rules)
 * @property {number} numTimeSlots - General number of time slots
 * @property {string} scheduledDeliveryConfig - Days config which contain days when delivery is enabled with it's time slots
 * @property {number} numDays - How many days were checked
 * @property {number} radius - The size of the radius - multiple by 100,000
 * @property {string} appDefId - app_def_id
 * @property {number} cutOffHours - Hours in format 0-23
 * @property {number} cutOffMinutes - Minutes in format 0-59
 * @property {number} handlingDays - Amount of days before the first delivery option date.
 * @property {string} localDeliveryId - local_delivery_id
 * @property {string} deliveryTime - The estimated delivery time
 * @property {number} zipCodesAmount - The amount of zip codes
 * @property {string} rates - jason with all rates rules- conditions and amounts
 * @property {boolean} isPolygon - Weather polygon is defining the delivery area (in the API field customAreaConfig)
 * @property {string} deliveryRegionIds - This local delivery is active for the following delivery regions. (array of all regions)
 * @property {string} ratesOptions - one of these values:
 * Free shipping
 * Flat rate
 * Rate by weight
 * Rate by price
 * Rate by quantity
 * Unknown
 *
 * *This field is hard coded by devs
 *
 * @return {LogObject<localDeliveryUpdatedCopySrc130Evid3701Params>} LogObject<localDeliveryUpdatedCopySrc130Evid3701Params>
 */
export function localDeliveryUpdatedCopySrc130Evid3701(params) {
    return { evid: 3701, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'localDeliveryDeletedSrc130Evid3702' event (evid: 3702)
 *
 * Event description: When a new local delivery is deleted
 *
 * @param {localDeliveryDeletedSrc130Evid3702Params} params - The parameters for this event
 * @property {string} appDefId - app_def_id
 * @property {string} localDeliveryId - local_delivery_id
 * @return {LogObject<localDeliveryDeletedSrc130Evid3702Params>} LogObject<localDeliveryDeletedSrc130Evid3702Params>
 */
export function localDeliveryDeletedSrc130Evid3702(params) {
    return { evid: 3702, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileSuccessCallToExternalAppFromDashboardSrc130Evid3705' event (evid: 3705)
 *
 * Event description: When there was a success call to external app in the dashboard (user side)
 *
 * @param {deliveryProfileSuccessCallToExternalAppFromDashboardSrc130Evid3705Params} params - The parameters for this event
 * @property {string} appId - app_id
 * @return {LogObject<deliveryProfileSuccessCallToExternalAppFromDashboardSrc130Evid3705Params>} LogObject<deliveryProfileSuccessCallToExternalAppFromDashboardSrc130Evid3705Params>
 */
export function deliveryProfileSuccessCallToExternalAppFromDashboardSrc130Evid3705(params) {
    return { evid: 3705, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileFailedCallToExternalAppFromDashboardSrc130Evid3706' event (evid: 3706)
 *
 * Event description: When there was a failed call to external app iin the dashboard (user side)
 *
 * @param {deliveryProfileFailedCallToExternalAppFromDashboardSrc130Evid3706Params} params - The parameters for this event
 * @property {string} appId - app_id
 * @property {string} errorMessage - What was the error message
 * @return {LogObject<deliveryProfileFailedCallToExternalAppFromDashboardSrc130Evid3706Params>} LogObject<deliveryProfileFailedCallToExternalAppFromDashboardSrc130Evid3706Params>
 */
export function deliveryProfileFailedCallToExternalAppFromDashboardSrc130Evid3706(params) {
    return { evid: 3706, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileSuccessCallToExternalAppFromCartCheckoutSrc130Evid3707' event (evid: 3707)
 *
 * Event description: When there was a success call to external app in checkout/cart (UoU flow)
 *
 * @param {deliveryProfileSuccessCallToExternalAppFromCartCheckoutSrc130Evid3707Params} params - The parameters for this event
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} appId - app_id
 * @property {boolean} isPartial - Weather the success is for all items (=false) or partial (=true)
 * @property {string} numPartialShippingOptions - number of shipping options that had partial success
 * @property {string} numNonPartialShippingOptions - number of shipping options that had full success
 * @property {string} lineItemsForPartialShippingOption - For partial success- array  of shipping option code and line item ids that the partial success is relevant for
 * @property {boolean} isCache - Whether the success call was from cache or not
 * @return {LogObject<deliveryProfileSuccessCallToExternalAppFromCartCheckoutSrc130Evid3707Params>} LogObject<deliveryProfileSuccessCallToExternalAppFromCartCheckoutSrc130Evid3707Params>
 */
export function deliveryProfileSuccessCallToExternalAppFromCartCheckoutSrc130Evid3707(params) {
    return { evid: 3707, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileFailedCallToExternalAppFromCartCheckoutSrc130Evid3708' event (evid: 3708)
 *
 * Event description: When there was a failed call to external app in checkout/cart (UoU flow) .
 * Note that when there's fall back to backup rate we don't consider it as failure
 *
 *
 *
 * @param {deliveryProfileFailedCallToExternalAppFromCartCheckoutSrc130Evid3708Params} params - The parameters for this event
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} appId - app_id
 * @property {string} errorMessage - What was the error message
 * @return {LogObject<deliveryProfileFailedCallToExternalAppFromCartCheckoutSrc130Evid3708Params>} LogObject<deliveryProfileFailedCallToExternalAppFromCartCheckoutSrc130Evid3708Params>
 */
export function deliveryProfileFailedCallToExternalAppFromCartCheckoutSrc130Evid3708(params) {
    return { evid: 3708, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileShippingOptionsPresentedSrc130Evid3709' event (evid: 3709)
 *
 * Event description: Which shipping options were presented to the UoU in the checkout/ cart
 *
 * @param {deliveryProfileShippingOptionsPresentedSrc130Evid3709Params} params - The parameters for this event
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} 'ShippingOptionsPresented ' - array of carrier_id and shipping options that were presented to the UoU
 * @return {LogObject<deliveryProfileShippingOptionsPresentedSrc130Evid3709Params>} LogObject<deliveryProfileShippingOptionsPresentedSrc130Evid3709Params>
 */
export function deliveryProfileShippingOptionsPresentedSrc130Evid3709(params) {
    return { evid: 3709, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'tipsSaveTipEntityInOwnerCheckoutSrc130Evid38' event (evid: 38)
 *
 * Event description: When an owner adds a tip in the checkout and saves it (all the info of the tip)
 *
 * app ID sent only from v2 of the app (September 2024)
 *
 *
 * @param {tipsSaveTipEntityInOwnerCheckoutSrc130Evid38Params} params - The parameters for this event
 * @property {number} rate - The tip value * 100000
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {boolean} isCustomTip - True - custom amount False - option from list
 * @property {string} tipType - Percentage/Fixed amount
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} orderId - orderId
 * @property {string} origin - origin
 * @property {string} tipSplit - proportionally / evenly
 * @property {number} numberStaffMembers - numberStaffMembers
 * @property {boolean} HasUnassignedTip - HasUnassignedTip
 * @property {GUID} appId - app id to distinguish between the app versions
 * @property {boolean} is_default - is default tip value
 * @return {LogObject<tipsSaveTipEntityInOwnerCheckoutSrc130Evid38Params>} LogObject<tipsSaveTipEntityInOwnerCheckoutSrc130Evid38Params>
 */
export function tipsSaveTipEntityInOwnerCheckoutSrc130Evid38(params) {
    return { evid: 38, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutPayingForExistingOrderPaylinkNotFoundSrc130Evid39' event (evid: 39)
 *
 * Event description: When ‘paylink not found’ message is showing up in the flow of paying for an existing order
 *  (paylinks on checkout)
 *
 *
 *
 * @param {checkoutPayingForExistingOrderPaylinkNotFoundSrc130Evid39Params} params - The parameters for this event
 * @property {string} orderId - Order_id that the uou is paying for
 * @property {string} orderPaymentRequestId - order_payment_request_id
 * @property {string} appId - App Def ID that created the order payment request
 * @property {string} externalId - Reference to an ID from an external system, indicating the original source of the order payment request.
 * @property {string} paymentRequestStatus - PAID/ EXPIRED /UNPAID/ UNKNOWN_STATUS
 * @return {LogObject<checkoutPayingForExistingOrderPaylinkNotFoundSrc130Evid39Params>} LogObject<checkoutPayingForExistingOrderPaylinkNotFoundSrc130Evid39Params>
 */
export function checkoutPayingForExistingOrderPaylinkNotFoundSrc130Evid39(params) {
    return { evid: 39, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'shippingRatesSendRequestForShippingRatesFromApp' event (evid: 3900)
 *
 * Event description: When a request for shipping rates for an order from an app is being sent. (from cart/ checkout)
 *
 * @param {shippingRatesSendRequestForShippingRatesFromAppParams} params - The parameters for this event
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} toAddress - The address the order is being sent to
 * @property {string} fromCity - The city the order is being sent from
 * @property {number} itemsPrice - The price of the items in the order that need to be shipped. multiple by 100,000
 * @property {string} appDefId - appDefId
 * @property {string} weightUnit - The unit of the weight. values: UNSPECIFIED_WEIGHT_UNIT, KG, LB
 * @property {string} toCountry - The country the order is being sent to
 * @property {string} toCity - The city the order is being sent to
 * @property {string} fromAddress - The address the order is being sent from
 * @property {string} carrierId - the app that we called to request
 * @property {string} currency - currency
 * @property {string} fromCountry - The country the order is being sent from
 * @property {string} identityType - identityType
 * @return {LogObject<shippingRatesSendRequestForShippingRatesFromAppParams>} LogObject<shippingRatesSendRequestForShippingRatesFromAppParams>
 */
export function shippingRatesSendRequestForShippingRatesFromApp(params) {
    return { evid: 3900, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'shippingRatesGetResponseForShippingRatesFromApp' event (evid: 3901)
 *
 * Event description: When a response for shipping rates for an order from an app is being sent.(from cart/ checkout)
 *
 * @param {shippingRatesGetResponseForShippingRatesFromAppParams} params - The parameters for this event
 * @property {string} shippingOptions - a Json with the title and the price of each option
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} toAddress - The address the order is being sent to
 * @property {string} appDefId - appDefId
 * @property {string} fromAddress - The address the order is being sent from
 * @property {string} carrierId - the app that we called to request
 * @property {string} identityType - identityType
 * @return {LogObject<shippingRatesGetResponseForShippingRatesFromAppParams>} LogObject<shippingRatesGetResponseForShippingRatesFromAppParams>
 */
export function shippingRatesGetResponseForShippingRatesFromApp(params) {
    return { evid: 3901, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'shippingInstalledAppAddedRemoved' event (evid: 3902)
 *
 * Event description: when a user sets up (or turns off) an app on the shipping page. sent after the user saves the shipping rule (under the old shipping) or save the modal (under the new shipping). When the user is updating the app fields it will send it as well
 * Note that for the new shipping it will be send after adding/removing one of the 4 "native" apps as well: pickup,shipping,local delivery,usps
 *
 * @param {shippingInstalledAppAddedRemovedParams} params - The parameters for this event
 * @property {number} rate - backup rate
 * @property {string} name - backup option name
 * @property {GUID} shippingRuleId - shipping_rule_guid. For the new shipping start to use the fields profile_id, region_id instead
 * @property {boolean} isActive - true/false (turn on/off)
 * @property {GUID} appId - app id.
 * @property {string} profileId - under which profile_id the action was made
 * @property {string} regionId - under which region_id the action was made
 * @property {string} additionalCharges - array that includes all additional charges:
 * type (string)
 * description (string)
 * price (number)
 * @property {string} action - add/remove/update
 * @return {LogObject<shippingInstalledAppAddedRemovedParams>} LogObject<shippingInstalledAppAddedRemovedParams>
 */
export function shippingInstalledAppAddedRemoved(params) {
    return { evid: 3902, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickToOpenPreviewItemsInOrderSrc130Evid4' event (evid: 4)
 *
 * Event description: When the user click to expand the items in the orders list
 *
 * @param {clickToOpenPreviewItemsInOrderSrc130Evid4Params} params - The parameters for this event
 * @property {GUID} orderId - order_id
 * @property {string} action - expand / collapse
 * @return {LogObject<clickToOpenPreviewItemsInOrderSrc130Evid4Params>} LogObject<clickToOpenPreviewItemsInOrderSrc130Evid4Params>
 */
export function clickToOpenPreviewItemsInOrderSrc130Evid4(params) {
    return { evid: 4, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutPayingForExistingOrderCheckoutPageLoadedSrc130Evid40' event (evid: 40)
 *
 * Event description: When checkout page is finished to loading - paying for an existing order (paylinks on checkout).
 * Note- in order to know which payment providers were shown, use cashier bi 64:180 by choosing the fields:
 * app_session_id=> payment_request_id
 * and then to pull the data from the fields : payment_category,payment_provider
 *
 *
 * @param {checkoutPayingForExistingOrderCheckoutPageLoadedSrc130Evid40Params} params - The parameters for this event
 * @property {string} orderId - Order_id that the uou is paying for
 * @property {string} orderPaymentRequestId - order_payment_request_id
 * @property {string} paymentRequestStatus - PAID/ EXPIRED /UNPAID/ UNKNOWN_STATUS
 * @property {string} currency - Currency code. The value will always match the currency used in the order.
 * @property {string} title - Title to be displayed to the customer on the payment page. Provide a clear and descriptive title to inform the customer about what they are paying for
 * @property {string} description - Description to be displayed to the customer on the payment page. Write a detailed description so the customer understands what they are paying for
 * @property {DateTime} expirationDate - Time and date the order payment request expires
 * @property {string} appId - App Def ID that created the order payment request
 * @property {string} externalId - Reference to an ID from an external system, indicating the original source of the order payment request.
 * @property {boolean} isPolicy - has policies in checkout (any policy)
 * @property {number} amountLong - Amount to be collected. INT multiply by 100000
 * @return {LogObject<checkoutPayingForExistingOrderCheckoutPageLoadedSrc130Evid40Params>} LogObject<checkoutPayingForExistingOrderCheckoutPageLoadedSrc130Evid40Params>
 */
export function checkoutPayingForExistingOrderCheckoutPageLoadedSrc130Evid40(params) {
    return { evid: 40, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutPayingForExistingOrderClickOnPayNowSrc130Evid41' event (evid: 41)
 *
 * Event description: When uou clicks to pay for existing order (paylinks on checkout)
 *
 *
 * @param {checkoutPayingForExistingOrderClickOnPayNowSrc130Evid41Params} params - The parameters for this event
 * @property {string} orderId - Order_id that the uou is paying for
 * @property {string} orderPaymentRequestId - order_payment_request_id
 * @property {string} paymentRequestStatus - PAID/ EXPIRED /UNPAID/ UNKNOWN_STATUS
 * @property {string} currency - Currency code. The value will always match the currency used in the order.
 * @property {string} title - Title to be displayed to the customer on the payment page. Provide a clear and descriptive title to inform the customer about what they are paying for
 * @property {string} description - Description to be displayed to the customer on the payment page. Write a detailed description so the customer understands what they are paying for
 * @property {DateTime} expirationDate - Time and date the order payment request expires
 * @property {string} appId - App Def ID that created the order payment request
 * @property {string} externalId - Reference to an ID from an external system, indicating the original source of the order payment request.
 * @property {boolean} isPolicy - has policies in checkout (any policy)
 * @property {number} amountLong - Amount to be collected. INT multiply by 100000
 * @property {string} selectedPaymentProvider - payment provider that was chosen
 * @return {LogObject<checkoutPayingForExistingOrderClickOnPayNowSrc130Evid41Params>} LogObject<checkoutPayingForExistingOrderClickOnPayNowSrc130Evid41Params>
 */
export function checkoutPayingForExistingOrderClickOnPayNowSrc130Evid41(params) {
    return { evid: 41, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ordersOrderStatusChanged' event (evid: 414)
 *
 * Event description: Order status changed (paid/notPaid/partiallyRefunded/fulfilled/archive/unarchive/refunded/canceled/notFulfilled)
 *
 * @param {ordersOrderStatusChangedParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} orderId - order_id, if the action was made in a bulk then send NULL
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} newStatus - new_status
 * @property {string} statustype - payment / shipping
 * @property {string} origin - order page / order page manage / order page bottom panel / orders list
 * @property {string} oldStatus - old_status
 * @property {string} oldFulfillmentStatusesAggregate - Old value before change- Unique string values based on Fulfillment entities statuses - currently for restaurants orders ( pending, accepted, out for delivery etc. )
 * @property {string} newFulfillmentStatusesAggregate - New value - Unique string values based on Fulfillment entities statuses - currently for restaurants orders ( pending, accepted, out for delivery etc. )
 * @property {boolean} isAuthorized - is_authorized
 * @return {LogObject<ordersOrderStatusChangedParams>} LogObject<ordersOrderStatusChangedParams>
 */
export function ordersOrderStatusChanged(params) {
    return { evid: 414, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutPayingForExistingOrderShowHideOverviewSectionMobileViewSrc130Evid42' event (evid: 42)
 *
 * Event description: For paying for existing order (paylinks on checkout)- When a uou on a mobile device click on the overview section to expand or collapse it and see/unsee the list of all the items at the upper part of the checkout.
 *
 * @param {checkoutPayingForExistingOrderShowHideOverviewSectionMobileViewSrc130Evid42Params} params - The parameters for this event
 * @property {string} orderId - Order_id that the uou is paying for
 * @property {string} orderPaymentRequestId - order_payment_request_id
 * @property {string} appId - App Def ID that created the order payment request
 * @property {string} externalId - Reference to an ID from an external system, indicating the original source of the order payment request.
 * @property {string} action - show/hide
 * @return {LogObject<checkoutPayingForExistingOrderShowHideOverviewSectionMobileViewSrc130Evid42Params>} LogObject<checkoutPayingForExistingOrderShowHideOverviewSectionMobileViewSrc130Evid42Params>
 */
export function checkoutPayingForExistingOrderShowHideOverviewSectionMobileViewSrc130Evid42(params) {
    return { evid: 42, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutPayingForExistingOrderThankYouPageLoadedSrc130Evid43' event (evid: 43)
 *
 * Event description: When thank you page is loaded after order was paid in the flow of ‘paying for existing order (paylinks on checkout)
 *
 * @param {checkoutPayingForExistingOrderThankYouPageLoadedSrc130Evid43Params} params - The parameters for this event
 * @property {string} orderId - Order_id that the uou is paying for
 * @property {string} orderPaymentRequestId - order_payment_request_id
 * @property {string} appId - App Def ID that created the order payment request
 * @property {string} externalId - Reference to an ID from an external system, indicating the original source of the order payment request.
 * @property {string} paymentRequestStatus - PAID/ EXPIRED /UNPAID/ UNKNOWN_STATUS
 * @return {LogObject<checkoutPayingForExistingOrderThankYouPageLoadedSrc130Evid43Params>} LogObject<checkoutPayingForExistingOrderThankYouPageLoadedSrc130Evid43Params>
 */
export function checkoutPayingForExistingOrderThankYouPageLoadedSrc130Evid43(params) {
    return { evid: 43, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxCreateAvalaraCalculatorMapping' event (evid: 4301)
 *
 * Event description: When a mapping is created
 *
 * @param {taxCreateAvalaraCalculatorMappingParams} params - The parameters for this event
 * @property {string} taxCode - tax_code
 * @property {string} description - description
 * @property {GUID} taxGroupId - tax_group_id
 * @property {GUID} avalaraTaxMappingId - avalara_tax_mapping_id
 * @return {LogObject<taxCreateAvalaraCalculatorMappingParams>} LogObject<taxCreateAvalaraCalculatorMappingParams>
 */
export function taxCreateAvalaraCalculatorMapping(params) {
    return { evid: 4301, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxUpdateAvalaraCalculatorMapping' event (evid: 4302)
 *
 * Event description: When a mapping is updated
 *
 * @param {taxUpdateAvalaraCalculatorMappingParams} params - The parameters for this event
 * @property {string} taxCode - tax_code
 * @property {string} description - description
 * @property {GUID} taxGroupId - tax_group_id
 * @property {GUID} avalaraTaxMappingId - avalara_tax_mapping_id
 * @return {LogObject<taxUpdateAvalaraCalculatorMappingParams>} LogObject<taxUpdateAvalaraCalculatorMappingParams>
 */
export function taxUpdateAvalaraCalculatorMapping(params) {
    return { evid: 4302, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxCreateUpdateDeleteNexus' event (evid: 4303)
 *
 * Event description: When a tax region is defined with Avalara calculator- a nexus is created in Avalara
 *
 * @param {taxCreateUpdateDeleteNexusParams} params - The parameters for this event
 * @property {GUID} taxRegionId - tax_region_id
 * @property {number} nexusId - nexus_id
 * @property {string} taxCountry - tax_country
 * @property {string} subDivision - sub_division
 * @property {string} action - action - create/ update/ delete
 * @return {LogObject<taxCreateUpdateDeleteNexusParams>} LogObject<taxCreateUpdateDeleteNexusParams>
 */
export function taxCreateUpdateDeleteNexus(params) {
    return { evid: 4303, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxFullRefundLockedTaxTransactionAvalara' event (evid: 4304)
 *
 * Event description: When trying to adjust a locked transaction we fall back to creating a new transaction and refunding the old transaction fully. this event is sent to indicate that the full refund of the transaction with transactionCode took place.
 *
 * @param {taxFullRefundLockedTaxTransactionAvalaraParams} params - The parameters for this event
 * @property {number} orderNumber - order index number the users are seeing in their orders page
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} orderId - order_id
 * @property {string} transactionCode - code of the transaction in Avalara to fully refund
 * @property {string} errorReason - in case when is_success = false - what was the reason
 * @property {boolean} isSuccess - true if refund commit didn't fail
 * @property {string} appDefId - The app id of the calculator
 * @property {string} draftOrderId - draft order id (exists for OrderDeltasCommitted event only)
 * @return {LogObject<taxFullRefundLockedTaxTransactionAvalaraParams>} LogObject<taxFullRefundLockedTaxTransactionAvalaraParams>
 */
export function taxFullRefundLockedTaxTransactionAvalara(params) {
    return { evid: 4304, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxCancelTaxTransactionWithAvalara' event (evid: 4305)
 *
 * Event description: Reporting to Avalara Tax API when an order was canceled
 *
 * @param {taxCancelTaxTransactionWithAvalaraParams} params - The parameters for this event
 * @property {number} orderNumber - order index number the users are seeing in their orders page
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} orderId - order_id
 * @property {number} taxCommittedLong - INT (multiplied by 100000), send 0 if commit failed
 * @property {string} errorReason - in case when is_success = false - what was the reason
 * @property {boolean} isSuccess - true if refund commit didn't fail
 * @property {string} appDefId - The app id of the calculator
 * @return {LogObject<taxCancelTaxTransactionWithAvalaraParams>} LogObject<taxCancelTaxTransactionWithAvalaraParams>
 */
export function taxCancelTaxTransactionWithAvalara(params) {
    return { evid: 4305, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutPayingForExistingOrderPaylinkExpiredPopupSrc130Evid44' event (evid: 44)
 *
 * Event description: When the modal of ‘paylink expired’ is showing up for uou in the flow of paying for an existing order  (paylinks on checkout)
 *
 * @param {checkoutPayingForExistingOrderPaylinkExpiredPopupSrc130Evid44Params} params - The parameters for this event
 * @property {string} orderId - Order_id that the uou is paying for
 * @property {string} orderPaymentRequestId - order_payment_request_id
 * @property {string} appId - App Def ID that created the order payment request
 * @property {string} externalId - Reference to an ID from an external system, indicating the original source of the order payment request.
 * @property {string} paymentRequestStatus - PAID/ EXPIRED /UNPAID/ UNKNOWN_STATUS
 * @property {DateTime} expirationDate - Time and date the order payment request expires
 * @return {LogObject<checkoutPayingForExistingOrderPaylinkExpiredPopupSrc130Evid44Params>} LogObject<checkoutPayingForExistingOrderPaylinkExpiredPopupSrc130Evid44Params>
 */
export function checkoutPayingForExistingOrderPaylinkExpiredPopupSrc130Evid44(params) {
    return { evid: 44, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutPayingForExistingOrderErrorMessageSrc130Evid45' event (evid: 45)
 *
 * Event description: When error message is showing up in the flow of paying for an existing order
 *  (paylinks on checkout) . can be when the link is not opened/ when the paylink is not found
 *
 *
 * @param {checkoutPayingForExistingOrderErrorMessageSrc130Evid45Params} params - The parameters for this event
 * @property {string} orderId - Order_id that the uou is paying for
 * @property {string} orderPaymentRequestId - order_payment_request_id
 * @property {string} appId - App Def ID that created the order payment request
 * @property {string} externalId - Reference to an ID from an external system, indicating the original source of the order payment request.
 * @property {string} paymentRequestStatus - PAID/ EXPIRED /UNPAID/ UNKNOWN_STATUS
 * @property {string} errorMessage - Error message that was showing up to the uou: can be when the link is not opened/ when the paylink is not found
 * @return {LogObject<checkoutPayingForExistingOrderErrorMessageSrc130Evid45Params>} LogObject<checkoutPayingForExistingOrderErrorMessageSrc130Evid45Params>
 */
export function checkoutPayingForExistingOrderErrorMessageSrc130Evid45(params) {
    return { evid: 45, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxTaxRuleCreatedSrc130Evid4501' event (evid: 4501)
 *
 * Event description: When the user created a tax region
 *
 * @param {taxTaxRuleCreatedSrc130Evid4501Params} params - The parameters for this event
 * @property {GUID} calculatorId - The calculator id for this specific country.
 * @property {string} appDefId - app_def_id
 * @property {GUID} id - tax_region_id
 * @property {string} countryCode - the country of the rule
 * @property {boolean} taxIncludedInPrice - tax_included_in_price
 * @property {string} subDivision - the state in the rule (if there is no state send NULL)
 * @return {LogObject<taxTaxRuleCreatedSrc130Evid4501Params>} LogObject<taxTaxRuleCreatedSrc130Evid4501Params>
 */
export function taxTaxRuleCreatedSrc130Evid4501(params) {
    return { evid: 4501, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxTaxRuleUpdatedSrc130Evid4502' event (evid: 4502)
 *
 * Event description: When a tax region is updated
 *
 * @param {taxTaxRuleUpdatedSrc130Evid4502Params} params - The parameters for this event
 * @property {GUID} calculatorId - The calculator id of this specific country. When it manual - send null.
 * @property {string} appDefId - app_def_id
 * @property {number} revision - revision
 * @property {GUID} id - tax_region_id
 * @property {string} countryCode - country
 * @property {boolean} taxIncludedInPrice - tax_included_in_price
 * @property {string} subDivision - the state in the rule (if there is no state send NULL)
 * @return {LogObject<taxTaxRuleUpdatedSrc130Evid4502Params>} LogObject<taxTaxRuleUpdatedSrc130Evid4502Params>
 */
export function taxTaxRuleUpdatedSrc130Evid4502(params) {
    return { evid: 4502, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxTaxRuleDeletedSrc130Evid4503' event (evid: 4503)
 *
 * Event description: When a tax region is deleted
 *
 * @param {taxTaxRuleDeletedSrc130Evid4503Params} params - The parameters for this event
 * @property {GUID} calculatorId - calculator_id
 * @property {string} appDefId - app_def_id
 * @property {number} revision - revision
 * @property {GUID} id - tax_region_id
 * @property {string} countryCode - country
 * @property {boolean} taxIncludedInPrice - tax_included_in_price
 * @property {string} subDivision - sub_division
 * @return {LogObject<taxTaxRuleDeletedSrc130Evid4503Params>} LogObject<taxTaxRuleDeletedSrc130Evid4503Params>
 */
export function taxTaxRuleDeletedSrc130Evid4503(params) {
    return { evid: 4503, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'oaDebugGeneralEvent' event (evid: 458)
 *
 * Event description: event for debuging
 *
 * @param {oaDebugGeneralEventParams} params - The parameters for this event
 * @property {string} name - what for event is sent
 * @property {string} info - debug info
 * @return {LogObject<oaDebugGeneralEventParams>} LogObject<oaDebugGeneralEventParams>
 */
export function oaDebugGeneralEvent(params) {
    return { evid: 458, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'membersClickChangeInCheckoutStages' event (evid: 46)
 *
 * Event description: click to 'change' autofill info in the checkout process
 *
 * @param {membersClickChangeInCheckoutStagesParams} params - The parameters for this event
 * @property {string} stage - which stage in the wishlist installation process
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<membersClickChangeInCheckoutStagesParams>} LogObject<membersClickChangeInCheckoutStagesParams>
 */
export function membersClickChangeInCheckoutStages(params) {
    return { evid: 46, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutPayingForExistingOrderClickOnCheckoutPoliciesSrc130Evid47' event (evid: 47)
 *
 * Event description:
 * When the uou clicks on checkout policies in the flow of paying for an existing order
 *  (paylinks on checkout)
 *
 *
 *
 * @param {checkoutPayingForExistingOrderClickOnCheckoutPoliciesSrc130Evid47Params} params - The parameters for this event
 * @property {string} orderId - Order_id that the uou is paying for
 * @property {string} orderPaymentRequestId - order_payment_request_id
 * @property {string} appId - App Def ID that created the order payment request
 * @property {string} externalId - Reference to an ID from an external system, indicating the original source of the order payment request.
 * @property {string} linkLocation - the location of the link. The options are: footer / form
 * @property {string} policyType - on which policy the user clicked. The options: terms and conditions / privacy policy / return policy / digital item policy / con
 * @return {LogObject<checkoutPayingForExistingOrderClickOnCheckoutPoliciesSrc130Evid47Params>} LogObject<checkoutPayingForExistingOrderClickOnCheckoutPoliciesSrc130Evid47Params>
 */
export function checkoutPayingForExistingOrderClickOnCheckoutPoliciesSrc130Evid47(params) {
    return { evid: 47, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxTaxRateEstimationFromCalculator' event (evid: 4701)
 *
 * Event description: Estimation of tax rate was obtained from the app in the cart/checkout
 *
 * @param {taxTaxRateEstimationFromCalculatorParams} params - The parameters for this event
 * @property {string} errorsData - will be send once the estimation is zero and failed
 * @property {GUID} calculatorId - The calculator id of this specific country. When it manual - send null.
 * @property {string} calculatorName - calculator_name
 * @property {string} externalEntityId - in case its ecom- purchase_flow_id
 * @property {string} appDefId - app_def_id
 * @property {number} taxLong - Tax estimation total tax * 100,000
 * @property {string} estimateRequestId - estimate_request_id
 * @property {string} currency - currency
 * @property {GUID} msid - msid
 * @return {LogObject<taxTaxRateEstimationFromCalculatorParams>} LogObject<taxTaxRateEstimationFromCalculatorParams>
 */
export function taxTaxRateEstimationFromCalculator(params) {
    return { evid: 4701, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxEstimateErrorFromCalculator' event (evid: 4702)
 *
 * Event description: obtained error when the user gets an error in estimating the tax amount in the cart/checkout
 *
 * @param {taxEstimateErrorFromCalculatorParams} params - The parameters for this event
 * @property {GUID} calculatorId - The calculator id- when it manual - send null.
 * @property {string} errorMessage - error message from Avalara
 * @property {string} calculatorName - calculator_name
 * @property {string} externalEntityId - external_entity_id. in case its ecom-purchase_flow_id
 * @property {string} appDefId - app_def_id
 * @property {string} errorType - error_type
 * @property {string} estimateRequestId - estimate_request_id
 * @return {LogObject<taxEstimateErrorFromCalculatorParams>} LogObject<taxEstimateErrorFromCalculatorParams>
 */
export function taxEstimateErrorFromCalculator(params) {
    return { evid: 4702, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxEstimationRequestToCalculator' event (evid: 4703)
 *
 * Event description: An estimation Request of tax rate was obtained from the app in the cart/checkout and sent to the tax service
 *
 * @param {taxEstimationRequestToCalculatorParams} params - The parameters for this event
 * @property {string} calculatorId - The calculator id
 * @property {string} calculatorName - calculator_name
 * @property {string} externalEntityId - in case its ecom-purchase_flow_id
 * @property {string} appDefId - app_def_id
 * @property {string} estimateRequestId - estimate_request_id
 * @property {string} currency - currency
 * @return {LogObject<taxEstimationRequestToCalculatorParams>} LogObject<taxEstimationRequestToCalculatorParams>
 */
export function taxEstimationRequestToCalculator(params) {
    return { evid: 4703, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxEstimationResponseToCalculator' event (evid: 4704)
 *
 * Event description: An estimation response of the tax rate was obtained from the app in the cart/checkout and sent to the tax service
 *
 * @param {taxEstimationResponseToCalculatorParams} params - The parameters for this event
 * @property {string} externalEntityId - cart_id/checkout_id
 * @property {number} taxLong - Tax estimation total tax * 100,000
 * @property {string} estimateRequestId - estimate_request_id
 * @property {string} currency - currency
 * @return {LogObject<taxEstimationResponseToCalculatorParams>} LogObject<taxEstimationResponseToCalculatorParams>
 */
export function taxEstimationResponseToCalculator(params) {
    return { evid: 4704, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'membersAddressInCheckoutWasChanged' event (evid: 48)
 *
 * Event description: when address was changed in the checkout
 *
 * @param {membersAddressInCheckoutWasChangedParams} params - The parameters for this event
 * @property {string} stage - which stage the address was changed (payment/shipping..)
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} origin - addresses list / add address / edit address
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<membersAddressInCheckoutWasChangedParams>} LogObject<membersAddressInCheckoutWasChangedParams>
 */
export function membersAddressInCheckoutWasChanged(params) {
    return { evid: 48, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cartClickOnCartIconToOpenMiniCart' event (evid: 49)
 *
 * Event description: click on cart icon to open the mini cart
 *
 * @param {cartClickOnCartIconToOpenMiniCartParams} params - The parameters for this event
 * @property {string} viewMode - editor / site / preview
 * @property {GUID} cartId - cart_id
 * @property {number} itemsCount - Numbers of items in cart
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical).
 * Note this field is deprecated since January 25
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {boolean} isNavigateCart - hard coded false (for Anodot)
 * @property {GUID} ecomId - ecom_id
 * @return {LogObject<cartClickOnCartIconToOpenMiniCartParams>} LogObject<cartClickOnCartIconToOpenMiniCartParams>
 */
export function cartClickOnCartIconToOpenMiniCart(params) {
    return { evid: 49, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'draftOrderOrderDraftCreated' event (evid: 4900)
 *
 * Event description: When the draft order process startsSend create - if there was an existing draft that is deleted
 * If already exists - then don’t send this event https://bo.wix.com/wix-docs/rest/drafts/draft-order-updates/draft-order-created-domain-event
 *
 * @param {draftOrderOrderDraftCreatedParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {GUID} appDefId - app_def_id
 * @property {string} draftOrderId - draft_order_id
 * @return {LogObject<draftOrderOrderDraftCreatedParams>} LogObject<draftOrderOrderDraftCreatedParams>
 */
export function draftOrderOrderDraftCreated(params) {
    return { evid: 4900, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'draftOrderOrderDraftDeleted' event (evid: 4901)
 *
 * Event description: When the draft order is deleted - expired, due to permission, API is initiated -In cases where the draft order expired (more than 48 hr), user permission overrides, and a new draft is created. https://bo.wix.com/wix-docs/rest/drafts/draft-order-updates/draft-order-deleted-domain-event
 *
 * @param {draftOrderOrderDraftDeletedParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} reason - Expired, due to permission, api initiated -
 * In cases were the draft order expired (more than 48 hr), user permission override and new draft.
 * @property {GUID} appDefId - app_def_id
 * @property {string} draftOrderId - draft_order_id
 * @return {LogObject<draftOrderOrderDraftDeletedParams>} LogObject<draftOrderOrderDraftDeletedParams>
 */
export function draftOrderOrderDraftDeleted(params) {
    return { evid: 4901, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'draftOrderOrderDraftUpdated' event (evid: 4902)
 *
 * Event description: When the draft order is updated - after evert action- increase quantity, add shipping, add discount etc. https://bo.wix.com/wix-docs/rest/drafts/draft-order-updates/draft-order-updated-domain-event
 *
 * @param {draftOrderOrderDraftUpdatedParams} params - The parameters for this event
 * @property {string} currentEntity - Entity after update
 * @property {string} updateReason - Send the API that updated
 * @property {string} orderId - order_id
 * @property {GUID} appDefId - app_def_id
 * @property {string} draftOrderId - draft_order_id
 * @property {string} calculationError - If the shipping failed due to missing address for example, added item that is not shippable etc.
 * @return {LogObject<draftOrderOrderDraftUpdatedParams>} LogObject<draftOrderOrderDraftUpdatedParams>
 */
export function draftOrderOrderDraftUpdated(params) {
    return { evid: 4902, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'draftOrderErrorInDraft' event (evid: 4903)
 *
 * Event description: When the draft order encounters an error - failed to add quantity, shipping, etc.
 *
 * @param {draftOrderErrorInDraftParams} params - The parameters for this event
 * @property {string} errorMessage - error_message
 * @property {string} orderId - order_id
 * @property {GUID} appDefId - app_def_id
 * @property {string} draftOrderId - draft_order_id
 * @property {string} errorType - error_type
 * @property {string} action - From which end point it failed - Create draft, Commit, Delete, etc
 * @return {LogObject<draftOrderErrorInDraftParams>} LogObject<draftOrderErrorInDraftParams>
 */
export function draftOrderErrorInDraft(params) {
    return { evid: 4903, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'previewItemsInOrderOpenedSrc130Evid5' event (evid: 5)
 *
 * Event description: when the items list opens in the orders list
 *
 * @param {previewItemsInOrderOpenedSrc130Evid5Params} params - The parameters for this event
 * @property {number} numOfItems - number of items in order
 * @property {GUID} orderId - order_id
 * @return {LogObject<previewItemsInOrderOpenedSrc130Evid5Params>} LogObject<previewItemsInOrderOpenedSrc130Evid5Params>
 */
export function previewItemsInOrderOpenedSrc130Evid5(params) {
    return { evid: 5, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cartViewMiniCart' event (evid: 50)
 *
 * Event description: view mini cart pop-up
 *
 * @param {cartViewMiniCartParams} params - The parameters for this event
 * @property {string} viewMode - editor / site / preview
 * @property {boolean} isMembersInstalled - true if members app installed on site, false otherwise
 * @property {GUID} cartId - cart_id
 * @property {number} itemsCount - Numbers of items in cart
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {string} origin - cartIcon / addToCartButton
 * @property {string} priceBreakdown - list of displayed price breakdowns - tax, shipping, etc. NULL if not relevant
 * @property {GUID} siteMemberId - member id
 * @return {LogObject<cartViewMiniCartParams>} LogObject<cartViewMiniCartParams>
 */
export function cartViewMiniCart(params) {
    return { evid: 50, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickOnUpdateDeleteDeliveryRegionSrc130Evid501' event (evid: 501)
 *
 * Event description: When the user clicks on update /delete delivery region
 *
 *
 * @param {deliveryProfileClickOnUpdateDeleteDeliveryRegionSrc130Evid501Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the user clicks to create region
 * @property {string} deliveryRegionId - Delivery region id
 * @property {string} action - Values: update/delete
 * @property {string} name - region name
 * @property {string} destinations - Array of country and subdivision
 * @return {LogObject<deliveryProfileClickOnUpdateDeleteDeliveryRegionSrc130Evid501Params>} LogObject<deliveryProfileClickOnUpdateDeleteDeliveryRegionSrc130Evid501Params>
 */
export function deliveryProfileClickOnUpdateDeleteDeliveryRegionSrc130Evid501(params) {
    return { evid: 501, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickOnUpdateDeleteDeliveryMethodSrc130Evid503' event (evid: 503)
 *
 * Event description: When the user clicks on update /delete delivery method
 *
 *
 * @param {deliveryProfileClickOnUpdateDeleteDeliveryMethodSrc130Evid503Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the user clicks to create region
 * @property {string} deliveryRegionId - Delivery region id
 * @property {string} carrierId - Carrier id that was selected
 * @property {string} carrierName - Carrier name that was selected
 * @property {string} action - update/delete
 * @property {string} origin - from where the action was made: hover on method/...
 * @return {LogObject<deliveryProfileClickOnUpdateDeleteDeliveryMethodSrc130Evid503Params>} LogObject<deliveryProfileClickOnUpdateDeleteDeliveryMethodSrc130Evid503Params>
 */
export function deliveryProfileClickOnUpdateDeleteDeliveryMethodSrc130Evid503(params) {
    return { evid: 503, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickToManageInstalledAppsSrc130Evid504' event (evid: 504)
 *
 * Event description: When the user clicks to manage installed apps
 *
 *
 * @param {deliveryProfileClickToManageInstalledAppsSrc130Evid504Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the user clicks to create region
 * @property {string} deliveryRegionId - Delivery region id
 * @return {LogObject<deliveryProfileClickToManageInstalledAppsSrc130Evid504Params>} LogObject<deliveryProfileClickToManageInstalledAppsSrc130Evid504Params>
 */
export function deliveryProfileClickToManageInstalledAppsSrc130Evid504(params) {
    return { evid: 504, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickToAddAppsSrc130Evid505' event (evid: 505)
 *
 * Event description: When the user clicks to add apps (can be from main regions page, can be from managed apps-add additional apps)
 *
 * @param {deliveryProfileClickToAddAppsSrc130Evid505Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the user clicks
 * @property {string} deliveryRegionId - in case that adding app was from the apps modal we will have region_id. If its from the header it will be null
 * @property {string} origin - apps modal/ header
 * @return {LogObject<deliveryProfileClickToAddAppsSrc130Evid505Params>} LogObject<deliveryProfileClickToAddAppsSrc130Evid505Params>
 */
export function deliveryProfileClickToAddAppsSrc130Evid505(params) {
    return { evid: 505, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileFailureInLoadingDataSrc130Evid507' event (evid: 507)
 *
 * Event description: When there was a failure in loading data
 *
 * @param {deliveryProfileFailureInLoadingDataSrc130Evid507Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id there was failure in loading data
 * @property {string} deliveryRegionId - Delivery region id there was failure in loading data  . Null- In case there’s a “full” empty state (i.e. no regions at all)
 * @property {string} carrierId - From which carrier we failed to load the data
 * @return {LogObject<deliveryProfileFailureInLoadingDataSrc130Evid507Params>} LogObject<deliveryProfileFailureInLoadingDataSrc130Evid507Params>
 */
export function deliveryProfileFailureInLoadingDataSrc130Evid507(params) {
    return { evid: 507, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickToAddNewDeliveryRegionSrc130Evid510' event (evid: 510)
 *
 * Event description: When the user clicks on ‘create region’ - note that it can be sent from several places
 *
 * @param {deliveryProfileClickToAddNewDeliveryRegionSrc130Evid510Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the user clicks to create region
 * @property {string} origin - Where the user clicked (header/emptyState/warningMessage)
 * @return {LogObject<deliveryProfileClickToAddNewDeliveryRegionSrc130Evid510Params>} LogObject<deliveryProfileClickToAddNewDeliveryRegionSrc130Evid510Params>
 */
export function deliveryProfileClickToAddNewDeliveryRegionSrc130Evid510(params) {
    return { evid: 510, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickToAddNewMethodSrc130Evid511' event (evid: 511)
 *
 * Event description: When the user clicks on specific methos to add as new method under delivery region (from dropdown)
 *
 *
 * @param {deliveryProfileClickToAddNewMethodSrc130Evid511Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the user clicks to create region
 * @property {string} deliveryRegionId - Delivery region id
 * @property {string} carrierId - Carrier id that was selected
 * @property {string} carrierName - Carrier name that was selected
 * @return {LogObject<deliveryProfileClickToAddNewMethodSrc130Evid511Params>} LogObject<deliveryProfileClickToAddNewMethodSrc130Evid511Params>
 */
export function deliveryProfileClickToAddNewMethodSrc130Evid511(params) {
    return { evid: 511, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileRegionProfileEmptyStateSrc130Evid512' event (evid: 512)
 *
 * Event description: In empty state when no shipping region exist under the profile/region. In case there are no regions at all- region_id will be null
 *
 * @param {deliveryProfileRegionProfileEmptyStateSrc130Evid512Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the user clicks
 * @property {string} deliveryRegionId - Delivery region id . Null- In case there’s a “full” empty state (i.e. no regions at all)
 * @return {LogObject<deliveryProfileRegionProfileEmptyStateSrc130Evid512Params>} LogObject<deliveryProfileRegionProfileEmptyStateSrc130Evid512Params>
 */
export function deliveryProfileRegionProfileEmptyStateSrc130Evid512(params) {
    return { evid: 512, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickToAddHandlingFeeSrc130Evid513' event (evid: 513)
 *
 * Event description: when the user clicks to add a handling fee
 *
 *
 * @param {deliveryProfileClickToAddHandlingFeeSrc130Evid513Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the user clicks to add handling fee
 * @property {string} deliveryRegionId - Delivery region id the user clicks to add handling fee
 * @property {string} carrierId - From which carrier the user clicks to add handling fee
 * @property {boolean} status - on/off
 * @return {LogObject<deliveryProfileClickToAddHandlingFeeSrc130Evid513Params>} LogObject<deliveryProfileClickToAddHandlingFeeSrc130Evid513Params>
 */
export function deliveryProfileClickToAddHandlingFeeSrc130Evid513(params) {
    return { evid: 513, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileCickOnAdditionalActionsInRegionSrc130Evid514' event (evid: 514)
 *
 * Event description: When the user clicks on additional actions button (3 dots) under the region
 *
 * @param {deliveryProfileCickOnAdditionalActionsInRegionSrc130Evid514Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the user clicks
 * @property {string} deliveryRegionId - in case that adding app was from the apps modal we will have region_id. If its from the header it will be null
 * @return {LogObject<deliveryProfileCickOnAdditionalActionsInRegionSrc130Evid514Params>} LogObject<deliveryProfileCickOnAdditionalActionsInRegionSrc130Evid514Params>
 */
export function deliveryProfileCickOnAdditionalActionsInRegionSrc130Evid514(params) {
    return { evid: 514, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileCreateUpdateRegionModalOpenedSrc130Evid515' event (evid: 515)
 *
 * Event description: When create/update region modal was opened
 *
 *
 * @param {deliveryProfileCreateUpdateRegionModalOpenedSrc130Evid515Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the user clicks
 * @property {string} mode - Under which mode the modal was: create region / edit region
 * @property {string} deliveryRegionId - delivery_region_id
 * @property {string} name - Region name
 * In case the modal is opened for 'create' it will be null
 * @property {string} destinations - List of destinations (country+subdvision)
 * In case the modal is opened for 'create' it will be null
 * @return {LogObject<deliveryProfileCreateUpdateRegionModalOpenedSrc130Evid515Params>} LogObject<deliveryProfileCreateUpdateRegionModalOpenedSrc130Evid515Params>
 */
export function deliveryProfileCreateUpdateRegionModalOpenedSrc130Evid515(params) {
    return { evid: 515, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickOnActionInCreateUpdateRegionModalSrc130Evid516' event (evid: 516)
 *
 * Event description: When the user is doing an action in the region modal (closing / saving)
 *
 *
 * @param {deliveryProfileClickOnActionInCreateUpdateRegionModalSrc130Evid516Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the user clicks
 * @property {string} action - close/save
 * @property {string} mode - Under which mode the modal was: create region / edit region
 * @property {string} name - Region name  In case the user clicked on cancel without inserting name/destination it ill be null
 * @property {string} destinations - List of destinations (country+subdvision)   In case the user clicked on cancel without inserting name/destination it ill be null
 * @property {string} deliveryRegionId - delivery_region_id
 * @return {LogObject<deliveryProfileClickOnActionInCreateUpdateRegionModalSrc130Evid516Params>} LogObject<deliveryProfileClickOnActionInCreateUpdateRegionModalSrc130Evid516Params>
 */
export function deliveryProfileClickOnActionInCreateUpdateRegionModalSrc130Evid516(params) {
    return { evid: 516, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickOnLearnMoreSrc130Evid517' event (evid: 517)
 *
 * Event description: When the user clicks on learn more in the delivery profile page
 *
 *
 * @param {deliveryProfileClickOnLearnMoreSrc130Evid517Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the user clicks
 * @property {string} origin - Main title/ fulfillment section/profiles list/profile warning
 *
 * @return {LogObject<deliveryProfileClickOnLearnMoreSrc130Evid517Params>} LogObject<deliveryProfileClickOnLearnMoreSrc130Evid517Params>
 */
export function deliveryProfileClickOnLearnMoreSrc130Evid517(params) {
    return { evid: 517, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickToAddHandlingFeeSrc130Evid518' event (evid: 518)
 *
 * Event description: When the user clicks to add handeling fee
 *
 * @param {deliveryProfileClickToAddHandlingFeeSrc130Evid518Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the user clicks
 * @property {string} deliveryRegionId - Delivery region id the user clicks to add rate
 * @return {LogObject<deliveryProfileClickToAddHandlingFeeSrc130Evid518Params>} LogObject<deliveryProfileClickToAddHandlingFeeSrc130Evid518Params>
 */
export function deliveryProfileClickToAddHandlingFeeSrc130Evid518(params) {
    return { evid: 518, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileHandlingFeeModalOpenedSrc130Evid519' event (evid: 519)
 *
 * Event description: When the handling fee modal was opened
 *
 * @param {deliveryProfileHandlingFeeModalOpenedSrc130Evid519Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the user clicks
 * @property {string} deliveryRegionId - Delivery region id the user clicks to add rate
 * @property {string} handelingFeeRates - Array with all carriers that in the window :carrier_id,carrier_name,rate,status (on/off)
 * @return {LogObject<deliveryProfileHandlingFeeModalOpenedSrc130Evid519Params>} LogObject<deliveryProfileHandlingFeeModalOpenedSrc130Evid519Params>
 */
export function deliveryProfileHandlingFeeModalOpenedSrc130Evid519(params) {
    return { evid: 519, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileHandlingFeeClickOnActionInModalSrc130Evid520' event (evid: 520)
 *
 * Event description: When the user is performing action under handling fee modal (cancel/save) . This is the right evid. Ignore 130:513
 *
 * @param {deliveryProfileHandlingFeeClickOnActionInModalSrc130Evid520Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the user clicks
 * @property {string} deliveryRegionId - Delivery region id the user clicks to add rate
 * @property {string} handelingFeeRates - Array with all carriers that in the window :carrier_id,carrier_name,rate,status (on/off)
 * @property {string} action - close/save in window
 * @return {LogObject<deliveryProfileHandlingFeeClickOnActionInModalSrc130Evid520Params>} LogObject<deliveryProfileHandlingFeeClickOnActionInModalSrc130Evid520Params>
 */
export function deliveryProfileHandlingFeeClickOnActionInModalSrc130Evid520(params) {
    return { evid: 520, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileDeleteRegionModalOpenedSrc130Evid521' event (evid: 521)
 *
 * Event description: When delete region modal was opened
 *
 *
 * @param {deliveryProfileDeleteRegionModalOpenedSrc130Evid521Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the action made
 * @property {string} deliveryRegionId - Delivery region id were  the action made.
 * @return {LogObject<deliveryProfileDeleteRegionModalOpenedSrc130Evid521Params>} LogObject<deliveryProfileDeleteRegionModalOpenedSrc130Evid521Params>
 */
export function deliveryProfileDeleteRegionModalOpenedSrc130Evid521(params) {
    return { evid: 521, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickOnActionInDeleteRegionModalSrc130Evid522' event (evid: 522)
 *
 * Event description: When the user is doing an action in the delete region modal
 *
 * @param {deliveryProfileClickOnActionInDeleteRegionModalSrc130Evid522Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the action made
 * @property {string} deliveryRegionId - Delivery region id were  the action made.
 * @property {string} action - close/delete region
 * @return {LogObject<deliveryProfileClickOnActionInDeleteRegionModalSrc130Evid522Params>} LogObject<deliveryProfileClickOnActionInDeleteRegionModalSrc130Evid522Params>
 */
export function deliveryProfileClickOnActionInDeleteRegionModalSrc130Evid522(params) {
    return { evid: 522, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileCarrierModalOpenedSrc130Evid524' event (evid: 524)
 *
 * Event description: When the carrier modal was opened from the dropdown (shipping/ pickup/local delivery) or from the edit method
 *
 * @param {deliveryProfileCarrierModalOpenedSrc130Evid524Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the action made
 * @property {string} deliveryRegionId - Delivery region id were  the action made.
 * @property {string} origin - edit / add new method
 * @property {string} carrierId - Carrier_id that the modal was opened to
 * @property {string} carrierName - Pickup Locations/shipping/ local delivery/usps
 * @return {LogObject<deliveryProfileCarrierModalOpenedSrc130Evid524Params>} LogObject<deliveryProfileCarrierModalOpenedSrc130Evid524Params>
 */
export function deliveryProfileCarrierModalOpenedSrc130Evid524(params) {
    return { evid: 524, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickOnActionOnCarrierModalSrc130Evid525' event (evid: 525)
 *
 * Event description: When the user is doing actions in the carrier modal (shipping/ pickup/local delivery/usps)
 *
 *
 * @param {deliveryProfileClickOnActionOnCarrierModalSrc130Evid525Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the action made
 * @property {string} deliveryRegionId - Delivery region id were  the action made.
 * @property {string} origin - From where the modal was opened: edit/ add new method
 * @property {string} action - Action in modal:  close/ save
 * @property {string} carrierId - Carrier_id that the modal was opened to
 * @property {string} carrierName - Pickup Locations/shipping/ local delivery/usps
 * @return {LogObject<deliveryProfileClickOnActionOnCarrierModalSrc130Evid525Params>} LogObject<deliveryProfileClickOnActionOnCarrierModalSrc130Evid525Params>
 */
export function deliveryProfileClickOnActionOnCarrierModalSrc130Evid525(params) {
    return { evid: 525, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileDeleteCarrierModalOpenedSrc130Evid526' event (evid: 526)
 *
 * Event description: When the delete carrier modal was opened
 *
 *
 *
 * @param {deliveryProfileDeleteCarrierModalOpenedSrc130Evid526Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the action made
 * @property {string} deliveryRegionId - Delivery region id were  the action made.
 * @property {string} origin - From where the action was made:  hover on method/….
 * @property {string} carrierId - Carrier_id that the modal was opened to
 * @property {boolean} isSharedConfiguration - True if the ui is shown relevant for shared carrier
 * @property {number} numberOfExistingCarriers - No. of existing carriers affected
 * @property {string} carrierName - Pickup Locations/shipping/ local delivery/usps
 * @return {LogObject<deliveryProfileDeleteCarrierModalOpenedSrc130Evid526Params>} LogObject<deliveryProfileDeleteCarrierModalOpenedSrc130Evid526Params>
 */
export function deliveryProfileDeleteCarrierModalOpenedSrc130Evid526(params) {
    return { evid: 526, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'giftCardCheckoutClickOnCheckbox' event (evid: 527)
 *
 * Event description: in the old checkout - when a visitor checks / unchecks the Gift Card checkbox in the Payment stage. in the new checkout (out of Iframe) -  when a visitor clicks on "Redeem a gift card" (first step of applying gift card). Notice - the old flow have both the opinion to check/uncheck gift card. the new only have click to open the flow (without closing).
 *
 * @param {giftCardCheckoutClickOnCheckboxParams} params - The parameters for this event
 * @property {string} mobilePosition - Top/Bottom. Null if not mobile device. The place in the checkout on mobile device (not Wix app) where the uou did the action. There are 2 option - on the top of the checkout or on the bottom of the checkout.
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {boolean} isMember - true if visitor is member
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {string} value - behavior type. in the old checkout - unchecked/check. in the new checkout - null (no checkbox action)
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<giftCardCheckoutClickOnCheckboxParams>} LogObject<giftCardCheckoutClickOnCheckboxParams>
 */
export function giftCardCheckoutClickOnCheckbox(params) {
    return { evid: 527, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickOnActionOnDeleteCarrierModalSrc130Evid528' event (evid: 528)
 *
 * Event description: When the user is doing actions in the delete carrier modal
 *
 *
 *
 * @param {deliveryProfileClickOnActionOnDeleteCarrierModalSrc130Evid528Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the action made
 * @property {string} deliveryRegionId - Delivery region id were  the action made.
 * @property {string} origin - From where the modal was opened: edit/ add new method
 * @property {string} carrierId - Carrier_id that the modal was opened to
 * @property {string} action - Action in modal:  close/ delete/  Remove from this region / Remove from all regions
 *
 * @property {boolean} isSharedConfiguration - If the ui presented is relevant for choose from existing carrier
 * @property {number} numberOfExistingCarriers - No of existing carriers affected
 * @property {string} carrierName - Pickup Locations/shipping/ local delivery/usps
 * @return {LogObject<deliveryProfileClickOnActionOnDeleteCarrierModalSrc130Evid528Params>} LogObject<deliveryProfileClickOnActionOnDeleteCarrierModalSrc130Evid528Params>
 */
export function deliveryProfileClickOnActionOnDeleteCarrierModalSrc130Evid528(params) {
    return { evid: 528, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'giftCardCheckoutClickApply' event (evid: 529)
 *
 * Event description: when visitor checks / unchecks the Gift Card checkbox in Payment stage of Checkout
 *
 * @param {giftCardCheckoutClickApplyParams} params - The parameters for this event
 * @property {string} mobilePosition - Top/Bottom. Null if not mobile device. The place in the checkout on mobile device (not Wix app) where the uou did the action. There are 2 option - on the top of the checkout or on the bottom of the checkout.
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart id
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {boolean} isMember - true if visitor is member
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<giftCardCheckoutClickApplyParams>} LogObject<giftCardCheckoutClickApplyParams>
 */
export function giftCardCheckoutClickApply(params) {
    return { evid: 529, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutPayingForExistingOrderCheckoutPageStartLoadingSrc130Evid53' event (evid: 53)
 *
 * Event description: When checkout page is started to loading - paying for an existing order (paylinks on checkout).
 * Note- in order to know which payment providers were shown, use cashier bi 64:180 by choosing the fields:
 * app_session_id=> payment_request_id
 * and then to pull the data from the fields : payment_category,payment_provider
 *
 *
 * @param {checkoutPayingForExistingOrderCheckoutPageStartLoadingSrc130Evid53Params} params - The parameters for this event
 * @property {string} orderId - Order_id that the uou is paying for
 * @property {string} orderPaymentRequestId - order_payment_request_id
 * @property {string} paymentRequestStatus - PAID/ EXPIRED /UNPAID/ UNKNOWN_STATUS
 * @property {string} currency - Currency code. The value will always match the currency used in the order.
 * @property {string} title - Title to be displayed to the customer on the payment page. Provide a clear and descriptive title to inform the customer about what they are paying for
 * @property {string} description - Description to be displayed to the customer on the payment page. Write a detailed description so the customer understands what they are paying for
 * @property {DateTime} expirationDate - Time and date the order payment request expires
 * @property {string} appId - App Def ID that created the order payment request
 * @property {string} externalId - Reference to an ID from an external system, indicating the original source of the order payment request.
 * @property {boolean} isPolicy - has policies in checkout (any policy)
 * @property {number} amountLong - Amount to be collected. INT multiply by 100000
 * @return {LogObject<checkoutPayingForExistingOrderCheckoutPageStartLoadingSrc130Evid53Params>} LogObject<checkoutPayingForExistingOrderCheckoutPageStartLoadingSrc130Evid53Params>
 */
export function checkoutPayingForExistingOrderCheckoutPageStartLoadingSrc130Evid53(params) {
    return { evid: 53, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileUserInteractsWithManageAppsModalSrc130Evid530' event (evid: 530)
 *
 * Event description: When the user interacts in the manage apps modal . Sends event per click
 *
 *
 *
 * @param {deliveryProfileUserInteractsWithManageAppsModalSrc130Evid530Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id
 * @property {string} deliveryRegionId - Delivery region id
 * @property {string} appId - app id that the action was made for
 * @property {string} interaction - Click learn more/ click to open app/ turned on app/ turned off app/ add backup rate / add handling fee
 * @return {LogObject<deliveryProfileUserInteractsWithManageAppsModalSrc130Evid530Params>} LogObject<deliveryProfileUserInteractsWithManageAppsModalSrc130Evid530Params>
 */
export function deliveryProfileUserInteractsWithManageAppsModalSrc130Evid530(params) {
    return { evid: 530, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileFinalActionOnManageAppsModalSrc130Evid531' event (evid: 531)
 *
 * Event description: Users final action on the manag apps modal - save/ close
 *
 *
 *
 * @param {deliveryProfileFinalActionOnManageAppsModalSrc130Evid531Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id
 * @property {string} deliveryRegionId - Delivery region id
 * @property {string} managedApps - Array with all apps status when the action heppands in the modal :app_id,backup_rate,handeling_fee,status
 * @property {string} action - save/close
 * @return {LogObject<deliveryProfileFinalActionOnManageAppsModalSrc130Evid531Params>} LogObject<deliveryProfileFinalActionOnManageAppsModalSrc130Evid531Params>
 */
export function deliveryProfileFinalActionOnManageAppsModalSrc130Evid531(params) {
    return { evid: 531, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileManageAppsModalOpenedSrc130Evid532' event (evid: 532)
 *
 * Event description: When manage apps modal was opened
 *
 * @param {deliveryProfileManageAppsModalOpenedSrc130Evid532Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id
 * @property {string} deliveryRegionId - Delivery region id
 * @property {string} managedApps - Array with all apps that presented in the modal :app_id,backup_rate,handeling_fee,status
 * @return {LogObject<deliveryProfileManageAppsModalOpenedSrc130Evid532Params>} LogObject<deliveryProfileManageAppsModalOpenedSrc130Evid532Params>
 */
export function deliveryProfileManageAppsModalOpenedSrc130Evid532(params) {
    return { evid: 532, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickToCloseMethodsModalSrc130Evid533' event (evid: 533)
 *
 * Event description: When the user click to close the methods modal
 *
 *
 * @param {deliveryProfileClickToCloseMethodsModalSrc130Evid533Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the user clicks
 * @property {string} deliveryRegionId - Delivery region id.
 * @return {LogObject<deliveryProfileClickToCloseMethodsModalSrc130Evid533Params>} LogObject<deliveryProfileClickToCloseMethodsModalSrc130Evid533Params>
 */
export function deliveryProfileClickToCloseMethodsModalSrc130Evid533(params) {
    return { evid: 533, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileRatesModalIsOpenedSrc130Evid534' event (evid: 534)
 *
 * Event description: When the rates modal is opened.
 *
 *
 * @param {deliveryProfileRatesModalIsOpenedSrc130Evid534Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the user clicks
 * @property {string} deliveryRegionId - Delivery region id.
 * @return {LogObject<deliveryProfileRatesModalIsOpenedSrc130Evid534Params>} LogObject<deliveryProfileRatesModalIsOpenedSrc130Evid534Params>
 */
export function deliveryProfileRatesModalIsOpenedSrc130Evid534(params) {
    return { evid: 534, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'giftCardCheckoutCodeApplied' event (evid: 535)
 *
 * Event description: when Gift Card Code was successfully applied in Payment stage of Checkout
 *
 * @param {giftCardCheckoutCodeAppliedParams} params - The parameters for this event
 * @property {string} mobilePosition - Top/Bottom. Null if not mobile device. The place in the checkout on mobile device (not Wix app) where the uou did the action. There are 2 option - on the top of the checkout or on the bottom of the checkout.
 * @property {string} giftCardId - gift_card_id
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart id
 * @property {string} appName - app_name
 * @property {string} catalogAppId - List of distinct checkout.lineItems.itemType
 * @property {boolean} isCartPaidOnlyWithGiftCard - True if payments options are hidden due to gift card fully cover the payment (with coupon or without)
 * @property {boolean} isMember - true if visitor is member
 * @property {string} itemType - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<giftCardCheckoutCodeAppliedParams>} LogObject<giftCardCheckoutCodeAppliedParams>
 */
export function giftCardCheckoutCodeApplied(params) {
    return { evid: 535, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'giftCardCheckoutRemoveCode' event (evid: 536)
 *
 * Event description: when visitor clicks "remove" after applying Gift Card Codein Payment stage of Checkout
 *
 * @param {giftCardCheckoutRemoveCodeParams} params - The parameters for this event
 * @property {string} mobilePosition - Top/Bottom. Null if not mobile device. The place in the checkout on mobile device (not Wix app) where the uou did the action. There are 2 option - on the top of the checkout or on the bottom of the checkout.
 * @property {string} giftCardId - gift_card_id
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {boolean} isMember - true if visitor is member
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<giftCardCheckoutRemoveCodeParams>} LogObject<giftCardCheckoutRemoveCodeParams>
 */
export function giftCardCheckoutRemoveCode(params) {
    return { evid: 536, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'giftCardClickLearnMore' event (evid: 538)
 *
 * Event description: in ecom settings - when user cicks "learn more" (leads to open the App Market with Gifted App opened)
 *
 * @param {giftCardClickLearnMoreParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} value - gift card/ merchant initiated etc.
 * @return {LogObject<giftCardClickLearnMoreParams>} LogObject<giftCardClickLearnMoreParams>
 */
export function giftCardClickLearnMore(params) {
    return { evid: 538, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutCheckoutPageFinishLoadingSrc130Evid54' event (evid: 54)
 *
 * Event description: The bi is being sent when the checkout page finish loading This event indicates which "checkout page" was presented to the user.  there are 6 types that depends on: 1.cart_type : Digital/ Physical/ mixed (Digital &Physical)  2. shipping method : shipping /store pickup / non. 3. flow_type: quick / full
 *
 * @param {checkoutCheckoutPageFinishLoadingSrc130Evid54Params} params - The parameters for this event
 * @property {boolean} isCalculationErrors - does calculation errors exist. Not exist in OOI checkout
 * @property {string} validationMessage - JSON with the validation that appear in the checkout while loaded. {type - warning/error, is_line_item - true/false, message - what the uou saw,name-DELIVERY/ OTHER_DEFAULT / LINE_ITEM_DEFAULT, suggested_fix}
 * @property {string} numLineItemsPerCatalog - Json - number of line items per catalog - example: {“stores”: 3, “bookings”: 4}. Not exist in OOI checkout
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} originType - the type of flow that lead to the checkout, like buy now, paypal, etc.
 * @property {boolean} isGiftCard - does gift card is available in the checkout
 * @property {boolean} isPolicy - has policies in checkout
 * @property {string} selectedCarrierServiceOption - Taken from: Checkout.Chekout object.Shipping Info.selectedCarrierServiceOption. Not exist in OOI checkout
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} siteLanguage - site Language. Not exist in OOI checkout
 * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
 * @property {string} flowType - 'quick flow' / 'full flow'. For OOI Checkout-   fastFlow = 'fast flow'.
 * fast flow means that the UoU was directed back to the fast flow checkout (after having missing info in the express checkout)
 * @property {string} appName - app_name
 * @property {boolean} isBuyerNote - does a buyes note exist. Not exist in OOI checkout
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} selectedDeliveryOption - what was the selected delivery option. Not exist in OOI checkout
 * @property {string} channelType - what is the channel type (web/back office..)
 * @property {boolean} savedAddress - true if the member has saved address. Not exist in OOI checkout
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} itemsQuantityPerCatalog - Json - sum of total items quantity per catalog - example: {“stores”: 9, “bookings”: 7}. Not exist in OOI checkout
 * @property {boolean} isDiscountPriceSummary - does discount exist in price summary. Not exist in OOI checkout
 * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected
 * @property {string} shippingCountry - buyer country code when viewing the checkout
 * @property {string} paymet_providers - array of payment providers connected to the site - WRONG FIELD
 * @property {string} first_stage - first stage open in checkout page
 * @property {boolean} isOutOfIframe - only send in the ooi flow. therefore, null = false
 * @property {boolean} isOwner - true if visitor is the site owner
 * @property {boolean} is_promo_code - is promo code (coupon) option visible in the cart & checkout
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor. Not exist in OOI checkout
 * @property {string} customFieldsTitle - title of custom field (can be a list if there is more than one field
 * @property {string} origin - the component / page that the visitor came from to the checkout, like product page, cart page, etc.
 * @property {boolean} isBuyNowPayLaterOption - is buy now pay later option exist. Not exist in OOI checkout
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {string} checkoutType - in viewer / out of viewer
 * @property {string} contactId - Buyer's contact ID. take from: Checkout.Chekout object.buyerInfo.contactId
 * @property {number} numLineItems - total number of line items. Not exist in OOI checkout
 * @property {number} dintinctNumItems - count distinct item_id. Not exist in OOI checkout
 * @property {string} shippingMethodType - what are the shipping option that are presented(shipping /store pickup / none). Not exist in OOI checkout
 * @property {boolean} isShippingPriceSummary - does shipping exist in price summary
 * @property {number} itemsQuantity - sum of total items quantity. Not exist in OOI checkout
 * @property {string} paymentProviders - array of payment providers connected to the site - From 1.4.23
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {boolean} isWithTimeSlots - True/false. for now - only for Restaurant. Does the checkout have an delivery option with a time slot?
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order. Not exist in OOI checkout
 * @property {string} dintinctNumItemsPerCatalog - Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}. Not exist in OOI checkout
 * @property {GUID} checkoutId - checkout_id
 * @property {string} buyerLanguage - buyer Language. Not exist in OOI checkout
 * @property {string} shippingCity - buyer city when viewing the checkout. Not exist in OOI checkout
 * @property {boolean} isTaxPriceSummary - does tax exist in price summary. Not exist in OOI checkout
 * @property {number} num_of_paymet_providers - How many payment providers does the site has connected. Not exist in OOI checkout
 * @property {boolean} savePaymentMethod - save payment method to one of the line items
 * @property {string} checkoutLayout - lean/full/one step (in the future..?) (if null from the past -> full)
 * @property {boolean} requiredPaymentPolicy - policy added to one of the line
 * @return {LogObject<checkoutCheckoutPageFinishLoadingSrc130Evid54Params>} LogObject<checkoutCheckoutPageFinishLoadingSrc130Evid54Params>
 */
export function checkoutCheckoutPageFinishLoadingSrc130Evid54(params) {
    return { evid: 54, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cartCartIconLoaded' event (evid: 546)
 *
 * Event description: cart icon loaded
 *
 * @param {cartCartIconLoadedParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {string} navigationClick - mini cart / cart page
 * @property {boolean} isMobileFriendly - true if mobile friendly, false otherwise
 * @property {GUID} ecomId - ecom_id
 * @return {LogObject<cartCartIconLoadedParams>} LogObject<cartCartIconLoadedParams>
 */
export function cartCartIconLoaded(params) {
    return { evid: 546, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'taxClickOnLearnMore' event (evid: 55)
 *
 * Event description: When user clicks on "Learn more" or "i" to get more info about tax
 *
 * @param {taxClickOnLearnMoreParams} params - The parameters for this event
 * @property {string} flowType - avalara/manual
 * @property {string} appName - app_name
 * @property {string} origin - empty state / countries list / states list / tax on shipping / tax on digital / tax settings / tax calculation /avalara terms/avalara rates / productTaxGroupMain / productTaxGroupInner / productTaxGroupPopup/ avalaraBeta
 * @return {LogObject<taxClickOnLearnMoreParams>} LogObject<taxClickOnLearnMoreParams>
 */
export function taxClickOnLearnMore(params) {
    return { evid: 55, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickPlaceOrderWithSubscription' event (evid: 58)
 *
 * Event description: if mail "Subscription" checkbox was checked on clicking on place order (client event). since june 2019 also sent from OA StoreFront (with origin)
 *
 * @param {clickPlaceOrderWithSubscriptionParams} params - The parameters for this event
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} origin - OA StoreFront
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {boolean} default_state - true if was turned on by default by merchant settings
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase flow id. Note that this field was implemented in January 25
 * @return {LogObject<clickPlaceOrderWithSubscriptionParams>} LogObject<clickPlaceOrderWithSubscriptionParams>
 */
export function clickPlaceOrderWithSubscription(params) {
    return { evid: 58, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ordersListMessagePresentedToMerchantSrc130Evid59' event (evid: 59)
 *
 * Event description: message displayed to merchant in orders list (pending payment)
 *
 *
 * @param {ordersListMessagePresentedToMerchantSrc130Evid59Params} params - The parameters for this event
 * @property {string} messageType - pending payments
 * @property {string} placement - where is the message displayed? header?
 * @return {LogObject<ordersListMessagePresentedToMerchantSrc130Evid59Params>} LogObject<ordersListMessagePresentedToMerchantSrc130Evid59Params>
 */
export function ordersListMessagePresentedToMerchantSrc130Evid59(params) {
    return { evid: 59, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'paymentCollectorClickOnCollectPayment' event (evid: 60)
 *
 * Event description: The user clicks on "Collect payment"
 *
 * @param {paymentCollectorClickOnCollectPaymentParams} params - The parameters for this event
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalogAppId
 * @property {string} appDefId - app_def_id
 * @property {string} origin - order_page_header, order_page_payment, manage-participants
 * @property {boolean} isAuthorized - is_authorized
 * @return {LogObject<paymentCollectorClickOnCollectPaymentParams>} LogObject<paymentCollectorClickOnCollectPaymentParams>
 */
export function paymentCollectorClickOnCollectPayment(params) {
    return { evid: 60, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickLogoutInCheckout' event (evid: 601)
 *
 * Event description: when site member clicks to logout in checkout, opening logout modal
 *
 * @param {clickLogoutInCheckoutParams} params - The parameters for this event
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {GUID} owner_id - owner_id
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} stage - stage
 * @property {string} action - sign in / sign up
 * @return {LogObject<clickLogoutInCheckoutParams>} LogObject<clickLogoutInCheckoutParams>
 */
export function clickLogoutInCheckout(params) {
    return { evid: 601, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'logoutModalInCheckoutLoaded' event (evid: 602)
 *
 * Event description: logout modal loaded in checkout after member presses logout
 *
 * @param {logoutModalInCheckoutLoadedParams} params - The parameters for this event
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - cart_type
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {boolean} is_member - is_member
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} action - sign in / sign up
 * @property {string} stage - stage
 * @return {LogObject<logoutModalInCheckoutLoadedParams>} LogObject<logoutModalInCheckoutLoadedParams>
 */
export function logoutModalInCheckoutLoaded(params) {
    return { evid: 602, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickOnReturnToCheckoutInLogoutModal' event (evid: 603)
 *
 * Event description: buyer clicks on "return to checkout" or X in logout modal in checkout to close it
 *
 * @param {clickOnReturnToCheckoutInLogoutModalParams} params - The parameters for this event
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} siteMemberId - member id
 * @property {string} purchaseFlowId - purchase_flo
 * @property {string} stage - stage
 * @property {string} action - sign in / sign up
 * @return {LogObject<clickOnReturnToCheckoutInLogoutModalParams>} LogObject<clickOnReturnToCheckoutInLogoutModalParams>
 */
export function clickOnReturnToCheckoutInLogoutModal(params) {
    return { evid: 603, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutClickLoginInCheckout' event (evid: 604)
 *
 * Event description: When site member clicks to login in checkout
 * Until the 26.2.23 the event was sent as:
 * 5:601 Site Members - Click on Login/Sign Button up for site members
 *
 * @param {checkoutClickLoginInCheckoutParams} params - The parameters for this event
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {GUID} owner_id - owner_id
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} stage - stage
 * @property {string} action - sign in / sign up
 * @return {LogObject<checkoutClickLoginInCheckoutParams>} LogObject<checkoutClickLoginInCheckoutParams>
 */
export function checkoutClickLoginInCheckout(params) {
    return { evid: 604, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickOnAddToCart' event (evid: 63)
 *
 * Event description: buyer clicks on add to cart. Also since june 2019 can be sent from OneApp store front (member view) with origin ='OA StoreFront'. Currently not sent from src 130, under disscussions
 *
 * @param {clickOnAddToCartParams} params - The parameters for this event
 * @property {boolean} hasOptions - does the product have options
 * @property {string} viewMode - editor / site / preview
 * @property {number} quantity - added product quntety
 * @property {string} buttonType - buy now / add to cart / subscribe now
 * @property {string} appName - app_name
 * @property {GUID} uuid - uuid
 * @property {boolean} isNavigateCart - true if the button redirect to cart (mobile or without cart icon), false otherwise
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {string} navigationClick - mini-cart / cart  / none / checkout
 * @property {string} productType - digital / physical
 * @property {string} options - a json containing the options selected for the product
 * @property {string} origin - origin
 * @property {string} productId - product_id
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<clickOnAddToCartParams>} LogObject<clickOnAddToCartParams>
 */
export function clickOnAddToCart(params) {
    return { evid: 63, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'paymentCollectorCollectPaymentIsOpened' event (evid: 65)
 *
 * Event description: The window "Collect payment" on the order page was opened.
 *
 * @param {paymentCollectorCollectPaymentIsOpenedParams} params - The parameters for this event
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalogAppId
 * @property {string} appDefId - app_def_id
 * @property {string} origin - order_page_header, order_page_payment
 * @property {boolean} isAuthorized - is_authorized
 * @property {string} menuOptions - list with menu options presented to the user
 * @return {LogObject<paymentCollectorCollectPaymentIsOpenedParams>} LogObject<paymentCollectorCollectPaymentIsOpenedParams>
 */
export function paymentCollectorCollectPaymentIsOpened(params) {
    return { evid: 65, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cartMinimumOrderMessageIsShownInCart' event (evid: 653)
 *
 * Event description: Minimum order message is shown in cart
 *
 * @param {cartMinimumOrderMessageIsShownInCartParams} params - The parameters for this event
 * @property {number} minimumValueLong - the minimum order threshold multiplied by 10000
 * @property {boolean} buttonEnabled - true - if the button is enabled false -if button is disabled
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {number} diffLong - The diff between the relevant order value and the minimum order threshold multiplied by 10000
 * @property {string} currency - the currency that was shown in the message
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - only in EP
 * @property {string} purchaseFlowId - purchase flow id
 * @return {LogObject<cartMinimumOrderMessageIsShownInCartParams>} LogObject<cartMinimumOrderMessageIsShownInCartParams>
 */
export function cartMinimumOrderMessageIsShownInCart(params) {
    return { evid: 653, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutMinimumOrderModalIsShownInCheckout' event (evid: 654)
 *
 * Event description: Minimum order modal is shown in checkout
 *
 * @param {checkoutMinimumOrderModalIsShownInCheckoutParams} params - The parameters for this event
 * @property {number} minimumValueLong - the minimum order threshold multiplied by 100,000
 * @property {string} stage - the stage in the checkout the visitor was at when the modal was opened
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {boolean} hasPickup - has_pickup
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {number} diffLong - The diff between the relevant order value and the minimum order threshold  multiplied by 100,000
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {string} currency - the currency that was shown in the message
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - only in EP
 * @property {string} purchaseFlowId - purchase flow id. Note that this field was implemented in January 25
 * @return {LogObject<checkoutMinimumOrderModalIsShownInCheckoutParams>} LogObject<checkoutMinimumOrderModalIsShownInCheckoutParams>
 */
export function checkoutMinimumOrderModalIsShownInCheckout(params) {
    return { evid: 654, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutMinimumOrderClickOnGotItInErrorModalInCheckout' event (evid: 655)
 *
 * Event description: Minimum order - click on ‘got it’ in error modal in checkout
 *
 * @param {checkoutMinimumOrderClickOnGotItInErrorModalInCheckoutParams} params - The parameters for this event
 * @property {number} minimumValueLong - the minimum order threshold multiplied by 100,000
 * @property {string} stage - the stage in the checkout the visitor was at when the modal was opened
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {number} diffLong - The diff between the relevant order value and the minimum order threshold  multiplied by 100,000
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {string} currency - the currency that was shown in the message
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - only in EP
 * @property {string} purchaseFlowId - purchase flow id. Note that this field was implemented in January 25
 * @return {LogObject<checkoutMinimumOrderClickOnGotItInErrorModalInCheckoutParams>} LogObject<checkoutMinimumOrderClickOnGotItInErrorModalInCheckoutParams>
 */
export function checkoutMinimumOrderClickOnGotItInErrorModalInCheckout(params) {
    return { evid: 655, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ordersClickOnGrouperButton' event (evid: 66)
 *
 * Event description: When a user clicks on the grouper button in the orders page
 *
 * @param {ordersClickOnGrouperButtonParams} params - The parameters for this event
 * @property {string} area - primary (blue color)/ secondary (grey color)/ more actions (three dots)
 * @property {string} internalDashboardUrl - internal_dashboard_url
 * @property {string} fulfillerName - fulfiller_name
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - orders' catalog_app_id
 * @property {string} externalDashboardUrl - external_dashboard_url
 * @property {string} appDefId - The id of the vertical/TPA that called the navigation button
 * @property {string} action - action - the CTA that we click on, for example 'go to Bookings Calendar''
 * @property {string} paymentStatus - payment status
 * @return {LogObject<ordersClickOnGrouperButtonParams>} LogObject<ordersClickOnGrouperButtonParams>
 */
export function ordersClickOnGrouperButton(params) {
    return { evid: 66, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'buyerShippingCountryIsSet' event (evid: 661)
 *
 * Event description: When a buyer (visitor/member) click on the shipping region dropdown   in checkout shippingAdress stage / in cart shipping calculator modal. (Created mainly as an exposure point for France regions AB test)
 *
 * @param {buyerShippingCountryIsSetParams} params - The parameters for this event
 * @property {GUID} cartId - cart_id
 * @property {string} flowType - 'Cart'- if the region was selected in cart modal ; 'Checkout' - if the region was selected in checkout stage
 * @property {string} appName - app_name
 * @property {string} catalogAppId - catalog_app_id
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} shippingCountry - The selected shipping country
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {string} origin - 'OA StoreFront' (for OneApp)
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<buyerShippingCountryIsSetParams>} LogObject<buyerShippingCountryIsSetParams>
 */
export function buyerShippingCountryIsSet(params) {
    return { evid: 661, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ordersListClickOnCtaInMessagePresentedToMerchantSrc130Evid68' event (evid: 68)
 *
 * Event description: when the user clicks on one of the CTAs in the message displayed to merchant in orders list (pending payment)
 *
 * @param {ordersListClickOnCtaInMessagePresentedToMerchantSrc130Evid68Params} params - The parameters for this event
 * @property {string} messageType - pending payments
 * @property {string} placement - where is the message displayed? header?
 * @property {string} action - learn more/ exit / go to abandoned checkouts
 * @property {string} pageName - page name - orders_list, order_page
 * @property {string} orderId - If order page then order id, else NULL
 * @return {LogObject<ordersListClickOnCtaInMessagePresentedToMerchantSrc130Evid68Params>} LogObject<ordersListClickOnCtaInMessagePresentedToMerchantSrc130Evid68Params>
 */
export function ordersListClickOnCtaInMessagePresentedToMerchantSrc130Evid68(params) {
    return { evid: 68, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'paymentCollectorCollectPaymentVoidOrCapturePaymentSrc130Evid7' event (evid: 7)
 *
 * Event description: When the user clicks on 'void' or 'capture' payment
 *
 * @param {paymentCollectorCollectPaymentVoidOrCapturePaymentSrc130Evid7Params} params - The parameters for this event
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} appDefId - app_def_id
 * @property {number} amount - Int multiplied by 100,000, amount entered by the user
 * @property {string} origin - order_page_header, order_page_payment
 * @property {string} currency - currency
 * @property {string} action - void/ capture
 * @property {boolean} isMultiple - the user chose multiple transactions to void/capture?
 * @property {boolean} isAuthorized - is_authorized
 * @return {LogObject<paymentCollectorCollectPaymentVoidOrCapturePaymentSrc130Evid7Params>} LogObject<paymentCollectorCollectPaymentVoidOrCapturePaymentSrc130Evid7Params>
 */
export function paymentCollectorCollectPaymentVoidOrCapturePaymentSrc130Evid7(params) {
    return { evid: 7, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'sideCartEditorSideCartAddedInEditorModalShownSrc130Evid70' event (evid: 70)
 *
 * Event description: when popup of side cart is added in editor is being showed to the user
 *
 * @param {sideCartEditorSideCartAddedInEditorModalShownSrc130Evid70Params} params - The parameters for this event
 * @return {LogObject<sideCartEditorSideCartAddedInEditorModalShownSrc130Evid70Params>} LogObject<sideCartEditorSideCartAddedInEditorModalShownSrc130Evid70Params>
 */
export function sideCartEditorSideCartAddedInEditorModalShownSrc130Evid70(params) {
    return { evid: 70, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'orderApprovedSideEffectsStartedSrc130Evid7001' event (evid: 7001)
 *
 * Event description: This event is being sent on start of the order's approved side effects chain.
 *
 * @param {orderApprovedSideEffectsStartedSrc130Evid7001Params} params - The parameters for this event
 * @property {string} orderId - id of the order
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING/
 * @property {string} previousPaymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING/
 * @property {string} channelType - order's channel type
 * @return {LogObject<orderApprovedSideEffectsStartedSrc130Evid7001Params>} LogObject<orderApprovedSideEffectsStartedSrc130Evid7001Params>
 */
export function orderApprovedSideEffectsStartedSrc130Evid7001(params) {
    return { evid: 7001, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'paymentCollectorPreparationForPaymentCollectionIsPrevented' event (evid: 701)
 *
 * Event description: Preparation for payment collection is prevented
 *
 * @param {paymentCollectorPreparationForPaymentCollectionIsPreventedParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalogAppId
 * @property {string} newStatus - new order status
 * @property {string} appDefId - The id of the vertical/TPA that called the navigation button
 * @property {string} oldStatus - old order status
 * @property {boolean} isAuthorized - is_authorized
 * @return {LogObject<paymentCollectorPreparationForPaymentCollectionIsPreventedParams>} LogObject<paymentCollectorPreparationForPaymentCollectionIsPreventedParams>
 */
export function paymentCollectorPreparationForPaymentCollectionIsPrevented(params) {
    return { evid: 701, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'paymentCollectorToastIsShown' event (evid: 702)
 *
 * Event description: Payment collection toast is shown.
 *
 * @param {paymentCollectorToastIsShownParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} paymentType - MOTO / MARK_AS_PAID/ VOID / CREATE AUTHORIZATION/ CAPTURE
 * @property {boolean} isSuccess - Payment succeeded or not
 * @property {string} appDefId - app_def_id
 * @property {string} errorCode - ORDER_ALREADY_PAID, ORDER_NOT_APPROVED, NO_OFFLINE_PAYMENT, PAYMENT_GATEWAY_ID_NOT_FOUND, PAYMENT_METHODS_NOT_FOUND, ORDER_CANCELED, INVALID_AMOUNT
 * @property {boolean} isAuthorized - is_authorized
 * @return {LogObject<paymentCollectorToastIsShownParams>} LogObject<paymentCollectorToastIsShownParams>
 */
export function paymentCollectorToastIsShown(params) {
    return { evid: 702, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickToViewProductFromCartPageOa' event (evid: 706)
 *
 * Event description: Click to View product (from cart page)  OA
 *
 * @param {clickToViewProductFromCartPageOaParams} params - The parameters for this event
 * @property {boolean} hasOptions - has_options
 * @property {string} cartId - cartId
 * @property {string} catalogAppId - Stores/bookings App id
 * @property {string} catalogItemId - productId in case of Stores, Bookingid in case od bookings
 * @property {string} origin - catalog_OA / cart_OA (from OneApp Stores front) / quick-view
 * @property {string} itemType - productType in case of Stores
 * @property {GUID} ecomId - ecom_id
 * @return {LogObject<clickToViewProductFromCartPageOaParams>} LogObject<clickToViewProductFromCartPageOaParams>
 */
export function clickToViewProductFromCartPageOa(params) {
    return { evid: 706, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutOoiDevsQaEvent' event (evid: 707)
 *
 * Event description: this bi event is for the devs QA checks
 *
 * @param {checkoutOoiDevsQaEventParams} params - The parameters for this event
 * @property {string} dataString - field with string to check
 * @return {LogObject<checkoutOoiDevsQaEventParams>} LogObject<checkoutOoiDevsQaEventParams>
 */
export function checkoutOoiDevsQaEvent(params) {
    return { evid: 707, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'paymentCollectorClickOnMarkAsPaid' event (evid: 708)
 *
 * Event description: In the collect payment menu, when the user clicks on 'mark as paid'.
 *
 * @param {paymentCollectorClickOnMarkAsPaidParams} params - The parameters for this event
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalogAppId
 * @property {string} appDefId - app_def_id
 * @property {string} origin - order_page_header, order_page_payment
 * @property {boolean} isAuthorized - is_authorized
 * @return {LogObject<paymentCollectorClickOnMarkAsPaidParams>} LogObject<paymentCollectorClickOnMarkAsPaidParams>
 */
export function paymentCollectorClickOnMarkAsPaid(params) {
    return { evid: 708, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'paymentCollectorCollectPaymentClickOnMarkAsPaid' event (evid: 709)
 *
 * Event description: When the user clicks on 'mark as paid' in the payment collection window
 *
 * @param {paymentCollectorCollectPaymentClickOnMarkAsPaidParams} params - The parameters for this event
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} appDefId - app_def_id
 * @property {number} amount - Int multiplied by 100,000, amount entered by the user
 * @property {string} origin - order_page_header, order_page_payment
 * @property {string} currency - currency
 * @property {boolean} isCustomAmount - Check mark is checked
 * @property {boolean} isAuthorized - is_authorized
 * @return {LogObject<paymentCollectorCollectPaymentClickOnMarkAsPaidParams>} LogObject<paymentCollectorCollectPaymentClickOnMarkAsPaidParams>
 */
export function paymentCollectorCollectPaymentClickOnMarkAsPaid(params) {
    return { evid: 709, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutClickOnCheckoutPolicies' event (evid: 712)
 *
 * Event description: When the user clicks on one of the checkout policies
 *
 * @param {checkoutClickOnCheckoutPoliciesParams} params - The parameters for this event
 * @property {string} linkLocation - the location of the link. The options are: footer / form
 * @property {string} appName - app_name (added from 21/03/23)
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} policyType - on which policy the user clicked. The options: terms and conditions / privacy policy / return policy / digital item policy / contact us / custom policy
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase flow id. Note that this field was implemented in January 25
 * @return {LogObject<checkoutClickOnCheckoutPoliciesParams>} LogObject<checkoutClickOnCheckoutPoliciesParams>
 */
export function checkoutClickOnCheckoutPolicies(params) {
    return { evid: 712, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutErrorTrackingForDevelopers' event (evid: 713)
 *
 * Event description: Debug for developers
 *
 * @param {checkoutErrorTrackingForDevelopersParams} params - The parameters for this event
 * @property {string} error - error
 * @property {string} data - data
 * @property {string} purchaseFlowId - purchase flow id. Note that this field was implemented in January 25
 * @return {LogObject<checkoutErrorTrackingForDevelopersParams>} LogObject<checkoutErrorTrackingForDevelopersParams>
 */
export function checkoutErrorTrackingForDevelopers(params) {
    return { evid: 713, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutErrorWhenApplyingAGiftCard' event (evid: 717)
 *
 * Event description: when a uou has an error while applying gift card in the checkout.
 * (Only for the OOO checkout, for the old checkout data - check 130:24)
 *
 * @param {checkoutErrorWhenApplyingAGiftCardParams} params - The parameters for this event
 * @property {string} mobilePosition - Top/Bottom. Null if not mobile device. The place in the checkout on mobile device (not Wix app) where the uou did the action. There are 2 option - on the top of the checkout or on the bottom of the checkout.
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {boolean} isMember - is_member
 * @property {string} errorCode - error code
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<checkoutErrorWhenApplyingAGiftCardParams>} LogObject<checkoutErrorWhenApplyingAGiftCardParams>
 */
export function checkoutErrorWhenApplyingAGiftCard(params) {
    return { evid: 717, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutRedirectFromOoiCheckoutForDev' event (evid: 718)
 *
 * Event description: When UoU is redirected from the OOI checkout to the old Checkout (non-English/have bookings)
 *
 * @param {checkoutRedirectFromOoiCheckoutForDevParams} params - The parameters for this event
 * @property {GUID} checkoutId - The checkout_id won't sent when the reason is not fast flow
 * @property {string} reason - reason for the redirect (non-english, non-stores)
 * @return {LogObject<checkoutRedirectFromOoiCheckoutForDevParams>} LogObject<checkoutRedirectFromOoiCheckoutForDevParams>
 */
export function checkoutRedirectFromOoiCheckoutForDev(params) {
    return { evid: 718, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutLoadingCheckoutPageFailForDev' event (evid: 719)
 *
 * Event description: when the checkout is corrupted
 *
 * @param {checkoutLoadingCheckoutPageFailForDevParams} params - The parameters for this event
 * @property {string} purchaseFlowId - purchase flow id. Note that this field was implemented in January 25
 * @return {LogObject<checkoutLoadingCheckoutPageFailForDevParams>} LogObject<checkoutLoadingCheckoutPageFailForDevParams>
 */
export function checkoutLoadingCheckoutPageFailForDev(params) {
    return { evid: 719, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'sideCartEditorSideCartAddedInEditorModalShownCopySrc130Evid72' event (evid: 72)
 *
 * Event description: sends for the user's action in the popup shown to the user in editor
 *
 * @param {sideCartEditorSideCartAddedInEditorModalShownCopySrc130Evid72Params} params - The parameters for this event
 * @property {string} action - Got it/?/close
 * @return {LogObject<sideCartEditorSideCartAddedInEditorModalShownCopySrc130Evid72Params>} LogObject<sideCartEditorSideCartAddedInEditorModalShownCopySrc130Evid72Params>
 */
export function sideCartEditorSideCartAddedInEditorModalShownCopySrc130Evid72(params) {
    return { evid: 72, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'editorClickOnLearnMoreSrc130Evid73' event (evid: 73)
 *
 * Event description: when the user clicks on "learn more" in the  editor
 *
 * @param {editorClickOnLearnMoreSrc130Evid73Params} params - The parameters for this event
 * @property {string} origin - ‘checkout button’/...
 * @property {string} component_id - ‘side cart’/...
 * @property {string} tab - ‘settings’/...
 * @return {LogObject<editorClickOnLearnMoreSrc130Evid73Params>} LogObject<editorClickOnLearnMoreSrc130Evid73Params>
 */
export function editorClickOnLearnMoreSrc130Evid73(params) {
    return { evid: 73, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutClickToRemoveItemDueToCheckoutRestrictionsSrc130Evid74' event (evid: 74)
 *
 * Event description: When the UoU remove item from checkout when a violation message appears. Note that this can happen also in cart/side cart but the only option for removing items due to violations is in checkout
 *
 * @param {checkoutClickToRemoveItemDueToCheckoutRestrictionsSrc130Evid74Params} params - The parameters for this event
 * @property {string} message - What was the violation message
 * @property {string} lineItemId - Item id that has been removed
 * @property {string} checkoutId - checkout_id
 * @property {string} suggestedFix - Currently we support ‘remove item’
 * @property {string} purchaseFlowId - purchase_flow_id
 * @return {LogObject<checkoutClickToRemoveItemDueToCheckoutRestrictionsSrc130Evid74Params>} LogObject<checkoutClickToRemoveItemDueToCheckoutRestrictionsSrc130Evid74Params>
 */
export function checkoutClickToRemoveItemDueToCheckoutRestrictionsSrc130Evid74(params) {
    return { evid: 74, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'paymentCollectorClickOnItemInCollectPaymentMenu' event (evid: 740)
 *
 * Event description: When the user click on a specific item from the collect payment menu
 *
 * @param {paymentCollectorClickOnItemInCollectPaymentMenuParams} params - The parameters for this event
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalogAppId
 * @property {string} paymentmethod - chosen payment method
 * @property {string} appDefId - app_def_id
 * @property {string} origin - order_page_header, order_page_payment
 * @property {GUID} appId - chosen payment method app_id
 * @property {boolean} isAuthorized - is_authorized
 * @return {LogObject<paymentCollectorClickOnItemInCollectPaymentMenuParams>} LogObject<paymentCollectorClickOnItemInCollectPaymentMenuParams>
 */
export function paymentCollectorClickOnItemInCollectPaymentMenu(params) {
    return { evid: 740, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'draftOrderPageLoaded' event (evid: 755)
 *
 * Event description: When the draft order page is loaded - the initial step for editing
 *
 * @param {draftOrderPageLoadedParams} params - The parameters for this event
 * @property {string} paymentStatus - UNSPECIFIED/ NOT_PAID/ PAID/ PARTIALLY_REFUNDED/ FULLY_REFUNDED/ PENDING
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalogAppId
 * @property {string} draftOrderID - draft_order_id
 * @property {string} fulfillmentStatus - fulfillment_status
 * @return {LogObject<draftOrderPageLoadedParams>} LogObject<draftOrderPageLoadedParams>
 */
export function draftOrderPageLoaded(params) {
    return { evid: 755, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'draftOrderItemAddedToOrder' event (evid: 756)
 *
 * Event description: When an item is added to the draft order
 *
 * @param {draftOrderItemAddedToOrderParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalogAppId
 * @property {string} catalogItemId - catalog_item_id
 * @property {string} draftOrderID - draft_order_id
 * @return {LogObject<draftOrderItemAddedToOrderParams>} LogObject<draftOrderItemAddedToOrderParams>
 */
export function draftOrderItemAddedToOrder(params) {
    return { evid: 756, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'draftOrderClickOnCtaInItemsSection' event (evid: 758)
 *
 * Event description: When the user clicks on CTA in the items sections/customer details
 *
 * @param {draftOrderClickOnCtaInItemsSectionParams} params - The parameters for this event
 * @property {string} orderId - order_id
 * @property {string} catalogAppId - catalogAppId
 * @property {string} catalogItemId - catalog_item_id
 * @property {string} action - Three dots, edit item price, remove item, add again, update inventory, set price, add custom item, edit customer, remove customer, add new customer
 * @property {string} draftOrderID - draft_order_id
 * @return {LogObject<draftOrderClickOnCtaInItemsSectionParams>} LogObject<draftOrderClickOnCtaInItemsSectionParams>
 */
export function draftOrderClickOnCtaInItemsSection(params) {
    return { evid: 758, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'orderPageMoreActionsMenuClickOnActionInSlot' event (evid: 760)
 *
 * Event description: When a user clicks on an action on 'More Actions' menu slot.
 *
 *
 * @param {orderPageMoreActionsMenuClickOnActionInSlotParams} params - The parameters for this event
 * @property {GUID} componentId - The component id that is populated the slot
 * @property {string} componentTitle - The component title shown in menu item
 * @property {string} orderId - order_id
 * @property {string} paymentStatus - payment status
 * @property {GUID} componentAppId - The app that created the component that populates the slot
 * @return {LogObject<orderPageMoreActionsMenuClickOnActionInSlotParams>} LogObject<orderPageMoreActionsMenuClickOnActionInSlotParams>
 */
export function orderPageMoreActionsMenuClickOnActionInSlot(params) {
    return { evid: 760, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'draftOrderClickOnCtaInUpdateOrderModal' event (evid: 767)
 *
 * Event description: When the user clicks on CTA in the "Update Order" modal
 *
 * @param {draftOrderClickOnCtaInUpdateOrderModalParams} params - The parameters for this event
 * @property {boolean} sendFulfillmentEmail - send_fulfillment_email is marked
 * @property {string} orderId - order_id
 * @property {string} draftOrderID - draft_order_id
 * @property {boolean} sendCustomerEmail - send_customer_email is marked
 * @return {LogObject<draftOrderClickOnCtaInUpdateOrderModalParams>} LogObject<draftOrderClickOnCtaInUpdateOrderModalParams>
 */
export function draftOrderClickOnCtaInUpdateOrderModal(params) {
    return { evid: 767, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'draftOrderCommitOrder' event (evid: 770)
 *
 * Event description: Draft order commit- send from confirmation to BE after clicking on update order
 *
 * @param {draftOrderCommitOrderParams} params - The parameters for this event
 * @property {string} errorMessage - error_message
 * @property {string} orderId - order_id
 * @property {string} draftOrderID - draft_order_id
 * @return {LogObject<draftOrderCommitOrderParams>} LogObject<draftOrderCommitOrderParams>
 */
export function draftOrderCommitOrder(params) {
    return { evid: 770, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'settingClicksOnEditCustomizeCheckout' event (evid: 772)
 *
 * Event description: When a user clicks on edit on the commerce setting page as an entry to the checkout composer.
 *
 * @param {settingClicksOnEditCustomizeCheckoutParams} params - The parameters for this event
 * @return {LogObject<settingClicksOnEditCustomizeCheckoutParams>} LogObject<settingClicksOnEditCustomizeCheckoutParams>
 */
export function settingClicksOnEditCustomizeCheckout(params) {
    return { evid: 772, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'draftOrderAddTipOrFee' event (evid: 773)
 *
 * Event description: When the user clicks on “Add” in the add fee or tip
 *
 * @param {draftOrderAddTipOrFeeParams} params - The parameters for this event
 * @property {string} name - fee name
 * @property {string} orderId - order_id
 * @property {number} amount - *100000 fee amount
 * @property {string} draftOrderID - draft_order_id
 * @return {LogObject<draftOrderAddTipOrFeeParams>} LogObject<draftOrderAddTipOrFeeParams>
 */
export function draftOrderAddTipOrFee(params) {
    return { evid: 773, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'draftOrderClickOnCtaInManageDiscounts' event (evid: 776)
 *
 * Event description: When the user clicks on CTA in the manage discounts window
 *
 * @param {draftOrderClickOnCtaInManageDiscountsParams} params - The parameters for this event
 * @property {string} selectedItems - json of selected items and prices
 * @property {string} orderId - order_id
 * @property {string} draftOrderID - draft_order_id
 * @return {LogObject<draftOrderClickOnCtaInManageDiscountsParams>} LogObject<draftOrderClickOnCtaInManageDiscountsParams>
 */
export function draftOrderClickOnCtaInManageDiscounts(params) {
    return { evid: 776, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'settingClickToDirectToExternalService' event (evid: 781)
 *
 * Event description: When the user clicks to be directed to external services such as: connect payments/ go to automation
 *
 * @param {settingClickToDirectToExternalServiceParams} params - The parameters for this event
 * @property {string} externalService - To which service the user will be directed:  connect payments/ go to automation, etc
 * @property {string} origin - From which section the user clicked on the service. Values: payments/ email notifications
 * @return {LogObject<settingClickToDirectToExternalServiceParams>} LogObject<settingClickToDirectToExternalServiceParams>
 */
export function settingClickToDirectToExternalService(params) {
    return { evid: 781, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutSettingsClickToDirectToAddGiftCardSettingsSrc130Evid783' event (evid: 783)
 *
 * Event description: From checkout settings when a user doesn't have a configured gift card the toggle is off and he has a modal that when clicked send the user to the gift card settings screen (add gift card).
 *
 * @param {checkoutSettingsClickToDirectToAddGiftCardSettingsSrc130Evid783Params} params - The parameters for this event
 * @return {LogObject<checkoutSettingsClickToDirectToAddGiftCardSettingsSrc130Evid783Params>} LogObject<checkoutSettingsClickToDirectToAddGiftCardSettingsSrc130Evid783Params>
 */
export function checkoutSettingsClickToDirectToAddGiftCardSettingsSrc130Evid783(params) {
    return { evid: 783, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutSettingsClickToViewMoreCheckoutAppsSrc130Evid784' event (evid: 784)
 *
 * Event description: Under the checkout settings when the user clicks to add more checkout apps (and directed to the app market)
 *
 * @param {checkoutSettingsClickToViewMoreCheckoutAppsSrc130Evid784Params} params - The parameters for this event
 * @return {LogObject<checkoutSettingsClickToViewMoreCheckoutAppsSrc130Evid784Params>} LogObject<checkoutSettingsClickToViewMoreCheckoutAppsSrc130Evid784Params>
 */
export function checkoutSettingsClickToViewMoreCheckoutAppsSrc130Evid784(params) {
    return { evid: 784, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'ordersClickToRefundCancelIssue' event (evid: 79)
 *
 * Event description: When the user clicks to refund/cancel in modal (not confirmation). For WixApp click Next in cancel/refund details screen
 *
 * @param {ordersClickToRefundCancelIssueParams} params - The parameters for this event
 * @property {boolean} isShipping - true, if shipping refunded/cancel as well, false otherwise
 * @property {boolean} updateInventory - true if the checkbox marked, false otherwize
 * @property {string} paymentStatus - order payments status
 * @property {string} appName - app name
 * @property {string} orderId - order id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} refundReason - refund reason (closed list)
 * @property {string} errorReason - multi payments / unsupported provider / unpaid order
 * @property {boolean} isSupported - true if the provider is supported for refund, false otherwize
 * @property {string} refundItems - Json of: {product_id: qty, restock(bool)},{shipping: bool}
 * @property {string} actionType - cancel with refund / refund
 * @property {string} origin - right bar / top menu
 * '
 * @property {string} paymentProvider - order payment providers
 * @property {string} currency - order currency
 * @property {number} refundAmount - int!!!!! multiply by 100000 (null/0 if not refunded. Total amount refunded - sum of refunds.
 * @property {string} personalNoteInEmail - personal note in email (optional)
 * @property {string} refundType - full / partial / none
 * @property {boolean} isEmail - True if the email checkbox true, false otherwize
 * @property {string} refundDetails - refund amount per payment provider and transaction
 * @property {boolean} hasAdditionalFees - false/ true if the user marked to refund additional fees.
 * Null if the order doesn't have additional fees.
 * @return {LogObject<ordersClickToRefundCancelIssueParams>} LogObject<ordersClickToRefundCancelIssueParams>
 */
export function ordersClickToRefundCancelIssue(params) {
    return { evid: 79, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'editorOpenAppSettingsSfe' event (evid: 811)
 *
 * Event description: double click / right click on a wixstores component
 *
 * @param {editorOpenAppSettingsSfeParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} editorMode - mobile / desktop
 * @property {boolean} isPremiumEligible - Does the site have a premium package that allows using the feature (if not relevant null)
 * @property {string} origin - the state of the panel when the user clicked on the button:editor / onboarding /editorX…
 * @property {string} component_id - CurAvalaraTax, grid gallery, slider gallery, product page, CurrencyConverter
 * @return {LogObject<editorOpenAppSettingsSfeParams>} LogObject<editorOpenAppSettingsSfeParams>
 */
export function editorOpenAppSettingsSfe(params) {
    return { evid: 811, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'editorChangeStyleColorSfe' event (evid: 812)
 *
 * Event description: upon changing a store style or color
 *
 * @param {editorChangeStyleColorSfeParams} params - The parameters for this event
 * @property {string} parameter - facebook,tweeter, image scaling, navigation position
 * @property {string} appName - app_name
 * @property {string} editorMode - mobile / desktop
 * @property {string} element - product image, name&price&sku, product options&quantity, button, info sections, social media
 * @property {string} component_id - grid gallery, slider galeery, product page,CurrencyConverter, AvalaraTax
 * @property {string} value - behavior type
 * @return {LogObject<editorChangeStyleColorSfeParams>} LogObject<editorChangeStyleColorSfeParams>
 */
export function editorChangeStyleColorSfe(params) {
    return { evid: 812, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'clickToOpenStoreManagerSfe' event (evid: 814)
 *
 * Event description: clicking 're-order products in collection' (store manager is opened in collection page)
 *
 * @param {clickToOpenStoreManagerSfeParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {string} targetPage - product list / product / dashboard / ....
 * @return {LogObject<clickToOpenStoreManagerSfeParams>} LogObject<clickToOpenStoreManagerSfeParams>
 */
export function clickToOpenStoreManagerSfe(params) {
    return { evid: 814, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'editorResetAppSettingsSfe' event (evid: 819)
 *
 * Event description: click on 'reset settings' in app settings panel
 *
 * @param {editorResetAppSettingsSfeParams} params - The parameters for this event
 * @property {string} component_id - CurrencyConverter, AvalaraTax
 * @property {string} appName - app_name
 * @return {LogObject<editorResetAppSettingsSfeParams>} LogObject<editorResetAppSettingsSfeParams>
 */
export function editorResetAppSettingsSfe(params) {
    return { evid: 819, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'editorChangeCartIconSfe' event (evid: 820)
 *
 * Event description: select a cart icon in the mini cart settings
 *
 * @param {editorChangeCartIconSfeParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} type - icon type
 * @return {LogObject<editorChangeCartIconSfeParams>} LogObject<editorChangeCartIconSfeParams>
 */
export function editorChangeCartIconSfe(params) {
    return { evid: 820, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'editorChangeMiniCartBehaviorSfe' event (evid: 822)
 *
 * Event description: select a behavior for click on the mini cart in mini cart settings
 *
 * @param {editorChangeMiniCartBehaviorSfeParams} params - The parameters for this event
 * @property {string} parameter - parameter
 * @property {string} appName - app_name
 * @property {string} value - behavior type (openMiniCart/openCartPage)
 * @return {LogObject<editorChangeMiniCartBehaviorSfeParams>} LogObject<editorChangeMiniCartBehaviorSfeParams>
 */
export function editorChangeMiniCartBehaviorSfe(params) {
    return { evid: 822, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutIntegratingFormsFailure' event (evid: 823)
 *
 * Event description: This event sent when an error in initForms function (integrating forms to checkout) appeared.
 *
 * @param {checkoutIntegratingFormsFailureParams} params - The parameters for this event
 * @property {string} formsTemplatesId - form_template_id
 * @property {GUID} cartId - cart_id
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} networkError - network_error
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase flow id. Note that this field was implemented in January 25
 * @return {LogObject<checkoutIntegratingFormsFailureParams>} LogObject<checkoutIntegratingFormsFailureParams>
 */
export function checkoutIntegratingFormsFailure(params) {
    return { evid: 823, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutMemberMemberAddressCreated' event (evid: 824)
 *
 * Event description: when a member adds a new address
 *
 * @param {checkoutMemberMemberAddressCreatedParams} params - The parameters for this event
 * @property {string} stage - in which stage the visitor add new address - contact-details or billing
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical) etc
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} addressServiceId - address_id
 * @property {boolean} isSetAsDefaultChecked - true - was checked as default (new default or from last edit)
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase flow id. Note that this field was implemented in January 25
 * @return {LogObject<checkoutMemberMemberAddressCreatedParams>} LogObject<checkoutMemberMemberAddressCreatedParams>
 */
export function checkoutMemberMemberAddressCreated(params) {
    return { evid: 824, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutMemberMemberAddressUpdated' event (evid: 825)
 *
 * Event description: when a member updates (edits) an existing address
 *
 * @param {checkoutMemberMemberAddressUpdatedParams} params - The parameters for this event
 * @property {string} stage - in which stage the visitor change/edit - contact-details or billing
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical) etc
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {boolean} isSetAsDefaultChecked - true - was checked as default (new default or from last edit)
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} isDefault - was set to default
 * @property {GUID} addressId - address_id
 * @property {string} purchaseFlowId - purchase flow id. Note that this field was implemented in January 25
 * @return {LogObject<checkoutMemberMemberAddressUpdatedParams>} LogObject<checkoutMemberMemberAddressUpdatedParams>
 */
export function checkoutMemberMemberAddressUpdated(params) {
    return { evid: 825, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutMemberClickOnAddNewAddress' event (evid: 826)
 *
 * Event description: when a member click on create member address (or - add new address)
 *
 * @param {checkoutMemberClickOnAddNewAddressParams} params - The parameters for this event
 * @property {string} stage - in which stage the visitor clicked on add new address - contact-details or billing
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical) etc
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} origin - from where the uou clicked on add new address - dropdown / error message
 * @property {GUID} addressServiceId - address_id
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase flow id. Note that this field was implemented in January 25
 * @return {LogObject<checkoutMemberClickOnAddNewAddressParams>} LogObject<checkoutMemberClickOnAddNewAddressParams>
 */
export function checkoutMemberClickOnAddNewAddress(params) {
    return { evid: 826, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutMemberClickOnEditMemberAddress' event (evid: 827)
 *
 * Event description: when a member clicks on edit/change member address
 *
 * @param {checkoutMemberClickOnEditMemberAddressParams} params - The parameters for this event
 * @property {string} stage - in which stage the visitor clicked on edit/change address - contact-details or billing
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical) etc
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} origin - from where the visitor clicked on edit/change address - dropdown / error message
 * @property {GUID} addressServiceId - aaddress_id
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase flow id. Note that this field was implemented in January 25
 * @return {LogObject<checkoutMemberClickOnEditMemberAddressParams>} LogObject<checkoutMemberClickOnEditMemberAddressParams>
 */
export function checkoutMemberClickOnEditMemberAddress(params) {
    return { evid: 827, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'editorChangeElementSettingsSfe' event (evid: 831)
 *
 * Event description: change element settings in SF component settings
 *
 * @param {editorChangeElementSettingsSfeParams} params - The parameters for this event
 * @property {string} parameter - facebook,tweeter, image scaling, navigation position
 * @property {string} appName - app_name
 * @property {string} editorMode - mobile / desktop
 * @property {string} element - product image, name&price&sku, product options&quantity, button, info sections, social media
 * @property {string} origin - origin
 * @property {string} new_value - ture/false,on/off, crop/fit...
 * @property {string} component_id - grid gallery, slider galeery, product page,CurrencyConverter, AvalaraTax
 * @property {string} value - 0/1 (0= 'Above and below cart', 1='only below cart')
 * @return {LogObject<editorChangeElementSettingsSfeParams>} LogObject<editorChangeElementSettingsSfeParams>
 */
export function editorChangeElementSettingsSfe(params) {
    return { evid: 831, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'editorChangeTextFieldSfe' event (evid: 833)
 *
 * Event description: change the text in store front settings
 *
 * @param {editorChangeTextFieldSfeParams} params - The parameters for this event
 * @property {string} field - Icon text, button text, out of stock...
 * @property {string} appName - app_name
 * @property {string} text - custom filter name
 * @property {string} origin - the state of the panel when the user clicked on the button
 * @property {string} component_id - grid gallery, slider galery, product page, mini cart....
 * @return {LogObject<editorChangeTextFieldSfeParams>} LogObject<editorChangeTextFieldSfeParams>
 */
export function editorChangeTextFieldSfe(params) {
    return { evid: 833, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutTipsTipAddedToCheckout' event (evid: 834)
 *
 * Event description: When a visitor adds a tip in the checkout (or - changes the default setting)_
 *
 * app ID sent only from v2 of the app (September 2024)
 *
 *
 * @param {checkoutTipsTipAddedToCheckoutParams} params - The parameters for this event
 * @property {number} rate - The tip value * 100000
 * @property {GUID} cartId - cart_id
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {boolean} isCustomTip - True - custom amount False - option from list
 * @property {string} tipType - Percentage/Fixed amount
 * @property {GUID} ecomId - ecom_id
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} appId - app id to distinguish between the app versions
 * @property {boolean} is_default - is default tip value
 * @return {LogObject<checkoutTipsTipAddedToCheckoutParams>} LogObject<checkoutTipsTipAddedToCheckoutParams>
 */
export function checkoutTipsTipAddedToCheckout(params) {
    return { evid: 834, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutOpenCloseYourOrderSummaryInMobile' event (evid: 835)
 *
 * Event description: when uou on a mobile device click on the order section to expand or collapse it and see/unsee the summary of the order with all the items.
 *
 * @param {checkoutOpenCloseYourOrderSummaryInMobileParams} params - The parameters for this event
 * @property {string} purchaseFlowId - purchaseFlowId
 * @property {string} catalogAppId - list of catalog_app_id in the checkout
 * @property {string} origin - Top/Bottom
 * @property {string} action - open/close
 * @return {LogObject<checkoutOpenCloseYourOrderSummaryInMobileParams>} LogObject<checkoutOpenCloseYourOrderSummaryInMobileParams>
 */
export function checkoutOpenCloseYourOrderSummaryInMobile(params) {
    return { evid: 835, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutPolicyAgreementCheckboxIsCheckUncheck' event (evid: 836)
 *
 * Event description: When a uou check/uncheck the policy agreement checkbox in the checkout. BI events not exist yet
 *
 * @param {checkoutPolicyAgreementCheckboxIsCheckUncheckParams} params - The parameters for this event
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} checkoutId - checkout_id
 * @property {string} action - check/unchecked
 * @return {LogObject<checkoutPolicyAgreementCheckboxIsCheckUncheckParams>} LogObject<checkoutPolicyAgreementCheckboxIsCheckUncheckParams>
 */
export function checkoutPolicyAgreementCheckboxIsCheckUncheck(params) {
    return { evid: 836, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutSubscriptionCheckboxIsCheckUncheck' event (evid: 837)
 *
 * Event description: When a uou check/uncheck the subscription checkbox
 *  in the checkout. BI events not exist yet
 *
 * @param {checkoutSubscriptionCheckboxIsCheckUncheckParams} params - The parameters for this event
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} checkoutId - checkout_id
 * @property {string} action - check/unchecked
 * @return {LogObject<checkoutSubscriptionCheckboxIsCheckUncheckParams>} LogObject<checkoutSubscriptionCheckboxIsCheckUncheckParams>
 */
export function checkoutSubscriptionCheckboxIsCheckUncheck(params) {
    return { evid: 837, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutShowHideItemsSectionInMobileView' event (evid: 838)
 *
 * Event description: When a uou on a mobile device click on the items section to expand or collapse it and see/unsee the list of all the items at the bottom of the checkout.
 *
 * @param {checkoutShowHideItemsSectionInMobileViewParams} params - The parameters for this event
 * @property {string} purchaseFlowId - purchaseFlowId
 * @property {string} catalogAppId - list of catalog_app_id in the checkout
 * @property {string} action - show/hide
 * @return {LogObject<checkoutShowHideItemsSectionInMobileViewParams>} LogObject<checkoutShowHideItemsSectionInMobileViewParams>
 */
export function checkoutShowHideItemsSectionInMobileView(params) {
    return { evid: 838, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutTotalsHaveBeenUpdatedPopUpShown' event (evid: 839)
 *
 * Event description: when the pop us is shown to user
 *
 * @param {checkoutTotalsHaveBeenUpdatedPopUpShownParams} params - The parameters for this event
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} originType - the type of flow that lead to the checkout, like buy now, paypal, etc.
 * @property {string} flowType - 'quick flow' / 'full flow'. For OOI Checkout-   fastFlow = 'fast flow'
 * @property {string} appName - app_name
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<checkoutTotalsHaveBeenUpdatedPopUpShownParams>} LogObject<checkoutTotalsHaveBeenUpdatedPopUpShownParams>
 */
export function checkoutTotalsHaveBeenUpdatedPopUpShown(params) {
    return { evid: 839, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickOnAdditionalActionsInProfileSrc130Evid84' event (evid: 84)
 *
 * Event description: Click on three dots near create region
 *
 * @param {deliveryProfileClickOnAdditionalActionsInProfileSrc130Evid84Params} params - The parameters for this event
 * @property {string} profileId - under which profile id the user clicks
 * @return {LogObject<deliveryProfileClickOnAdditionalActionsInProfileSrc130Evid84Params>} LogObject<deliveryProfileClickOnAdditionalActionsInProfileSrc130Evid84Params>
 */
export function deliveryProfileClickOnAdditionalActionsInProfileSrc130Evid84(params) {
    return { evid: 84, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutClickOnCtaInTotalsHaveBeenUpdatedPopup' event (evid: 840)
 *
 * Event description: when the user clicks on the CTA in the pop up
 *
 * @param {checkoutClickOnCtaInTotalsHaveBeenUpdatedPopupParams} params - The parameters for this event
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} originType - the type of flow that lead to the checkout, like buy now, paypal, etc.
 * @property {string} flowType - 'quick flow' / 'full flow'. For OOI Checkout-   fastFlow = 'fast flow'
 * @property {string} appName - app_name
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<checkoutClickOnCtaInTotalsHaveBeenUpdatedPopupParams>} LogObject<checkoutClickOnCtaInTotalsHaveBeenUpdatedPopupParams>
 */
export function checkoutClickOnCtaInTotalsHaveBeenUpdatedPopup(params) {
    return { evid: 840, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'cartSelectCountryInShippingDestinationPopup' event (evid: 841)
 *
 * Event description: When the UOU chooses country in the shipping destination popup in cart (no matter which country) . Sent after uou is choosing country and not after clicking on update
 *
 * @param {cartSelectCountryInShippingDestinationPopupParams} params - The parameters for this event
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {boolean} hasSubdivision - True if the country that was selected has any subdivisions or not (FALSE)
 * @property {string} shippingDestinationCountry - shipping destination country
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<cartSelectCountryInShippingDestinationPopupParams>} LogObject<cartSelectCountryInShippingDestinationPopupParams>
 */
export function cartSelectCountryInShippingDestinationPopup(params) {
    return { evid: 841, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutUouReturnsFromExpressCheckout' event (evid: 842)
 *
 * Event description: When the uou is directed back to checkout / thank you page after filling details in express checkout
 *
 * @param {checkoutUouReturnsFromExpressCheckoutParams} params - The parameters for this event
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} reason - Values:  shouldChooseShippingMethod / hasTermsAndConditions / hasCustomField / hasShippingError / hasTaxError / hasTotalAmountMismatchWithLatestSeen / hasViolations  Why the uou was directed back to checkout/ thank you page
 * @property {string} destination - checkout/Thank you page  (where the uou lands when he gets back)
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<checkoutUouReturnsFromExpressCheckoutParams>} LogObject<checkoutUouReturnsFromExpressCheckoutParams>
 */
export function checkoutUouReturnsFromExpressCheckout(params) {
    return { evid: 842, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutUouSetShippingMethodInExpressCheckout' event (evid: 843)
 *
 * Event description: When the uou is set the shipping method in express checkout
 *
 * @param {checkoutUouSetShippingMethodInExpressCheckoutParams} params - The parameters for this event
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<checkoutUouSetShippingMethodInExpressCheckoutParams>} LogObject<checkoutUouSetShippingMethodInExpressCheckoutParams>
 */
export function checkoutUouSetShippingMethodInExpressCheckout(params) {
    return { evid: 843, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutUouSetShippingAddressInExpressCheckout' event (evid: 844)
 *
 * Event description: When the uou is set the shipping address in express checkout
 *
 * @param {checkoutUouSetShippingAddressInExpressCheckoutParams} params - The parameters for this event
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<checkoutUouSetShippingAddressInExpressCheckoutParams>} LogObject<checkoutUouSetShippingAddressInExpressCheckoutParams>
 */
export function checkoutUouSetShippingAddressInExpressCheckout(params) {
    return { evid: 844, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutRedirectToCheckoutFromExpressCheckout' event (evid: 845)
 *
 * Event description: When UoU redirects to Ecom's checkout from the express checkout (Paypal, Apple Pay, etc).
 * This can happen when there is a mandatory field in the checkout, terms to accept, changes needed in the shipping section ...
 *
 * @param {checkoutRedirectToCheckoutFromExpressCheckoutParams} params - The parameters for this event
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {GUID} cartId - cart_id
 * @property {string} reason - The redirect's reason
 * @property {GUID} checkoutId - checkout_id
 * @return {LogObject<checkoutRedirectToCheckoutFromExpressCheckoutParams>} LogObject<checkoutRedirectToCheckoutFromExpressCheckoutParams>
 */
export function checkoutRedirectToCheckoutFromExpressCheckout(params) {
    return { evid: 845, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'checkoutBillingAddressAsDeliverAddress' event (evid: 846)
 *
 * Event description: when the billing address should be as deliver address. This bi is created for ab test as exposure point (potential for removing the billing details)
 *
 * @param {checkoutBillingAddressAsDeliverAddressParams} params - The parameters for this event
 * @property {string} billingCountry - billing country code
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} cartType - digital/mixed/physical
 * @property {string} shippingCountry - shipping country code that was selected
 * @property {string} paymentMethods - list of all payment methods that presented to the visitor separated by ","
 * @return {LogObject<checkoutBillingAddressAsDeliverAddressParams>} LogObject<checkoutBillingAddressAsDeliverAddressParams>
 */
export function checkoutBillingAddressAsDeliverAddress(params) {
    return { evid: 846, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickOnAdvancedModalSrc130Evid85' event (evid: 85)
 *
 * Event description: After clicking additional actions (three dots) click on delivery profiles (advanced modal).
 *
 * @param {deliveryProfileClickOnAdvancedModalSrc130Evid85Params} params - The parameters for this event
 * @property {string} profileId - Under which profile id the user click
 * @return {LogObject<deliveryProfileClickOnAdvancedModalSrc130Evid85Params>} LogObject<deliveryProfileClickOnAdvancedModalSrc130Evid85Params>
 */
export function deliveryProfileClickOnAdvancedModalSrc130Evid85(params) {
    return { evid: 85, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickToCreateNewProfileSrc130Evid86' event (evid: 86)
 *
 * Event description: Click on create new profile
 *
 * @param {deliveryProfileClickToCreateNewProfileSrc130Evid86Params} params - The parameters for this event
 * @return {LogObject<deliveryProfileClickToCreateNewProfileSrc130Evid86Params>} LogObject<deliveryProfileClickToCreateNewProfileSrc130Evid86Params>
 */
export function deliveryProfileClickToCreateNewProfileSrc130Evid86(params) {
    return { evid: 86, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileShowHideGroupItemsSrc130Evid87' event (evid: 87)
 *
 * Event description: Open\close group item collapsible
 * when clicking on the header the it is closed or opens as well (even if not clicked on the item)
 *
 * @param {deliveryProfileShowHideGroupItemsSrc130Evid87Params} params - The parameters for this event
 * @property {string} profileId - null
 * @property {string} action - open\close
 * @property {string} origin - header/button
 * @return {LogObject<deliveryProfileShowHideGroupItemsSrc130Evid87Params>} LogObject<deliveryProfileShowHideGroupItemsSrc130Evid87Params>
 */
export function deliveryProfileShowHideGroupItemsSrc130Evid87(params) {
    return { evid: 87, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickOnCatalogInGroupItemsSrc130Evid88' event (evid: 88)
 *
 * Event description: click on items group (based on catalog - rentals, products etc...)
 *
 * @param {deliveryProfileClickOnCatalogInGroupItemsSrc130Evid88Params} params - The parameters for this event
 * @property {string} profileId - Profile id
 * @property {string} selectedCatalogId - Catalog id that was selected
 * @property {string} selectedCatalogName - Catalog name that was selected
 * @return {LogObject<deliveryProfileClickOnCatalogInGroupItemsSrc130Evid88Params>} LogObject<deliveryProfileClickOnCatalogInGroupItemsSrc130Evid88Params>
 */
export function deliveryProfileClickOnCatalogInGroupItemsSrc130Evid88(params) {
    return { evid: 88, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickOnManageItemsInGroupItemsSrc130Evid89' event (evid: 89)
 *
 * Event description: click on manage items. can be selected from a single catalog view or multiple catalogs.
 * also when clicking on manage items and choosing a specific catalog the group is automatically focused (with sending click event)
 *
 * @param {deliveryProfileClickOnManageItemsInGroupItemsSrc130Evid89Params} params - The parameters for this event
 * @property {string} profileId - Profile id
 * @property {string} selectedCatalogId - Catalog id that was selected
 * @property {string} selectedCatalogName - Catalog name that was selected
 * @property {string} origin - header\empty state
 * @return {LogObject<deliveryProfileClickOnManageItemsInGroupItemsSrc130Evid89Params>} LogObject<deliveryProfileClickOnManageItemsInGroupItemsSrc130Evid89Params>
 */
export function deliveryProfileClickOnManageItemsInGroupItemsSrc130Evid89(params) {
    return { evid: 89, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'settingsBrandedCheckoutInteractionInLayoutForCheckoutHeaderSrc130Evid9' event (evid: 9)
 *
 * Event description: When the user interacts with the layout in the checkout header modal
 *
 *
 * @param {settingsBrandedCheckoutInteractionInLayoutForCheckoutHeaderSrc130Evid9Params} params - The parameters for this event
 * @property {string} businessInfo - Under which business info does the interaction made: Name/Logo
 * @property {string} field - Logo size/ alignment/ show checkout label in header
 * @property {string} value - on/off/side/ center/small/medium/large
 * @return {LogObject<settingsBrandedCheckoutInteractionInLayoutForCheckoutHeaderSrc130Evid9Params>} LogObject<settingsBrandedCheckoutInteractionInLayoutForCheckoutHeaderSrc130Evid9Params>
 */
export function settingsBrandedCheckoutInteractionInLayoutForCheckoutHeaderSrc130Evid9(params) {
    return { evid: 9, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileItemAssociationModalIsOpenedSrc130Evid90' event (evid: 90)
 *
 * Event description: after clicking manage items (EVID 89) the modal opens
 *
 * @param {deliveryProfileItemAssociationModalIsOpenedSrc130Evid90Params} params - The parameters for this event
 * @property {string} profileId - profile id
 * @property {string} catalogId - Catalog id
 * @property {string} appId - App id
 * @property {string} catalogName - Catalog name that was presented in the modal
 * @return {LogObject<deliveryProfileItemAssociationModalIsOpenedSrc130Evid90Params>} LogObject<deliveryProfileItemAssociationModalIsOpenedSrc130Evid90Params>
 */
export function deliveryProfileItemAssociationModalIsOpenedSrc130Evid90(params) {
    return { evid: 90, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileRenderSlotForItemAssociationFailureSrc130Evid91' event (evid: 91)
 *
 * Event description: this bi sent when the slot failed to render (for the success we have the bi for Delivery profile > item association modal is opened evid 90).
 *
 *
 * @param {deliveryProfileRenderSlotForItemAssociationFailureSrc130Evid91Params} params - The parameters for this event
 * @property {string} profileId - profile id
 * @property {string} catalogId - Catalog_id that was presented in the modal
 * @property {string} appId - app id
 * @property {string} catalogName - Catalog name that was presented in the modal
 * @return {LogObject<deliveryProfileRenderSlotForItemAssociationFailureSrc130Evid91Params>} LogObject<deliveryProfileRenderSlotForItemAssociationFailureSrc130Evid91Params>
 */
export function deliveryProfileRenderSlotForItemAssociationFailureSrc130Evid91(params) {
    return { evid: 91, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'switchTabInBo' event (evid: 912)
 *
 * Event description: when there are tabs in BO page and a user moves between the tabs
 * for example, in BIS notifications
 *
 * @param {switchTabInBoParams} params - The parameters for this event
 * @property {string} tabName - notifications / automations
 * @property {string} origin - page name - back in stock
 * @property {GUID} catalogInstanceId - store_id
 * @return {LogObject<switchTabInBoParams>} LogObject<switchTabInBoParams>
 */
export function switchTabInBo(params) {
    return { evid: 912, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bisClickOnKb' event (evid: 913)
 *
 * Event description: when a user clicks on BIS KB
 *
 * @param {bisClickOnKbParams} params - The parameters for this event
 * @property {GUID} catalogInstanceId - store_id
 * @property {string} origin - welcome screen, BIS screen, BIS added successfully modal
 * @return {LogObject<bisClickOnKbParams>} LogObject<bisClickOnKbParams>
 */
export function bisClickOnKb(params) {
    return { evid: 913, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bisStartCollectingRequestsClicked' event (evid: 914)
 *
 * Event description: when a user clicks on start collecting requests
 *
 * @param {bisStartCollectingRequestsClickedParams} params - The parameters for this event
 * @property {GUID} catalogInstanceId - store_id
 * @property {string} origin - Welcome screen - Add now, as requests but not collecting request
 * @return {LogObject<bisStartCollectingRequestsClickedParams>} LogObject<bisStartCollectingRequestsClickedParams>
 */
export function bisStartCollectingRequestsClicked(params) {
    return { evid: 914, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bisAddedSuccessfullyModalIsShown' event (evid: 915)
 *
 * Event description: When back in stock successfully added modal is shown tto the user
 *
 * @param {bisAddedSuccessfullyModalIsShownParams} params - The parameters for this event
 * @property {GUID} catalogInstanceId - store_id
 * @return {LogObject<bisAddedSuccessfullyModalIsShownParams>} LogObject<bisAddedSuccessfullyModalIsShownParams>
 */
export function bisAddedSuccessfullyModalIsShown(params) {
    return { evid: 915, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bisClickToActivateAutomation' event (evid: 916)
 *
 * Event description: When a user click to activate back in stock automation
 *
 * @param {bisClickToActivateAutomationParams} params - The parameters for this event
 * @property {number} numRequest - the number of request the user has when he clicks to activate the automation
 * @property {GUID} catalogInstanceId - store_id
 * @return {LogObject<bisClickToActivateAutomationParams>} LogObject<bisClickToActivateAutomationParams>
 */
export function bisClickToActivateAutomation(params) {
    return { evid: 916, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bisClickToViewContactPanel' event (evid: 917)
 *
 * Event description: when a user clicks to view contact panel
 *
 * @param {bisClickToViewContactPanelParams} params - The parameters for this event
 * @property {string} catalogItemId - product_guid
 * @property {string} options - variant id
 * @property {GUID} contactId - contactId
 * @property {GUID} backInStockRequestId - backInStockRequestId
 * @property {GUID} catalogInstanceId - store_id
 * @property {GUID} appId - stores app id
 * @return {LogObject<bisClickToViewContactPanelParams>} LogObject<bisClickToViewContactPanelParams>
 */
export function bisClickToViewContactPanel(params) {
    return { evid: 917, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'errorOnTurningOnAutomation' event (evid: 918)
 *
 * Event description: Error when the site is not eligible for turning on automation via fast flow
 *
 * @param {errorOnTurningOnAutomationParams} params - The parameters for this event
 * @property {string} errorCode - the desc of the error
 * @property {string} recipeName - recipeName
 * @return {LogObject<errorOnTurningOnAutomationParams>} LogObject<errorOnTurningOnAutomationParams>
 */
export function errorOnTurningOnAutomation(params) {
    return { evid: 918, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'directTurningOnAutomationSuccessModalIsShown' event (evid: 919)
 *
 * Event description: when the Direct Turning on automation success modal is shown
 *
 * @param {directTurningOnAutomationSuccessModalIsShownParams} params - The parameters for this event
 * @property {string} origin - back in stock
 * @property {GUID} catalogInstanceId - store_id
 * @return {LogObject<directTurningOnAutomationSuccessModalIsShownParams>} LogObject<directTurningOnAutomationSuccessModalIsShownParams>
 */
export function directTurningOnAutomationSuccessModalIsShown(params) {
    return { evid: 919, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickOnActionInItemAssociationModalSrc130Evid92' event (evid: 92)
 *
 * Event description: when the user click on action in item association modal - close/cancel/add items.
 * Currently relevant for stores only
 *
 *
 * @param {deliveryProfileClickOnActionInItemAssociationModalSrc130Evid92Params} params - The parameters for this event
 * @property {string} profileId - profile id
 * @property {string} itemsIds - List of all items that has been selected
 * @property {string} action - close/cancel/add items
 * @return {LogObject<deliveryProfileClickOnActionInItemAssociationModalSrc130Evid92Params>} LogObject<deliveryProfileClickOnActionInItemAssociationModalSrc130Evid92Params>
 */
export function deliveryProfileClickOnActionInItemAssociationModalSrc130Evid92(params) {
    return { evid: 92, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bisClickPauseCustomersRequestToOpenModal' event (evid: 920)
 *
 * Event description: when a user clicks pause customers request to open modal
 *
 * @param {bisClickPauseCustomersRequestToOpenModalParams} params - The parameters for this event
 * @property {number} numberOfRequests - number of requests when the user clicks to open modal of pause customers request
 * @property {GUID} catalogInstanceId - store_id
 * @return {LogObject<bisClickPauseCustomersRequestToOpenModalParams>} LogObject<bisClickPauseCustomersRequestToOpenModalParams>
 */
export function bisClickPauseCustomersRequestToOpenModal(params) {
    return { evid: 920, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'bisClickToPauseCustomerRequests' event (evid: 921)
 *
 * Event description: when a user clicks to pause customers request
 *
 * @param {bisClickToPauseCustomerRequestsParams} params - The parameters for this event
 * @property {number} numberOfRequests - number of requests when the user clicks to open modal of pause customers request
 * @property {GUID} catalogInstanceId - store_id
 * @return {LogObject<bisClickToPauseCustomerRequestsParams>} LogObject<bisClickToPauseCustomerRequestsParams>
 */
export function bisClickToPauseCustomerRequests(params) {
    return { evid: 921, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickToEditProfileSrc130Evid93' event (evid: 93)
 *
 * Event description: Edit profile in delivery profiles page
 *
 * @param {deliveryProfileClickToEditProfileSrc130Evid93Params} params - The parameters for this event
 * @property {string} profileId - profile id
 * @return {LogObject<deliveryProfileClickToEditProfileSrc130Evid93Params>} LogObject<deliveryProfileClickToEditProfileSrc130Evid93Params>
 */
export function deliveryProfileClickToEditProfileSrc130Evid93(params) {
    return { evid: 93, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileClickOnActionInBlendRateNoticeMessageSrc130Evid94' event (evid: 94)
 *
 * Event description: Click on how blend rates are calculated. Can be accessed from warning or from profiles page.
 * can click on "x" in warning, or show me more from warning or show me more from button.
 *
 * @param {deliveryProfileClickOnActionInBlendRateNoticeMessageSrc130Evid94Params} params - The parameters for this event
 * @property {string} action - click\exit
 * @property {string} origin - from where the action happend - sub title or helper
 * @return {LogObject<deliveryProfileClickOnActionInBlendRateNoticeMessageSrc130Evid94Params>} LogObject<deliveryProfileClickOnActionInBlendRateNoticeMessageSrc130Evid94Params>
 */
export function deliveryProfileClickOnActionInBlendRateNoticeMessageSrc130Evid94(params) {
    return { evid: 94, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileBlendRateModalOpenedSrc130Evid95' event (evid: 95)
 *
 * Event description: Modal opened (opening the modal - evid 94 with action = show me from warning or action = show me)
 *
 *
 * @param {deliveryProfileBlendRateModalOpenedSrc130Evid95Params} params - The parameters for this event
 * @return {LogObject<deliveryProfileBlendRateModalOpenedSrc130Evid95Params>} LogObject<deliveryProfileBlendRateModalOpenedSrc130Evid95Params>
 */
export function deliveryProfileBlendRateModalOpenedSrc130Evid95(params) {
    return { evid: 95, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileActionOnBlendRateModalSrc130Evid96' event (evid: 96)
 *
 * Event description: Actions in blended rate modal - x/got it/ i want to know more after opening.
 *
 * @param {deliveryProfileActionOnBlendRateModalSrc130Evid96Params} params - The parameters for this event
 * @property {string} action - click/exit
 * @property {string} origin - sub title/helper
 * @return {LogObject<deliveryProfileActionOnBlendRateModalSrc130Evid96Params>} LogObject<deliveryProfileActionOnBlendRateModalSrc130Evid96Params>
 */
export function deliveryProfileActionOnBlendRateModalSrc130Evid96(params) {
    return { evid: 96, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileDeleteProfileSrc130Evid97' event (evid: 97)
 *
 * Event description: Click on delete profile
 *
 * @param {deliveryProfileDeleteProfileSrc130Evid97Params} params - The parameters for this event
 * @property {string} profile_id - profile id
 * @return {LogObject<deliveryProfileDeleteProfileSrc130Evid97Params>} LogObject<deliveryProfileDeleteProfileSrc130Evid97Params>
 */
export function deliveryProfileDeleteProfileSrc130Evid97(params) {
    return { evid: 97, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileDeleteProfileModalIsOpenedSrc130Evid98' event (evid: 98)
 *
 * Event description: Delete modal opened after clicked (evid 97)
 *
 * @param {deliveryProfileDeleteProfileModalIsOpenedSrc130Evid98Params} params - The parameters for this event
 * @property {string} profileId - profile id
 * @return {LogObject<deliveryProfileDeleteProfileModalIsOpenedSrc130Evid98Params>} LogObject<deliveryProfileDeleteProfileModalIsOpenedSrc130Evid98Params>
 */
export function deliveryProfileDeleteProfileModalIsOpenedSrc130Evid98(params) {
    return { evid: 98, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'deliveryProfileActionOnDeleteProfileModalSrc130Evid99' event (evid: 99)
 *
 * Event description: Make an action after modal is opened (evid 98) - delete/close/cancel
 *
 *
 *
 * @param {deliveryProfileActionOnDeleteProfileModalSrc130Evid99Params} params - The parameters for this event
 * @property {string} profileId - profile id
 * @property {string} action - delete/close/cancel
 * @return {LogObject<deliveryProfileActionOnDeleteProfileModalSrc130Evid99Params>} LogObject<deliveryProfileActionOnDeleteProfileModalSrc130Evid99Params>
 */
export function deliveryProfileActionOnDeleteProfileModalSrc130Evid99(params) {
    return { evid: 99, src: 130, endpoint: '', params };
}
/**
 * A function to create a log object for the 'validationRulesAddRequirementClicked' event (evid: 400)
 *
 * Event description: Validation Rules - Add requirement clicked.
 *
 * @param {validationRulesAddRequirementClickedParams} params - The parameters for this event
 * @property {number} numRequirements - Number of the existing requirements
 * @property {string} origin - Where user clicked to add requirement  New item / add requirement. new item is in empty state
 * @return {LogObject<validationRulesAddRequirementClickedParams>} LogObject<validationRulesAddRequirementClickedParams>
 */
export function validationRulesAddRequirementClicked(params) {
    return { evid: 400, src: 145, endpoint: '', params };
}
/**
 * A function to create a log object for the 'validationRulesSaveUpdateRequirements' event (evid: 401)
 *
 * Event description: When user save/update from the requirement page
 *
 * @param {validationRulesSaveUpdateRequirementsParams} params - The parameters for this event
 * @property {string} name - The requirement’s name
 * @property {GUID} productsId - Specific products for which validation will be applied. If appliesTo = all products the field will be null
 * @property {GUID} id - Requirements id
 * @property {string} actionType - Number of thcreate/ update Create for the first time saving the requirement e existing requirements
 * @property {boolean} isActive - Is the validation active?
 * @property {string} message - User message to uou
 * @property {string} type - Type of the requirement. For updates send new status
 * @property {string} checkoutBehavior - the content of the filed  checkoutBehavior
 * @property {string} appliesTo - On which products the validation should be applied. allProducts/specificProducts
 * @return {LogObject<validationRulesSaveUpdateRequirementsParams>} LogObject<validationRulesSaveUpdateRequirementsParams>
 */
export function validationRulesSaveUpdateRequirements(params) {
    return { evid: 401, src: 145, endpoint: '', params };
}
/**
 * A function to create a log object for the 'validationRulesRequirementDeleted' event (evid: 402)
 *
 * Event description: When user delete requirements
 *
 * @param {validationRulesRequirementDeletedParams} params - The parameters for this event
 * @property {GUID} id - Requirements id
 * @property {string} name - The requirement’s name
 * @return {LogObject<validationRulesRequirementDeletedParams>} LogObject<validationRulesRequirementDeletedParams>
 */
export function validationRulesRequirementDeleted(params) {
    return { evid: 402, src: 145, endpoint: '', params };
}
/**
 * A function to create a log object for the 'validationRulesLearnMoreClicked' event (evid: 403)
 *
 * Event description: When user click on learn more button
 *
 * @param {validationRulesLearnMoreClickedParams} params - The parameters for this event
 * @property {string} origin - Requirement page/ List
 * @property {boolean} isEmpty - Is the list empty or not. Null if the origin = 'requirement page’
 * @return {LogObject<validationRulesLearnMoreClickedParams>} LogObject<validationRulesLearnMoreClickedParams>
 */
export function validationRulesLearnMoreClicked(params) {
    return { evid: 403, src: 145, endpoint: '', params };
}
//# sourceMappingURL=index.js.map