import { __assign, __read, __rest, __spreadArray } from "tslib";
import { handleError } from './handlers/handleError';
import { handleLocationChange } from './handlers/handleLocationChange';
import { handleMultilingual } from './handlers/handleMultilingual';
import { handleRTL } from './handlers/handleRTL';
var createController = function (ControllerConstructor, controllerParams, extraParams) {
    try {
        if (extraParams) {
            return new ControllerConstructor(controllerParams, extraParams);
        }
        return new ControllerConstructor(controllerParams);
    }
    catch (e) {
        handleError(controllerParams)(e);
    }
};
export var controllerFactory = function (ControllerConstructor, _a) {
    if (_a === void 0) { _a = {}; }
    var extraParams = _a.extraParams, options = __rest(_a, ["extraParams"]);
    return function (controllerParams) {
        var controller = createController(ControllerConstructor, controllerParams, extraParams);
        var _a = __assign(__assign({}, options), controller.getOptionsOverrides()), shouldSkipMultilingual = _a.shouldSkipMultilingual, shouldCallAppSettingsOnlyWhenMultilingualIsNeeded = _a.shouldCallAppSettingsOnlyWhenMultilingualIsNeeded;
        var isMultilingualNotNeeded = function () {
            var _a;
            var multilingualFields = (_a = controllerParams === null || controllerParams === void 0 ? void 0 : controllerParams.appData) === null || _a === void 0 ? void 0 : _a.context.siteStore.getMultiLangFields();
            return (!controllerParams.controllerConfig.config.externalId ||
                !multilingualFields ||
                (multilingualFields === null || multilingualFields === void 0 ? void 0 : multilingualFields.isPrimaryLanguage));
        };
        var shouldSkipAppSettingsCall = shouldSkipMultilingual || (shouldCallAppSettingsOnlyWhenMultilingualIsNeeded && isMultilingualNotNeeded());
        return {
            pageReady: function () {
                return Promise.resolve()
                    .then(handleRTL(controllerParams))
                    .then(function () {
                    return Promise.all(__spreadArray(__spreadArray([], __read((shouldSkipAppSettingsCall ? [] : [handleMultilingual(controllerParams, controller.getFreeTexts())])), false), [
                        controller.init(),
                    ], false));
                })
                    .then(handleLocationChange(controllerParams, function () { return void controller.load(); }))
                    .catch(handleError(controllerParams));
            },
            exports: function () {
                return controller.exports();
            },
            updateConfig: function (_$w, updatedConfig) {
                var _a, _b;
                void ((_a = controller.onConfigUpdate) === null || _a === void 0 ? void 0 : _a.call(controller, updatedConfig));
                return void ((_b = controller.onStyleUpdate) === null || _b === void 0 ? void 0 : _b.call(controller, updatedConfig.style.styleParams));
            },
            updateAppSettings: function (_$w, updates) {
                var _a;
                return void ((_a = controller.onAppSettingsUpdate) === null || _a === void 0 ? void 0 : _a.call(controller, updates));
            },
            onBeforeUnLoad: function () {
                var _a;
                return (_a = controller.onBeforeUnLoad) === null || _a === void 0 ? void 0 : _a.call(controller);
            },
        };
    };
};
//# sourceMappingURL=controllerFactory.js.map