import { sortMixin, filterMixin } from '@wix/wix-data-items-common';
import { DistinctingValidator, messages } from '@wix/wix-data-errors';
import { isNumber } from '@wix/wix-data-utils';
import filterBuilder from '@wix/filter-builder';
class DistinctSort extends sortMixin() {
    constructor(obj = {}) {
        super(obj);
        this.orderBy = obj.orderBy;
    }
    asc(propertyName) {
        if (!propertyName) {
            return this.orderBy;
        }
        return this.ascending([propertyName]).orderBy;
    }
    desc(propertyName) {
        if (!propertyName) {
            return this.orderBy;
        }
        return this.descending([propertyName]).orderBy;
    }
    getOrderBy() {
        const orderBy = this.orderBy && this.orderBy[0];
        return orderBy ? orderBy[Object.keys(orderBy)[0]] : undefined;
    }
}
/*
 * This is only used in beforeDistinct hook (in @wix/wix-data-hook-execution-elementory-plugin) for now so no api provider is used.
 */
export class WixDataDistinct extends filterMixin() {
    constructor(obj = {}) {
        super(obj);
        this.collectionName = obj.collectionName;
        this.distinctProperty = obj.distinctProperty;
        this.skipNumber = obj.skipNumber || 0;
        this.limitNumber = obj.limitNumber;
        this.invalidArguments = obj.invalidArguments || [];
        this.orderBy = obj.orderBy || this._distinctSort().getSortModel();
    }
    get constructorName() {
        return 'WixDataDistinct';
    }
    getFilter() {
        return filterBuilder({ filterTree: this.filterTree });
    }
    getPropertyName() {
        return this.distinctProperty;
    }
    isAscending() {
        return (this._distinctSort().getOrderBy() &&
            this._distinctSort().getOrderBy() == 'asc');
    }
    isDescending() {
        return (this._distinctSort().getOrderBy() &&
            this._distinctSort().getOrderBy() == 'desc');
    }
    filter(filter) {
        const [newInvalidArguments] = this._distinctValidator('.filter')
            .arityIsOne(arguments)
            .filterIsNotSet(this)
            .filterBuilder(filter)
            .validateAndAggregate();
        return new WixDataDistinct({
            collectionName: this.collectionName,
            distinctProperty: this.distinctProperty,
            filterTree: filter.filterTree,
            skipNumber: this.skipNumber,
            limitNumber: this.limitNumber,
            orderBy: this.orderBy,
            invalidArguments: newInvalidArguments.concat(filter.invalidArguments),
        });
    }
    propertyName(newPropertyName) {
        const [newInvalidArguments] = this._distinctValidator('.filter')
            .arityIsOne(arguments)
            .filterIsNotSet(this)
            .nonEmptyPropertyName('propertyName')
            .validateAndAggregate();
        let orderBy = this.orderBy && this.orderBy[0];
        if (orderBy) {
            const order = orderBy[Object.keys(orderBy)[0]];
            orderBy = { [newPropertyName]: order };
        }
        return new WixDataDistinct({
            collectionName: this.collectionName,
            distinctProperty: newPropertyName,
            filterTree: this.filterTree,
            skipNumber: this.skipNumber,
            limitNumber: this.limitNumber,
            orderBy: orderBy ? [orderBy] : this.orderBy,
            invalidArguments: newInvalidArguments,
        });
    }
    skip(skipNumber) {
        const [newInvalidArguments] = this._distinctValidator('.skip')
            .arityIsOne(arguments)
            .isNonNegativeNumber(skipNumber)
            .isInteger(skipNumber)
            .validateAndAggregate();
        return new WixDataDistinct({
            collectionName: this.collectionName,
            distinctProperty: this.distinctProperty,
            filterTree: this.filterTree,
            skipNumber,
            limitNumber: this.limitNumber,
            orderBy: this.orderBy,
            invalidArguments: newInvalidArguments,
        });
    }
    limit(limitNumber) {
        const [newInvalidArguments] = this._distinctValidator('.limit')
            .arityIsOne(arguments)
            .isPositiveNumber(limitNumber)
            .isInteger(limitNumber)
            .validateAndAggregate();
        return new WixDataDistinct({
            collectionName: this.collectionName,
            distinctProperty: this.distinctProperty,
            filterTree: this.filterTree,
            skipNumber: this.skipNumber,
            limitNumber,
            orderBy: this.orderBy,
            invalidArguments: newInvalidArguments,
        });
    }
    ascending() {
        return new WixDataDistinct({
            collectionName: this.collectionName,
            distinctProperty: this.distinctProperty,
            filterTree: this.filterTree,
            skipNumber: this.skipNumber,
            limitNumber: this.limitNumber,
            orderBy: this._distinctSort().asc(this.distinctProperty),
            invalidArguments: this.invalidArguments,
        });
    }
    descending() {
        return new WixDataDistinct({
            collectionName: this.collectionName,
            distinctProperty: this.distinctProperty,
            filterTree: this.filterTree,
            skipNumber: this.skipNumber,
            limitNumber: this.limitNumber,
            orderBy: this._distinctSort().desc(this.distinctProperty),
            invalidArguments: this.invalidArguments,
        });
    }
    _distinctValidator(operatorName) {
        return new DistinctValidator(operatorName, this.invalidArguments);
    }
    _distinctSort() {
        return new DistinctSort({ orderBy: this.orderBy });
    }
}
const MAX_SAFE_INTEGER = 9007199254740991;
class DistinctValidator extends DistinctingValidator {
    constructor(operatorName, previousInvalidArguments) {
        super(previousInvalidArguments);
        this.operatorName = operatorName;
    }
    filterBuilder(filter) {
        return this.addValidation(() => filter.constructorName === 'FilterBuilder', () => messages.aggregateValidations.filterMustBeBuilder(this.operatorName));
    }
    filterIsNotSet(distinct) {
        return this.addValidation(() => distinct.filterTree === undefined ||
            (Object.keys(distinct.filterTree).length === 1 &&
                distinct.filterTree.$and &&
                distinct.filterTree.$and.length === 0), () => messages.aggregateValidations.filterIsAlreadySet(this.operatorName));
    }
    nonEmptyPropertyName(propertyName) {
        return this.addValidation(() => typeof propertyName === 'string' && propertyName.length > 0, () => messages.queryValidations.isNonEmptyString(this.operatorName));
    }
    _isNumber(specifier, operand) {
        return this.addValidation(() => isNumber(operand), () => messages.queryValidations.isNumber(this.operatorName, specifier, operand));
    }
    isPositiveNumber(operand) {
        return this._isNumber('positive', operand).addValidation(() => !Number.isNaN(operand) && operand > 0, () => messages.queryValidations.isPositiveNumber(this.operatorName, operand));
    }
    isNonNegativeNumber(operand) {
        return this._isNumber('non-negative', operand).addValidation(() => !Number.isNaN(operand) && operand >= 0, () => messages.queryValidations.isNonNegativeNumber(this.operatorName, operand));
    }
    isInteger(operand) {
        return this.addValidation(() => !Number.isNaN(operand) &&
            Number.isFinite(operand) &&
            Number.isInteger(operand) &&
            operand < MAX_SAFE_INTEGER &&
            operand > -MAX_SAFE_INTEGER, () => messages.queryValidations.isInteger(this.operatorName, operand));
    }
}
//# sourceMappingURL=distinct.js.map