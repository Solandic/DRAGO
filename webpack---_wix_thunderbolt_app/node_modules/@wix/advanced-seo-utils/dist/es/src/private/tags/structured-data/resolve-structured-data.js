var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { shouldRenderPanelSchema } from './utils/should-render-panel-schema';
import { resolvePanelSchemas } from './utils/resolve-panel-schemas';
import { mergeParentChildSchemas } from './utils/merge-parent-child-schemas';
export var resolveStructuredData = function (tags, context) {
    if (tags === void 0) { tags = []; }
    if (context === void 0) { context = {}; }
    var schemasSetInPanels = {};
    var nonSDataTags = [];
    tags.forEach(function (tag) {
        var _a;
        var isPanelsSchema = (_a = tag === null || tag === void 0 ? void 0 : tag.meta) === null || _a === void 0 ? void 0 : _a.schemaType;
        if (isPanelsSchema) {
            if (shouldRenderPanelSchema(tag, context)) {
                schemasSetInPanels = resolvePanelSchemas(schemasSetInPanels, tag);
            }
            return;
        }
        nonSDataTags.push(tag);
    });
    var sdTags = Object.values(schemasSetInPanels).flat();
    var parentSchemas = sdTags.filter(function (sdTag) { return !sdTag.meta.parentSchemaType; });
    return __spreadArray(__spreadArray([], nonSDataTags, true), parentSchemas.map(function (parentSchema) {
        var childSchemas = sdTags
            .filter(function (tag) { return tag.meta.parentSchemaType === parentSchema.meta.schemaType; })
            .sort(function (a, b) { return b.children.length - a.children.length; });
        return childSchemas.length && !childSchemas[0].disabled
            ? mergeParentChildSchemas(parentSchema, childSchemas[0])
            : parentSchema;
    }), true);
};
