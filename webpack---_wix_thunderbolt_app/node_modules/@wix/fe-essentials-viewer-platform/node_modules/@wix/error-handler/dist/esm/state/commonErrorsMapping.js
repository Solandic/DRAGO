export function createCommonErrorsMapping(t, state) {
  const {
    webWindow
  } = state;
  return {
    applicationError: {
      CAPTCHA_REQUIRED: () => ({
        message: t('errorHandler.common-error.captchaRequired'),
        action: {
          text: t('errorHandler.common-error.captchaRequired.verify.cta')
        }
      })
    },
    statusCodeError: {
      UNAUTHENTICATED: () => ({
        message: t('errorHandler.common-error.unauthenticated'),
        action: {
          text: t('errorHandler.common-error.unauthenticated.cta'),
          onClick: webWindow ? () => {
            const url = new URL('https://users.wix.com/signin');
            url.searchParams.set('redirectTo', window.location.href);
            webWindow.open(url.href, '_blank');
          } : undefined
        }
      }),
      INVALID_ARGUMENT: () => ({
        message: t('errorHandler.common-error.validationBasic')
      }),
      PERMISSION_DENIED: () => ({
        message: t('errorHandler.common-error.permission-denied.site')
      }),
      NOT_FOUND: () => ({
        message: t('errorHandler.common-error.not-found'),
        action: {
          text: t('errorHandler.common-error.tryAgain.cta')
        }
      }),
      ALREADY_EXISTS: () => ({
        message: t('errorHandler.common-error.conflict'),
        action: {
          text: t('errorHandler.common-error.refresh.cta'),
          onClick: webWindow ? () => {
            webWindow.location.reload();
          } : undefined
        }
      }),
      UNAVAILABLE: () => ({
        message: t('errorHandler.common-error.technicalIssue')
      }),
      RESOURCE_EXHAUSTED: () => ({
        message: t('errorHandler.common-error.resource-exhausted')
      }),
      BAD_GATEWAY: () => ({
        message: t('errorHandler.common-error.technicalIssue'),
        action: {
          text: t('errorHandler.common-error.tryAgain.cta')
        }
      }),
      GATEWAY_TIMEOUT: () => ({
        message: t('errorHandler.common-error.technicalIssue')
      }),
      INTERNAL: () => ({
        message: t('errorHandler.common-error.technicalIssue')
      })
    }
  };
}
export function getConnectionErrorShowErrorProps(t) {
  return {
    message: t('errorHandler.common-error.noConnection'),
    action: {
      text: t('errorHandler.common-error.tryAgain.cta')
    }
  };
}
export function getDefaultErrorShowErrorProps(t) {
  return {
    message: t('errorHandler.common-error.technicalIssue')
  };
}
export function createGetNetworkErrorShowErrorProps(t) {
  return errorAccessor => {
    var _errorAccessor$except;
    const lcExceptionMessage = (_errorAccessor$except = errorAccessor.exceptionMessage) == null ? void 0 : _errorAccessor$except.toLowerCase();
    if (lcExceptionMessage === 'network error') {
      return {
        message: t('errorHandler.common-error.networkError')
      };
    }
    if (lcExceptionMessage === 'request aborted' || lcExceptionMessage === 'timeout exceeded') {
      return {
        message: t('errorHandler.common-error.technicalIssue.generic')
      };
    }
    return {
      message: t('errorHandler.common-error.technicalIssue-unmappedError')
    };
  };
}
export async function setCommonErrors(state) {
  const {
    translations,
    errorMonitor
  } = state;
  try {
    const t = await translations.getTranslateFn();
    state.commonErrors = {
      commonErrorsMap: createCommonErrorsMapping(t, state),
      connectionErrorShowErrorProps: getConnectionErrorShowErrorProps(t),
      defaultErrorShowErrorProps: getDefaultErrorShowErrorProps(t),
      getNetworkErrorShowErrorProps: createGetNetworkErrorShowErrorProps(t)
    };
  } catch (e) {
    errorMonitor.captureException(e);
  }
}
//# sourceMappingURL=commonErrorsMapping.js.map