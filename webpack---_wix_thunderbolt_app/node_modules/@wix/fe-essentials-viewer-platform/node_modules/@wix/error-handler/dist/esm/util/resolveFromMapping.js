import { statusCodeNumericToText } from './statusCodeNumericToText';
export function resolveFromMapping(params) {
  const {
    httpError,
    errorAccessor,
    errorCodesMap
  } = params;
  const {
    applicationError,
    statusCode,
    error,
    validationError
  } = errorAccessor;
  if (applicationError) {
    var _errorCodesMap$applic;
    const {
      code
    } = applicationError;
    const applicationErrorMapping = (_errorCodesMap$applic = errorCodesMap.applicationError) == null ? void 0 : _errorCodesMap$applic[code];
    if (applicationErrorMapping === false) {
      return null;
    }
    if (applicationErrorMapping) {
      return applicationErrorMapping(applicationError, error);
    }
  }
  if (errorCodesMap.validationError) {
    var _validationError$fiel;
    const rules = Object.keys(errorCodesMap.validationError);
    const firstValidationError = validationError == null || (_validationError$fiel = validationError.fieldViolations) == null ? void 0 : _validationError$fiel.find(_ref => {
      let {
        ruleName
      } = _ref;
      return rules.includes(ruleName);
    });
    if (firstValidationError != null && firstValidationError.ruleName) {
      var _errorCodesMap$valida;
      const validationErrorMapping = (_errorCodesMap$valida = errorCodesMap.validationError) == null ? void 0 : _errorCodesMap$valida[firstValidationError.ruleName];
      if (validationErrorMapping) {
        return validationErrorMapping(error);
      }
    }
  }
  const statusCodeText = statusCode != null ? statusCodeNumericToText[statusCode] : null;
  const statusCodeErrorMap = {
    ...(errorCodesMap.serverError ? {
      INTERNAL: errorCodesMap.serverError,
      NOT_IMPLEMENTED: errorCodesMap.serverError,
      BAD_GATEWAY: errorCodesMap.serverError,
      UNAVAILABLE: errorCodesMap.serverError
    } : {}),
    ...errorCodesMap.statusCodeError
  };
  const statusCodeErrorMappingFunction = statusCodeText != null ? statusCodeErrorMap[statusCodeText] : null;
  if (statusCodeErrorMappingFunction) {
    return statusCodeErrorMappingFunction(httpError);
  }
  return null;
}
//# sourceMappingURL=resolveFromMapping.js.map