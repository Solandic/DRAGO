import { serializeError } from 'serialize-error';
import { getTokenInfo } from './auth/AppStrategy.js';
export const isWebMethodModules = (val) => val.__type === 'web-method-module';
var Permissions;
(function (Permissions) {
    Permissions["Anyone"] = "anyone";
    Permissions["Admin"] = "admin";
    Permissions["SiteMember"] = "site-member";
})(Permissions || (Permissions = {}));
async function checkPermission(request, permission) {
    const accessToken = request.headers.get('Authorization');
    if (!accessToken) {
        throw new Error('Request is missing authentication data');
    }
    const { subjectType } = await getTokenInfo(accessToken);
    switch (permission) {
        case Permissions.Anyone: {
            if (subjectType !== 'VISITOR' &&
                subjectType !== 'MEMBER' &&
                subjectType !== 'USER') {
                throw new Error('Insufficient permissions');
            }
            break;
        }
        case Permissions.SiteMember: {
            if (subjectType !== 'MEMBER' && subjectType !== 'USER') {
                throw new Error('Insufficient permissions');
            }
            break;
        }
        case Permissions.Admin: {
            if (subjectType !== 'USER') {
                throw new Error('Insufficient permissions');
            }
            break;
        }
    }
}
const urlRegex = /\/_webMethods\/(.+\..+)\/(.+\..+)/;
// /_webMethods/backend/my-module.web.js/multiply.ajax
function extractUrlParts(url) {
    const parts = url.match(urlRegex);
    if (parts) {
        return [parts[1], parts[2].replace('.ajax', '')];
    }
}
function isRequestBodyValid(body) {
    return !!body && typeof body === 'object' && Array.isArray(body);
}
const productionErrorMessage = 'Error: Unable to handle the request. Contact the site administrator or view site monitoring logs for more information.';
export function webMethodModules() {
    const webMethods = {};
    const client = {
        async processRequest(request, devMode = false) {
            const urlParts = extractUrlParts(request.url);
            if (!urlParts) {
                return new Response('invalid request', { status: 400 });
            }
            const [file, method] = urlParts;
            const body = (await request.json());
            if (!isRequestBodyValid(body)) {
                return new Response('invalid request', { status: 400 });
            }
            const loadWebMethodFile = webMethods[`/${file}`];
            try {
                if (!loadWebMethodFile) {
                    throw new Error(`Error loading web module ${file}: Cannot find module '${file}'`);
                }
                const webMethodFile = await loadWebMethodFile();
                const webMethod = webMethodFile[method];
                if (!webMethod) {
                    throw new Error(`Error loading function from web module ${file}: function '${method}' not found`);
                }
                await checkPermission(request, webMethod.permission);
                return Response.json({
                    result: await webMethod.handler(...body),
                });
            }
            catch (error) {
                const serializedError = serializeError(error, { maxDepth: 1 });
                return Response.json({
                    result: devMode || !(error instanceof Error)
                        ? serializedError
                        : {
                            ...serializedError,
                            message: productionErrorMessage,
                            stack: productionErrorMessage,
                        },
                    exception: true,
                });
            }
        },
    };
    return {
        initModule(webMethodModule) {
            Object.assign(webMethods, webMethodModule);
        },
        client,
    };
}
